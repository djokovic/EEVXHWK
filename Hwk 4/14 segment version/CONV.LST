8086/87/88/186 MACRO ASSEMBLER    CONV                                                     17:02:12  11/09/;3  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE CONV
OBJECT MODULE PLACED IN CONV.OBJ
ASSEMBLER INVOKED BY:  C:\5XTOOLS\ASM86.EXE CONV.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1     NAME        conv
                             2     
                             3     ; local include files
                             4 +1  $INCLUDE(CONV.inc)
                      =1     5     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1     6     ;                                                                            ;
                      =1     7     ;                                  conversions.INC                           ;
                      =1     8     ;                           String Conversion Constants                          ;
                      =1     9     ;                                 Include File                               ;
                      =1    10     ;                                                                            ;
                      =1    11     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    12     
                      =1    13     ; This file contains the definitions for the timing functions for the 8088
                      =1    14     ; version of the Microprocessor-Based Clock.
                      =1    15     ;
                      =1    16     ; Revision History:
                      =1    17     ;    10/23/2013                 Created - Anjian Wu
                      =1    18     
                      =1    19     
                      =1    20     
                      =1    21     ; ASCII Constants
                      =1    22     
  0000                =1    23     ASCII_NULL      EQU     0              ;interrupt vector for timer
                      =1    24     
                      =1    25     
                      =1    26     
                      =1    27     ; General Definitions
                      =1    28     
  000F                =1    29     Hex2StrMASK     EQU     000FH           ;number of interrupts per second * 10
  0004                =1    30     ByteSize        EQU     4               ; 4 Bits in a byte
                      =1    31     
  0000                =1    32     CounterEmpty    EQU             0                               ; Value for loop coun
                                   ter when empty
                      =1    33     
  0004                =1    34     MaxHexStrSize   EQU             4                               ; Value for max size 
                                   of Hex string (=<4)
                            35     
                            36     ;Procedure:                     Hex2String
                            37     ;
                            38     ;Description:           This procedure will convert a value b^^nb^^ into a hex that 
                                              
                            39     ;                                       is fixed at 4 characters and stores are strin
                                   g.
                            40     ;
                            41     ;                   If the Hex is less than 4 chars long, zeros are fitted
                            42     ;
                            43     ;                                       String will be <null> terminated. The string 
                                   is stored at 
                            44     ;                                       a memory location indicated by 'a'. AX - 'n',
                                    SI - 'a'.
8086/87/88/186 MACRO ASSEMBLER    CONV                                                     17:02:12  11/09/;3  PAGE    2


LOC  OBJ                  LINE     SOURCE

                            45     ;
                            46     ;
                            47     ;
                            48     ;Operation:                     This code will convert a hex number from AX (n) and s
                                   tore 
                            49     ;                                       the signed ASCII values at 'a'. For convenien
                                   ce, the storing
                            50     ;                   is done in REVERSE (i.e from SI + HExMaxsize down to SI, this
                            51     ;                   includes ASCII_NULL).
                            52     ;
                            53     ;                   The procedure to actually store each char is done by calling
                            54     ;                   the StoreDaChar(byte AL) function. See StoreDaChar for more 
                            55     ;                   details.
                            56     ;
                            57     ;Arguments:             n (AX) -> 16 - bit  value
                            58     ;                                       a (DS:SI) -> location in memory (DS:SI)
                            59     ;
                            60     ;Return Values:         None;
                            61     ;
                            62     ;Shared Variables:      None.
                            63     ;
                            64     ;Local Variables:       AX -> Holds arg, shifted arg, and masked arg
                            65     ;                                       DX -> Holds shifted arg, used to place ASCII_
                                   NULL
                            66     ;                   CX -> While loop counter
                            67     ;                   SI -> String pointer
                            68     ;
                            69     ;Global Variables:      None.
                            70     ;                                       
                            71     ;                                       
                            72     ;Input:                 None.
                            73     ;
                            74     ;Output:                Fixed 4 char string starting at SI and ending at SI + 5 (
                            75     ;                   including ASCII_NULL)
                            76     ;
                            77     ;Registers Changed: Flags
                            78     ;
                            79     ;Stack Depth:           5 words (4 push/pops and 1 call)
                            80     ;
                            81     ;Known Bugs:            None :D
                            82     ;
                            83     ;Data Structures:       None.
                            84     ;
                            85     ;Error Handling:        If is less than CounterEmpty, the loop terminates as well;
                            86     ;
                            87     ;Algorithms:            1. Mask off least sig BYTE
                            88     ;                   2. Call StoreDaChar
                            89     ;                   3. Update pointer (DEC)
                            90     ;                   4. Shift Arg down 4 bits
                            91     ;                   5. Update counter (DEC)
                            92     ;                   5. LOOP until counter is empty
                            93     ;
                            94     ;Limitations:           Will always allocate 5 characters worth space in mem for 
                            95     ;                                       return value (e.g. 0xF -> 0x000F). 
                            96     ;
8086/87/88/186 MACRO ASSEMBLER    CONV                                                     17:02:12  11/09/;3  PAGE    3


LOC  OBJ                  LINE     SOURCE

                            97     ;                   Cannot store any Hex greater than 4 chars.
                            98     ;
                            99     ;Author:                        Anjian Wu
                           100     ;History:                       Pseudo code: 10-21-2013
                           101     ;                   Intial working: 10/23/2013
                           102     ;                   Documentation Update: 10/24/2013
                           103     ;-------------------------------------------------------------------------------
                           104     
                           105     CGROUP  GROUP   CODE
                           106     
----                       107     CODE SEGMENT PUBLIC 'CODE'
                           108     
                           109             ASSUME  CS:CGROUP
                           110     
0000                       111     Hex2String              PROC    NEAR
                           112                                     PUBLIC  Hex2String
                           113     
0000 50                    114             PUSH    AX
0001 52                    115             PUSH    DX
0002 51                    116             PUSH    CX
0003 56                    117             PUSH    SI
                           118     
0004                       119     HexINIT:
                           120     
0004 B90400                121             MOV     CX, MaxHexStrSize   ; Counter should loop fixed Hex size of 4
0007 83C604                122             ADD     SI, MaxHexStrSize   ; Reverse insertion of chars means start at ASCII
                                   _NULL
                           123             
000A BA0000                124             MOV     DX, ASCII_NULL      ; Place ASCII NULL
000D 8814                  125             MOV     DS:[SI], DL         ; Store
000F 4E                    126             DEC     SI;                 ; Update pointer
                           127             
0010 8BD0                  128             MOV     DX, AX              ; Save the arg
                           129     
                           130             
0012                       131     HexLoop: 
0012 83F900                132             CMP     CX, CounterEmpty    ;Is the while loop done when counter is empty.
0015 7E0F                  133             JLE     Hex2StringEND       ;Yes, thus exit loop
                           134             ;JG     HexLoopBody         ; NO continue to body
                           135             
0017                       136     HexLoopBody:        
0017 250F00                137                     AND     AX, Hex2StrMASK     ;Mask the last byte (4 bits)
                           138             
001A E86400                139             CALL    StoreDaChar         ;Store Char, Note BX is changed
001D 4E                    140             DEC     SI                  ;Update pointer
                           141             
001E C1EA04                142             SHR     DX, ByteSize        ;Shift off the last byte
0021 8BC2                  143             MOV     AX, DX              ;update the ARG
                           144             
0023 49                    145             DEC     CX                  ;Decrement the counter
                           146                     
0024 EBEC                  147             JMP     HexLoop             ;Loop
                           148     
0026                       149     Hex2StringEND:
                           150             
8086/87/88/186 MACRO ASSEMBLER    CONV                                                     17:02:12  11/09/;3  PAGE    4


LOC  OBJ                  LINE     SOURCE

0026 5E                    151             POP    SI
0027 59                    152             POP    CX
0028 5A                    153             POP    DX
0029 58                    154             POP    AX
                           155             
002A C3                    156             RET
                           157     Hex2String ENDP
                           158     
                           159     
                           160     ;Procedure:                     Dec2String
                           161     ;
                           162     ;Description:           This procedure will convert a value b^^nb^^ into a decimal th
                                   at                 
                           163     ;                                       is at most 6 characters (with sign) and store
                                   s are string.
                           164     ;
                           165     ;                                       String will be <null> terminated. The string 
                                   is stored at 
                           166     ;                                       a memory location indicated by 'a'. AX - 'n',
                                    SI - 'a'.
                           167     ;                   The string is than store from SI to SI + 5
                           168     ;
                           169     ;                                       Assume we store first digit first, and <null>
                                    last.
                           170     ;
                           171     ;                   For positive integers, there will be NO sign designation.
                           172     ;
                           173     ;                   For neg integers, a "-" char is placed before the number.
                           174     ;
                           175     ;                   Actually calls external function StoreDaChar to store the char
                           176     ;                   see that function for more details.
                           177     ;
                           178     ;
                           179     ;Operation:                     This code will convert a bin number from AX (n) and s
                                   tore 
                           180     ;                                       the signed decimal value at 'a'.
                           181     ;
                           182     ;                   It does this by the following steps
                           183     ;                   1. Check sign and places sign if needed
                           184     ;                   2. Continually divide the ARG by a PWR10 (starting with 10000
                           185     ;                   and decrementing by a factor of 10) and grabbing the digit 
                           186     ;                   to be placed.
                           187     ;                   3. Call the StoreDaChar function to store the char
                           188     ;                   4. Repeat until the PWR10 counter is 0.
                           189     ;                   5. Add the ASCII_NULL
                           190     ;
                           191     ;Arguments:             n (AX) -> 16 - bit signed value
                           192     ;                                       a (DS:SI) -> location in memory (DS:SI)
                           193     ;
                           194     ;Return Values:         Error Flag
                           195     ;
                           196     ;Shared Variables:      None.
                           197     ;
                           198     ;Local Variables:       AX -> arg, char digit, used for storing DIV answer
                           199     ;                                       BX -> stores arg, when AX is used 
8086/87/88/186 MACRO ASSEMBLER    CONV                                                     17:02:12  11/09/;3  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           200     ;                                       CX -> PWR10 counter
                           201     ;                                       DX -> Stores Remainder from DIV
                           202     ;                   SI -> String pointer
                           203     ;
                           204     ;Global Variables:      None.
                           205     ;                                       
                           206     ;                                       
                           207     ;Input:                 None.
                           208     ;Output:                String in (DS:SI). Fixed size of 5 bytes.
                           209     ;
                           210     ;Registers Changed:     Flags
                           211     ;
                           212     ;Stack Depth:           6 (5 push pops and 1 CALL)
                           213     ;
                           214     ;Known Bugs:            None :D
                           215     ;
                           216     ;Data Structures:       None.
                           217     ;
                           218     ;Error Handling:        The program has an error flag that is raised if the Dec2BCD
                           219     ;                                       runs into error. If so, the stored value is u
                                   ndefined.
                           220     ;
                           221     ;Algorithms:        1. Continually divide the ARG by a PWR10 (starting with 10000
                           222     ;                   and decrementing by a factors of 10) and grabbing the digit 
                           223     ;                   to be placed.
                           224     ;                   2. Call the StoreDaChar function to store the char digit
                           225     ;                   3. Repeat until the PWR10 counter is 0.
                           226     ;
                           227     ;Limitations:           Only handles numbers less than 5 digits. Will always    
                                              
                           228     ;                                       allocate 5 characters worth space in mem for 
                                   return
                           229     ;                                       value (e.g. 1 -> +0001).
                           230     ;
                           231     ;Author:                        Anjian Wu
                           232     ;
                           233     ;History:                       Pseudo code: 10-21-2013
                           234     ;                   Intial working: 10/23/2013
                           235     ;                   Documentation Update: 10/24/2013
                           236     ;-------------------------------------------------------------------------------
                           237     
                           238     
002B                       239     Dec2String              PROC    NEAR
                           240                                     PUBLIC  Dec2String
                           241     
002B 50                    242             PUSH    AX                      ; Store Registers used
002C 52                    243             PUSH    DX
002D 51                    244             PUSH    CX
002E 56                    245             PUSH    SI
002F 52                    246             PUSH    DX
                           247             
0030                       248     DecSignCheck:
                           249     
0030 3D0000                250                     CMP     AX, 0                   ; Check to see if Num is neg
0033 7D0A                  251             JGE     DecIsPos                ; Num is not neg, thus no '-' needed
8086/87/88/186 MACRO ASSEMBLER    CONV                                                     17:02:12  11/09/;3  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           252             ;JL                             ; Num is neg, need 2's complement and '-' 
0035                       253     DecIsNeg:
0035 F7D8                  254             NEG     AX                      ;
0037 B32D                  255             MOV     BL, '-'                 ;
0039 881C                  256             MOV     DS:[SI], BL             ;Place the character in mem
003B 46                    257             INC     SI                      ;Update the char pointer
                           258            
003C EB0690                259             JMP     Bin2BCDInit             ;
003F                       260     DecIsPos:
003F B330                  261             MOV     BL, '0'                 ;
0041 881C                  262             MOV     DS:[SI], BL             ;
                           263     
0043 46                    264             INC     SI                      ;Update the char pointer
                           265                     ;JMP    Bin2BCDInit
                           266             
0044                       267     Bin2BCDInit:                            ;initialization
0044 8BD8                  268             MOV     BX, AX                  ;BX = arg. Save the arg
                           269     
0046 B91027                270             MOV     CX, 10000               ;start with 10^3 (10000's digit)
0049 F8                    271             CLC                             ;no error yet
                           272             ;JMP    Bin2BCDLoop             ;now start looping to get digits
                           273     
                           274     
004A                       275     Bin2BCDLoop:                            ;loop getting the digits in arg
                           276     
004A 722A                  277             JC      Dec2StringEND          ;if there is an error - we're done
004C 83F900                278             CMP     CX, 0                   ;check if pwr10 > 0
004F 7E25                  279             JLE     Dec2StringEND          ;if not, have done all digits, done
                           280             ;JMP    Bin2BCDLoopBody         ;else get the next digit
                           281     
0051                       282     Bin2BCDLoopBody:                        ;get a digit
0051 8BC3                  283             MOV     AX, BX
0053 BA0000                284             MOV     DX, 0                   ;setup for arg/pwr10 remainder
                           285     
0056 F7F1                  286             DIV     CX                      ;digit (AX) = arg/pwr10
0058 3D0A00                287             CMP     AX, 10                  ;check if digit < 10
005B 7316                  288             JAE     TooBigError             ;if not, it's an error
                           289             ;JB     HaveDigit               ;otherwise process the digit
                           290     
005D                       291     HaveDigit:                              ;put the digit into the result
                           292           
005D E82100                293             CALL    StoreDaChar             ;Store Char, BX is changed, but that's OK
0060 46                    294             INC     SI                      ;Update the char pointer
                           295             
0061                       296     DecUpdatePWR10:
                           297     
0061 8BDA                  298             MOV     BX, DX                  ;now work with arg = arg MODULO pwr10
0063 8BC1                  299             MOV     AX, CX                  ;setup to update pwr10
0065 B90A00                300             MOV     CX, 10                  ;   (clears CH too)
0068 BA0000                301             MOV     DX, 0                   ;setup for arg/pwr10 remainder   
006B F7F1                  302             DIV     CX                      ;   (note: pwr10/10 <= 100 so no overflow)
006D 8BC8                  303             MOV     CX, AX                  ;pwr10 = pwr10/10 (note: CH = 0)
006F F8                    304             CLC                             ;no error
0070 EB0290                305             JMP     EndBin2BCDLoopBody      ;done getting this digit
                           306     
8086/87/88/186 MACRO ASSEMBLER    CONV                                                     17:02:12  11/09/;3  PAGE    7


LOC  OBJ                  LINE     SOURCE

0073                       307     TooBigError:                            ;the value was too big
0073 F9                    308             STC                             ;set the error flag
                           309             ;JMP    EndBin2BCDLoopBody      ;and done with this loop iteration
                           310     
0074                       311     EndBin2BCDLoopBody:
0074 EBD4                  312             JMP     Bin2BCDLoop             ;keep looping (end check is at top)
                           313     
0076                       314     Dec2StringEND:
0076 B80000                315             MOV     AX, ASCII_NULL          ;
0079 8804                  316             MOV     DS:[SI], AL             ;Place the character in mem
                           317            
007B 5A                    318             POP    DX                       ; Restore registers used
007C 5E                    319             POP    SI
007D 59                    320             POP    CX
007E 5A                    321             POP    DX
007F 58                    322             POP    AX
                           323             
0080 C3                    324             RET
                           325            
                           326     Dec2String      ENDP    
                           327     
                           328     
                           329     ;Procedure:                     StoreDaChar
                           330     ;
                           331     ;Description:       This function takes AL and SI as the args. AL maps to its corresp
                                   onding
                           332     ;                   ASCII char. It will then take this char and store it at DS:SI
                           333     ;
                           334     ;Operation:         The passed integer is looked up in a table containing the
                           335     ;                   ASCII char of every HEX char (from '0' to 'F').
                           336     ;
                           337     ; Arguments:         AL -> unsigned value for which to compute the square root.
                           338     ;
                           339     ; Return Value:      AL -> becomes last placed Char
                           340     ;
                           341     ;
                           342     ;Shared Variables:      None.
                           343     ;
                           344     ;Local Variables:       AL -> INT sign flag
                           345     ;                                       BX -> INT current power of 10
                           346     ;
                           347     ;Global Variables:      None.
                           348     ;                                       
                           349     ;                                       
                           350     ;Input:                 None.
                           351     ;
                           352     ;Output:                A CHAR at (DS:SI)
                           353     ;
                           354     ;Registers Changed: flags, AL becomes last placed Char.
                           355     ;
                           356     ;Stack Depth:           1 WORD
                           357     ;
                           358     ;Known Bugs:            None :D
                           359     ;
                           360     ;Data Structures:       None.
8086/87/88/186 MACRO ASSEMBLER    CONV                                                     17:02:12  11/09/;3  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           361     ;
                           362     ;Error Handling:        The program has an error flag that is raised if the Dec2BCD
                           363     ;                                       runs into error. If so, the stored value is u
                                   ndefined.
                           364     ;
                           365     ;Algorithms:            Table lookup.
                           366     ;
                           367     ;Limitations:           None.
                           368     
                           369     ;Author:                        Anjian Wu
                           370     ;History:                       Pseudo code: 10-21-2013
                           371     ;                   Intial working: 10/23/2013
                           372     ;                   Documentation Update: 10/24/2013
                           373     ;-------------------------------------------------------------------------------
                           374     
0081                       375     StoreDaChar             PROC    NEAR
                           376                                     PUBLIC  StoreDaChar
                           377     
0081 53                    378             PUSH    BX
                           379     
                           380                     
0082 BB8C0090       R      381             MOV         BX, OFFSET(ASCIICharTable);point into the table of square roots
0086 2ED7                  382             XLAT    CS:ASCIICharTable               ;get the square root   
                           383             
0088 8804                  384             MOV     DS:[SI], AL             ;Place the character in mem
                           385     
008A 5B                    386             POP     BX
008B C3                    387             RET
                           388             
                           389     StoreDaChar         ENDP
                           390     
                           391     ; ASCIICharTable
                           392     ;
                           393     ; Description:      This table contains the ASCII char of Hex 0 - F in code segment
                           394     ;
                           395     ; Author:           Anjian Wu
                           396     ; Last Modified:    10-23-2013
                           397     
                           398     
008C                       399     ASCIICharTable  LABEL   BYTE
                           400     
008C 30                    401             DB       '0'
008D 31                    402         DB   '1'
008E 32                    403         DB   '2'
008F 33                    404         DB   '3'
0090 34                    405         DB   '4'
0091 35                    406         DB   '5'
0092 36                    407         DB   '6'
0093 37                    408         DB   '7'
0094 38                    409         DB   '8'
0095 39                    410         DB   '9'
0096 41                    411         DB   'A'
0097 42                    412         DB   'B'
0098 43                    413         DB   'C'
0099 44                    414         DB   'D'
8086/87/88/186 MACRO ASSEMBLER    CONV                                                     17:02:12  11/09/;3  PAGE    9


LOC  OBJ                  LINE     SOURCE

009A 45                    415         DB   'E'
009B 46                    416         DB   'F'
                           417         
----                       418     CODE ENDS
                           419     
                           420             END

ASSEMBLY COMPLETE, NO ERRORS FOUND
