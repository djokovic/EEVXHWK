8086/87/88/186 MACRO ASSEMBLER    CONV                                                     03:02:46  11/10/;3  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE CONV
OBJECT MODULE PLACED IN CONV.OBJ
ASSEMBLER INVOKED BY:  C:\UTIL\ASM86.EXE CONV.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1     NAME        conv
                             2     
                             3     ; local include files
                             4 +1  $INCLUDE(CONV.inc)
                      =1     5     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1     6     ;                                                                            ;
                      =1     7     ;                                  Conversions.INC                           ;
                      =1     8     ;                           String Conversion Constants                          ;
                      =1     9     ;                                 Include File                               ;
                      =1    10     ;                                                                            ;
                      =1    11     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    12     
                      =1    13     ; This file contains the definitions for the CONV functions for the 8088
                      =1    14     ; 
                      =1    15     ;
                      =1    16     ; Revision History:
                      =1    17     ;    10/23/2013                 Created - Anjian Wu
                      =1    18     
                      =1    19     ; General Definitions
                      =1    20     
  000F                =1    21     Hex2StrMASK     EQU     000FH           ;number of interrupts per second * 10
  0004                =1    22     ByteSize        EQU     4               ; 4 Bits in a byte
                      =1    23     
  0000                =1    24     CounterEmpty    EQU             0                               ; Value for loop coun
                                   ter when empty
                      =1    25     
  0004                =1    26     MaxHexStrSize   EQU             4                               ; Value for max size 
                                   of Hex string (=<4)
                      =1    27     
                      =1    28     
                      =1    29     
                      =1    30     ; Queue Constants
                      =1    31     
  0200                =1    32     MAX_Q_LENG          EQU     512          ;Maxlength allowed for byte or word queue
                            33 +1  $INCLUDE(general.inc)
                      =1    34     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    35     ;                                                                               ;
                      =1    36     ;                                  General.INC                                  ;
                      =1    37     ;                               General Constants                           ;
                      =1    38     ;                                 Include File                              ;
                      =1    39     ;                                                                           ;
                      =1    40     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    41     
                      =1    42     ; This file contains general operations
                      =1    43     ;
                      =1    44     ; Revision History:
                      =1    45     ;    11/02/2013                 Created - Anjian Wu
                      =1    46     
                      =1    47     
                      =1    48     ; String Constants
8086/87/88/186 MACRO ASSEMBLER    CONV                                                     03:02:46  11/10/;3  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    49     
  0000                =1    50     ASCII_NULL      EQU     0           ;
                      =1    51     
                      =1    52     ; General Definitions for Main Loops
                      =1    53     
  0001                =1    54     FIRST_RESERVED_VEC      EQU     1           ;reserve vectors 1-3
  0003                =1    55     LAST_RESERVED_VEC       EQU     3       ;
  0100                =1    56     NUM_IRQ_VECTORS     EQU 256     ;number of interrupt vectors
                      =1    57     
                            58     
                            59     ;Procedure:                     Hex2String
                            60     ;
                            61     ;Description:           This procedure will convert a value b^^nb^^ into a hex that 
                                              
                            62     ;                                       is fixed at 4 characters and stores are strin
                                   g.
                            63     ;
                            64     ;                   If the Hex is less than 4 chars long, zeros are fitted
                            65     ;
                            66     ;                                       String will be <null> terminated. The string 
                                   is stored at 
                            67     ;                                       a memory location indicated by 'a'. AX - 'n',
                                    SI - 'a'.
                            68     ;
                            69     ;
                            70     ;
                            71     ;Operation:                     This code will convert a hex number from AX (n) and s
                                   tore 
                            72     ;                                       the signed ASCII values at 'a'. For convenien
                                   ce, the storing
                            73     ;                   is done in REVERSE (i.e from SI + HExMaxsize down to SI, this
                            74     ;                   includes ASCII_NULL).
                            75     ;
                            76     ;                   The procedure to actually store each char is done by calling
                            77     ;                   the StoreDaChar(byte AL) function. See StoreDaChar for more 
                            78     ;                   details.
                            79     ;
                            80     ;Arguments:             n (AX) -> 16 - bit  value
                            81     ;                                       a (DS:SI) -> location in memory (DS:SI)
                            82     ;
                            83     ;Return Values:         None;
                            84     ;
                            85     ;Shared Variables:      None.
                            86     ;
                            87     ;Local Variables:       AX -> Holds arg, shifted arg, and masked arg
                            88     ;                                       DX -> Holds shifted arg, used to place ASCII_
                                   NULL
                            89     ;                   CX -> While loop counter
                            90     ;                   SI -> String pointer
                            91     ;
                            92     ;Global Variables:      None.
                            93     ;                                       
                            94     ;                                       
                            95     ;Input:                 None.
                            96     ;
8086/87/88/186 MACRO ASSEMBLER    CONV                                                     03:02:46  11/10/;3  PAGE    3


LOC  OBJ                  LINE     SOURCE

                            97     ;Output:                Fixed 4 char string starting at SI and ending at SI + 5 (
                            98     ;                   including ASCII_NULL)
                            99     ;
                           100     ;Registers Changed: Flags
                           101     ;
                           102     ;Stack Depth:           5 words (4 push/pops and 1 call)
                           103     ;
                           104     ;Known Bugs:            None :D
                           105     ;
                           106     ;Data Structures:       None.
                           107     ;
                           108     ;Error Handling:        If is less than CounterEmpty, the loop terminates as well;
                           109     ;
                           110     ;Algorithms:            1. Mask off least sig BYTE
                           111     ;                   2. Call StoreDaChar
                           112     ;                   3. Update pointer (DEC)
                           113     ;                   4. Shift Arg down 4 bits
                           114     ;                   5. Update counter (DEC)
                           115     ;                   5. LOOP until counter is empty
                           116     ;
                           117     ;Limitations:           Will always allocate 5 characters worth space in mem for 
                           118     ;                                       return value (e.g. 0xF -> 0x000F). 
                           119     ;
                           120     ;                   Cannot store any Hex greater than 4 chars.
                           121     ;
                           122     ;Author:                        Anjian Wu
                           123     ;History:                       Pseudo code: 10-21-2013
                           124     ;                   Intial working: 10/23/2013
                           125     ;                   Documentation Update: 10/24/2013
                           126     ;-------------------------------------------------------------------------------
                           127     
                           128     CGROUP  GROUP   CODE
                           129     
----                       130     CODE SEGMENT PUBLIC 'CODE'
                           131     
                           132             ASSUME  CS:CGROUP
                           133     
0000                       134     Hex2String              PROC    NEAR
                           135                                     PUBLIC  Hex2String
                           136     
0000 50                    137             PUSH    AX
0001 52                    138             PUSH    DX
0002 51                    139             PUSH    CX
0003 56                    140             PUSH    SI
                           141     
0004                       142     HexINIT:
                           143     
0004 B90400                144             MOV     CX, MaxHexStrSize   ; Counter should loop fixed Hex size of 4
0007 83C604                145             ADD     SI, MaxHexStrSize   ; Reverse insertion of chars means start at ASCII
                                   _NULL
                           146             
000A BA0000                147             MOV     DX, ASCII_NULL      ; Place ASCII NULL
000D 8814                  148             MOV     DS:[SI], DL         ; Store
000F 4E                    149             DEC     SI;                 ; Update pointer
                           150             
8086/87/88/186 MACRO ASSEMBLER    CONV                                                     03:02:46  11/10/;3  PAGE    4


LOC  OBJ                  LINE     SOURCE

0010 8BD0                  151             MOV     DX, AX              ; Save the arg
                           152     
                           153             
0012                       154     HexLoop: 
0012 83F900                155             CMP     CX, CounterEmpty    ;Is the while loop done when counter is empty.
0015 7E0F                  156             JLE     Hex2StringEND       ;Yes, thus exit loop
                           157             ;JG     HexLoopBody         ; NO continue to body
                           158             
0017                       159     HexLoopBody:        
0017 250F00                160                     AND     AX, Hex2StrMASK     ;Mask the last byte (4 bits)
                           161             
001A E86400                162             CALL    StoreDaChar         ;Store Char, Note BX is changed
001D 4E                    163             DEC     SI                  ;Update pointer
                           164             
001E C1EA04                165             SHR     DX, ByteSize        ;Shift off the last byte
0021 8BC2                  166             MOV     AX, DX              ;update the ARG
                           167             
0023 49                    168             DEC     CX                  ;Decrement the counter
                           169                     
0024 EBEC                  170             JMP     HexLoop             ;Loop
                           171     
0026                       172     Hex2StringEND:
                           173             
0026 5E                    174             POP    SI
0027 59                    175             POP    CX
0028 5A                    176             POP    DX
0029 58                    177             POP    AX
                           178             
002A C3                    179             RET
                           180     Hex2String ENDP
                           181     
                           182     
                           183     ;Procedure:                     Dec2String
                           184     ;
                           185     ;Description:           This procedure will convert a value b^^nb^^ into a decimal th
                                   at                 
                           186     ;                                       is at most 6 characters (with sign) and store
                                   s are string.
                           187     ;
                           188     ;                                       String will be <null> terminated. The string 
                                   is stored at 
                           189     ;                                       a memory location indicated by 'a'. AX - 'n',
                                    SI - 'a'.
                           190     ;                   The string is than store from SI to SI + 5
                           191     ;
                           192     ;                                       Assume we store first digit first, and <null>
                                    last.
                           193     ;
                           194     ;                   For positive integers, there will be NO sign designation.
                           195     ;
                           196     ;                   For neg integers, a "-" char is placed before the number.
                           197     ;
                           198     ;                   Actually calls external function StoreDaChar to store the char
                           199     ;                   see that function for more details.
                           200     ;
8086/87/88/186 MACRO ASSEMBLER    CONV                                                     03:02:46  11/10/;3  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           201     ;
                           202     ;Operation:                     This code will convert a bin number from AX (n) and s
                                   tore 
                           203     ;                                       the signed decimal value at 'a'.
                           204     ;
                           205     ;                   It does this by the following steps
                           206     ;                   1. Check sign and places sign if needed
                           207     ;                   2. Continually divide the ARG by a PWR10 (starting with 10000
                           208     ;                   and decrementing by a factor of 10) and grabbing the digit 
                           209     ;                   to be placed.
                           210     ;                   3. Call the StoreDaChar function to store the char
                           211     ;                   4. Repeat until the PWR10 counter is 0.
                           212     ;                   5. Add the ASCII_NULL
                           213     ;
                           214     ;Arguments:             n (AX) -> 16 - bit signed value
                           215     ;                                       a (DS:SI) -> location in memory (DS:SI)
                           216     ;
                           217     ;Return Values:         Error Flag
                           218     ;
                           219     ;Shared Variables:      None.
                           220     ;
                           221     ;Local Variables:       AX -> arg, char digit, used for storing DIV answer
                           222     ;                                       BX -> stores arg, when AX is used 
                           223     ;                                       CX -> PWR10 counter
                           224     ;                                       DX -> Stores Remainder from DIV
                           225     ;                   SI -> String pointer
                           226     ;
                           227     ;Global Variables:      None.
                           228     ;                                       
                           229     ;                                       
                           230     ;Input:                 None.
                           231     ;Output:                String in (DS:SI). Fixed size of 5 bytes.
                           232     ;
                           233     ;Registers Changed:     Flags
                           234     ;
                           235     ;Stack Depth:           6 (5 push pops and 1 CALL)
                           236     ;
                           237     ;Known Bugs:            None :D
                           238     ;
                           239     ;Data Structures:       None.
                           240     ;
                           241     ;Error Handling:        The program has an error flag that is raised if the Dec2BCD
                           242     ;                                       runs into error. If so, the stored value is u
                                   ndefined.
                           243     ;
                           244     ;Algorithms:        1. Continually divide the ARG by a PWR10 (starting with 10000
                           245     ;                   and decrementing by a factors of 10) and grabbing the digit 
                           246     ;                   to be placed.
                           247     ;                   2. Call the StoreDaChar function to store the char digit
                           248     ;                   3. Repeat until the PWR10 counter is 0.
                           249     ;
                           250     ;Limitations:           Only handles numbers less than 5 digits. Will always    
                                              
                           251     ;                                       allocate 5 characters worth space in mem for 
                                   return
8086/87/88/186 MACRO ASSEMBLER    CONV                                                     03:02:46  11/10/;3  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           252     ;                                       value (e.g. 1 -> +0001).
                           253     ;
                           254     ;Author:                        Anjian Wu
                           255     ;
                           256     ;History:                       Pseudo code: 10-21-2013
                           257     ;                   Intial working: 10/23/2013
                           258     ;                   Documentation Update: 10/24/2013
                           259     ;-------------------------------------------------------------------------------
                           260     
                           261     
002B                       262     Dec2String              PROC    NEAR
                           263                                     PUBLIC  Dec2String
                           264     
002B 50                    265             PUSH    AX                      ; Store Registers used
002C 52                    266             PUSH    DX
002D 51                    267             PUSH    CX
002E 56                    268             PUSH    SI
002F 52                    269             PUSH    DX
                           270             
0030                       271     DecSignCheck:
                           272     
0030 3D0000                273                     CMP     AX, 0                   ; Check to see if Num is neg
0033 7D0A                  274             JGE     DecIsPos                ; Num is not neg, thus no '-' needed
                           275             ;JL                             ; Num is neg, need 2's complement and '-' 
0035                       276     DecIsNeg:
0035 F7D8                  277             NEG     AX                      ;
0037 B32D                  278             MOV     BL, '-'                 ;
0039 881C                  279             MOV     DS:[SI], BL             ;Place the character in mem
003B 46                    280             INC     SI                      ;Update the char pointer
                           281            
003C EB0690                282             JMP     Bin2BCDInit             ;
003F                       283     DecIsPos:
003F B330                  284             MOV     BL, '0'                 ;
0041 881C                  285             MOV     DS:[SI], BL             ;
                           286     
0043 46                    287             INC     SI                      ;Update the char pointer
                           288                     ;JMP    Bin2BCDInit
                           289             
0044                       290     Bin2BCDInit:                            ;initialization
0044 8BD8                  291             MOV     BX, AX                  ;BX = arg. Save the arg
                           292     
0046 B91027                293             MOV     CX, 10000               ;start with 10^3 (10000's digit)
0049 F8                    294             CLC                             ;no error yet
                           295             ;JMP    Bin2BCDLoop             ;now start looping to get digits
                           296     
                           297     
004A                       298     Bin2BCDLoop:                            ;loop getting the digits in arg
                           299     
004A 722A                  300             JC      Dec2StringEND          ;if there is an error - we're done
004C 83F900                301             CMP     CX, 0                   ;check if pwr10 > 0
004F 7E25                  302             JLE     Dec2StringEND          ;if not, have done all digits, done
                           303             ;JMP    Bin2BCDLoopBody         ;else get the next digit
                           304     
0051                       305     Bin2BCDLoopBody:                        ;get a digit
0051 8BC3                  306             MOV     AX, BX
8086/87/88/186 MACRO ASSEMBLER    CONV                                                     03:02:46  11/10/;3  PAGE    7


LOC  OBJ                  LINE     SOURCE

0053 BA0000                307             MOV     DX, 0                   ;setup for arg/pwr10 remainder
                           308     
0056 F7F1                  309             DIV     CX                      ;digit (AX) = arg/pwr10
0058 3D0A00                310             CMP     AX, 10                  ;check if digit < 10
005B 7316                  311             JAE     TooBigError             ;if not, it's an error
                           312             ;JB     HaveDigit               ;otherwise process the digit
                           313     
005D                       314     HaveDigit:                              ;put the digit into the result
                           315           
005D E82100                316             CALL    StoreDaChar             ;Store Char, BX is changed, but that's OK
0060 46                    317             INC     SI                      ;Update the char pointer
                           318             
0061                       319     DecUpdatePWR10:
                           320     
0061 8BDA                  321             MOV     BX, DX                  ;now work with arg = arg MODULO pwr10
0063 8BC1                  322             MOV     AX, CX                  ;setup to update pwr10
0065 B90A00                323             MOV     CX, 10                  ;   (clears CH too)
0068 BA0000                324             MOV     DX, 0                   ;setup for arg/pwr10 remainder   
006B F7F1                  325             DIV     CX                      ;   (note: pwr10/10 <= 100 so no overflow)
006D 8BC8                  326             MOV     CX, AX                  ;pwr10 = pwr10/10 (note: CH = 0)
006F F8                    327             CLC                             ;no error
0070 EB0290                328             JMP     EndBin2BCDLoopBody      ;done getting this digit
                           329     
0073                       330     TooBigError:                            ;the value was too big
0073 F9                    331             STC                             ;set the error flag
                           332             ;JMP    EndBin2BCDLoopBody      ;and done with this loop iteration
                           333     
0074                       334     EndBin2BCDLoopBody:
0074 EBD4                  335             JMP     Bin2BCDLoop             ;keep looping (end check is at top)
                           336     
0076                       337     Dec2StringEND:
0076 B80000                338             MOV     AX, ASCII_NULL          ;
0079 8804                  339             MOV     DS:[SI], AL             ;Place the character in mem
                           340            
007B 5A                    341             POP    DX                       ; Restore registers used
007C 5E                    342             POP    SI
007D 59                    343             POP    CX
007E 5A                    344             POP    DX
007F 58                    345             POP    AX
                           346             
0080 C3                    347             RET
                           348            
                           349     Dec2String      ENDP    
                           350     
                           351     
                           352     ;Procedure:                     StoreDaChar
                           353     ;
                           354     ;Description:       This function takes AL and SI as the args. AL maps to its corresp
                                   onding
                           355     ;                   ASCII char. It will then take this char and store it at DS:SI
                           356     ;
                           357     ;Operation:         The passed integer is looked up in a table containing the
                           358     ;                   ASCII char of every HEX char (from '0' to 'F').
                           359     ;
                           360     ; Arguments:         AL -> unsigned value for which to compute the square root.
8086/87/88/186 MACRO ASSEMBLER    CONV                                                     03:02:46  11/10/;3  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           361     ;
                           362     ; Return Value:      AL -> becomes last placed Char
                           363     ;
                           364     ;
                           365     ;Shared Variables:      None.
                           366     ;
                           367     ;Local Variables:       AL -> INT sign flag
                           368     ;                                       BX -> INT current power of 10
                           369     ;
                           370     ;Global Variables:      None.
                           371     ;                                       
                           372     ;                                       
                           373     ;Input:                 None.
                           374     ;
                           375     ;Output:                A CHAR at (DS:SI)
                           376     ;
                           377     ;Registers Changed: flags, AL becomes last placed Char.
                           378     ;
                           379     ;Stack Depth:           1 WORD
                           380     ;
                           381     ;Known Bugs:            None :D
                           382     ;
                           383     ;Data Structures:       None.
                           384     ;
                           385     ;Error Handling:        The program has an error flag that is raised if the Dec2BCD
                           386     ;                                       runs into error. If so, the stored value is u
                                   ndefined.
                           387     ;
                           388     ;Algorithms:            Table lookup.
                           389     ;
                           390     ;Limitations:           None.
                           391     
                           392     ;Author:                        Anjian Wu
                           393     ;History:                       Pseudo code: 10-21-2013
                           394     ;                   Intial working: 10/23/2013
                           395     ;                   Documentation Update: 10/24/2013
                           396     ;-------------------------------------------------------------------------------
                           397     
0081                       398     StoreDaChar             PROC    NEAR
                           399                                     PUBLIC  StoreDaChar
                           400     
0081 53                    401             PUSH    BX
                           402     
                           403                     
0082 BB8C0090       R      404             MOV         BX, OFFSET(ASCIICharTable);point into the table of square roots
0086 2ED7                  405             XLAT    CS:ASCIICharTable               ;get the square root   
                           406             
0088 8804                  407             MOV     DS:[SI], AL             ;Place the character in mem
                           408     
008A 5B                    409             POP     BX
008B C3                    410             RET
                           411             
                           412     StoreDaChar         ENDP
                           413     
                           414     ; ASCIICharTable
8086/87/88/186 MACRO ASSEMBLER    CONV                                                     03:02:46  11/10/;3  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           415     ;
                           416     ; Description:      This table contains the ASCII char of Hex 0 - F in code segment
                           417     ;
                           418     ; Author:           Anjian Wu
                           419     ; Last Modified:    10-23-2013
                           420     
                           421     
008C                       422     ASCIICharTable  LABEL   BYTE
                           423     
008C 30                    424             DB       '0'
008D 31                    425         DB   '1'
008E 32                    426         DB   '2'
008F 33                    427         DB   '3'
0090 34                    428         DB   '4'
0091 35                    429         DB   '5'
0092 36                    430         DB   '6'
0093 37                    431         DB   '7'
0094 38                    432         DB   '8'
0095 39                    433         DB   '9'
0096 41                    434         DB   'A'
0097 42                    435         DB   'B'
0098 43                    436         DB   'C'
0099 44                    437         DB   'D'
009A 45                    438         DB   'E'
009B 46                    439         DB   'F'
                           440         
----                       441     CODE ENDS
                           442     
                           443             END

ASSEMBLY COMPLETE, NO ERRORS FOUND
