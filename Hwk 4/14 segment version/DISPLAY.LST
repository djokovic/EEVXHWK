8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  03:02:47  11/10/;3  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE DISPLAY
OBJECT MODULE PLACED IN DISPLAY.OBJ
ASSEMBLER INVOKED BY:  C:\UTIL\ASM86.EXE DISPLAY.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1     NAME        Display
                             2     
                             3 +1  $INCLUDE(display.inc);
                      =1     4     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1     5     ;                                                                               ;
                      =1     6     ;                                  Display.INC                                  ;
                      =1     7     ;                               Display Constants                           ;
                      =1     8     ;                                 Include File                              ;
                      =1     9     ;                                                                           ;
                      =1    10     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    11     
                      =1    12     ; This file contains the definitions for the display functions
                      =1    13     ;
                      =1    14     ; Revision History:
                      =1    15     ;    11/02/2013                 Created - Anjian Wu
                      =1    16     
                      =1    17     
                      =1    18     
                      =1    19     ; General Definitions
                      =1    20     
  0000                =1    21     ArrayEmpty      EQU     0               ; Empty is set at 0 index
  0008                =1    22     Display_SIZE    EQU     8               ; Size of chars that can fit in display
  0000                =1    23     SEGMENT_NULL    EQU     0               ; Byte value for ASCII_NULL in segment
  0001                =1    24     SegPTRAdjust    EQU     1               ; Since we want WORD, we need to adjust 
                      =1    25     
                      =1    26     ; Display Addresses
                      =1    27     
  0000                =1    28     LEDDisplay      EQU     0               ; Display is hardware mapped to 0 - 7H
  0008                =1    29     LEDDisplay2     EQU     8               ; 14- seg also hardware mapped to 8h - 0DH
                      =1    30     
                      =1    31     
----                  =1    32     DISPLAYSTRUC     STRUC                      ;structure containing all queue info
0000                  =1    33         buffer              DB          Display_SIZE        DUP     (?) ;pointer to the f
                                   unction to get switch 
                      =1    34                                             ;status
----                  =1    35     DISPLAYSTRUC      ENDS
                      =1    36     
                      =1    37     
                      =1    38     
                            39 +1  $INCLUDE(general.inc);
                      =1    40     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    41     ;                                                                               ;
                      =1    42     ;                                  General.INC                                  ;
                      =1    43     ;                               General Constants                           ;
                      =1    44     ;                                 Include File                              ;
                      =1    45     ;                                                                           ;
                      =1    46     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    47     
                      =1    48     ; This file contains general operations
                      =1    49     ;
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  03:02:47  11/10/;3  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    50     ; Revision History:
                      =1    51     ;    11/02/2013                 Created - Anjian Wu
                      =1    52     
                      =1    53     
                      =1    54     ; String Constants
                      =1    55     
  0000                =1    56     ASCII_NULL      EQU     0           ;
                      =1    57     
                      =1    58     ; General Definitions for Main Loops
                      =1    59     
  0001                =1    60     FIRST_RESERVED_VEC      EQU     1           ;reserve vectors 1-3
  0003                =1    61     LAST_RESERVED_VEC       EQU     3       ;
  0100                =1    62     NUM_IRQ_VECTORS     EQU 256     ;number of interrupt vectors
                      =1    63     
                            64 +1  $INCLUDE(timer.inc);
                      =1    65     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    66     ;                                                                               ;
                      =1    67     ;                                  Timer.INC                                    ;
                      =1    68     ;                              Timer Constants                              ;
                      =1    69     ;                                 Include File                              ;
                      =1    70     ;                                                                           ;
                      =1    71     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    72     
                      =1    73     ; This file contains the definitions for timers and their interupts
                      =1    74     ;
                      =1    75     ; Revision History:
                      =1    76     ;    11/02/2013                 Created - Anjian Wu
                      =1    77     
                      =1    78     
                      =1    79     
                      =1    80                                             ; Timer Definitions
                      =1    81     
                      =1    82     ; Addresses
  FF56                =1    83     Tmr0Ctrl        EQU     0FF56H          ;address of Timer 0 Control Register
  FF52                =1    84     Tmr0MaxCntA     EQU     0FF52H          ;address of Timer 0 Max Count A Register
  FF50                =1    85     Tmr0Count       EQU     0FF50H          ;address of Timer 0 Count Register
  FF66                =1    86     Tmr2Ctrl        EQU     0FF66H          ;address of Timer 2 Control Register
  FF62                =1    87     Tmr2MaxCnt      EQU     0FF62H          ;address of Timer 2 Max Count A Register
  FF60                =1    88     Tmr2Count       EQU     0FF60H          ;address of Timer 2 Count Register
                      =1    89     
                      =1    90     ; Control Register Values
  E001                =1    91     Tmr0CtrlVal     EQU     0E001H          ;value to write to Timer 0 Control Register
                      =1    92                                             ;1---------------  enable timer
                      =1    93                                             ;-1--------------  write to control
                      =1    94                                             ;--1-------------  enable interrupts
                      =1    95                                             ;----000000------  reserved
                      =1    96                                             ;---0------0-----  read only
                      =1    97                                             ;-----------0----  TMRIN0 is an enable
                      =1    98                                             ;------------00--  count timer 2 outs
                      =1    99                                             ;--------------0-  single counter mode
                      =1   100                                             ;---------------1  continuous mode
                      =1   101     
                      =1   102     
                      =1   103     ; Control Register Values
                      =1   104                                           
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  03:02:47  11/10/;3  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   105                                             ; Control Register Values
  1388                =1   106     CTS_PER_MILSEC  EQU     5000            ; 20MHZ/(4 * 1KHz) = 5000 counts per MS
  0008                =1   107     TimerEOI        EQU     00008H          ;Timer EOI command (same for all timers)
  8000                =1   108     NonSpecEOI      EQU     08000H          ;Non-specific EOI command
                      =1   109     
                      =1   110     
                      =1   111     ; Interrupt Vectors adn their control values
  0008                =1   112     Tmr0Vec         EQU     8               ;interrupt vector for Timer 0
  FF32                =1   113     INTCtrlrCtrl    EQU     0FF32H          ;address of interrupt controller for timer
  FF22                =1   114     INTCtrlrEOI     EQU     0FF22H          ;address of interrupt controller EOI register
                      =1   115     
  0001                =1   116     INTCtrlrCVal    EQU     00001H          ;set priority for timers to 1 and enable
                      =1   117                                             ;000000000000----  reserved
                      =1   118                                             ;------------0---  enable timer interrupt
                      =1   119                                             ;-------------001  timer priority
                           120     
                           121     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           122     ;                                                                            ;
                           123     ;                                 HW4 Display Functions                      ;
                           124     ;                                 EE51                                           ;
                           125     ;                                 Anjian Wu                                  ;
                           126     ;                                                                            ;
                           127     ;                                 TA: Pipe-Mazo                              ;
                           128     ;                                                                            ;
                           129     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           130     ;                                 What's in here?
                           131     ;
                           132     ;                                   Code Segment
                           133     ;
                           134     ;   Display   -     This is pass a string to be displayed. The string is at
                           135     ;                   ES:SI and is null terminated. 
                           136     ;
                           137     ;   DisplayNum  -   This function is passed a 16-bit signed value to be outputted
                           138     ;                   to the display. The number is in AX, with at most 5 digits
                           139     ;
                           140     ;   DisplayHex   -  This function is passed a 16-bit HEX value to be outputted
                           141     ;                   to the display. The number is in AX with at most 4 digits; 
                           142     ;
                           143     ;   DisplayHandlerInit - This installs the DisplayHandler into vector table
                           144     ;
                           145     ;   DisplayHandler - This is the interrupt function that multiplexes the display
                           146     ;                    by grabbing the next char value to be outputted.
                           147     ;
                           148     ;   DisplayBufferFill - This function clears the display array with all ASCII_NULL
                           149     ;
                           150     ;                                   Data Segment
                           151     ;
                           152     ;   DisplayArray(DISPLAYSTRUC)  - Where DisplayArray's buffer is. This is only for
                           153     ;                                 storing ASCII, which is then translated into seg.
                           154     ;                                 (Easier to debug DisplayHex and DisplayNum)
                           155     ;
                           156     ;   DHandlerVarLow(DISPLAYSTRUC)  - Where DisplayHandler's high byte buffer is stored
                                   ;
                           157     ;
                           158     ;   DHandlerVarHigh(DISPLAYSTRUC)  - Where DisplayHandler's low byte buffer is stored
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  03:02:47  11/10/;3  PAGE    4


LOC  OBJ                  LINE     SOURCE

                                   ;
                           159     ;
                           160     ;   digit (DW)                  - The shared Handler pointer to next digit
                           161     ;
                           162     ;                                 What's was last edit?
                           163     ;
                           164     ;                               Pseudo code             - 11-02-2013 - Anjian Wu
                           165     ;                               Initial Version         - 11-08-2013 - Anjian Wu
                           166     ;                               Working 7 seg version   - 11-08-2013 - Anjian Wu
                           167     ;                               Working 14 seg version  - 11-09-2013 - Anjian Wu
                           168     
                           169     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           170     
                           171     ;Procedure:                     Display
                           172     ;
                           173     ;Description:           This procedure will take the address of the string at ES:SI, 
                                   and
                           174     ;                   place that string into the Dhandler buffers. This display buffers
                           175     ;                   is shared with DisplayHandler.
                           176     ;
                           177     ;                   DHandlerVarHigh.buffer  - Stores upper byte of 14-seg code
                           178     ;                   DHandlerVarLow.buffer   - Stores lower byte of 14-seg code 
                           179     ;                   (Both buffer elements share same index)
                           180     ;
                           181     ;                   This function does this by first clearing BOTH buffers using the
                           182     ;                   DisplayBufferFill to fill up buffers with SEGMENT_NULL. This help
                                   s
                           183     ;                   avoid displaying left over chars from previous strings.
                           184     ;
                           185     ;                   The function will then loop grabbing the ASCII_CHAR from ES:SI, a
                                   nd
                           186     ;                   mapping the character to it's 14-segment code. The code is then s
                                   tored
                           187     ;                   into both the high and low buffer.
                           188     ;
                           189     ;                   If the loop hits a ASCII_NULL before the full Display_SIZE is rea
                                   ched,
                           190     ;                   the loop will terminate early. This is ok since we already cleare
                                   d the
                           191     ;                   buffers beforehand.
                           192     ;                   
                           193     ;                   
                           194     ;Operation:                     *   Call DisplayBufferFill(low byte buffer)
                           195     ;                   *   Call DisplayBufferFill(high byte buffer)
                           196     ;                   *   Clear Counter
                           197     ;                   *   Loop grabbing each char at ES:SI until counter hits Display_s
                                   ize
                           198     ;                       or ASCII_NULL was hit.
                           199     ;                       * Check counter
                           200     ;                       * Grab next char, is this ASCII_NULL? Yes -> terminate, no->k
                                   eep going
                           201     ;                       * Grab segtable offset, double char index to get absolute WOR
                                   D ptr
                           202     ;                       * Grab the WORD and split storing high and low byte into buff
                                   ers
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  03:02:47  11/10/;3  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           203     ;                       * update counter and char (source) byte ptr.
                           204     ;
                           205     ;                   *   DONE
                           206     ;
                           207     ;Arguments:             SI   -> starting point of string ptr
                           208     ;                   ES   -> Can be either Data segment or Code segment
                           209     ;
                           210     ;Return Values:         None.
                           211     ;
                           212     ;Result:            New ASCII chars in the Dhander buffers.
                           213     ;
                           214     ;Shared Variables:      The buffer arrays is shared with DisplayHandler and DisplayBu
                                   ffFill
                           215     ;
                           216     ;Local Variables:       AX - Used as arg, store char, 
                           217     ;                   SI - Used to store ptr arg
                           218     ;                   BX - Used as ptr to access code segment
                           219     ;                   CX - Used as counter
                           220     ;                   
                           221     ;
                           222     ;Global Variables:      None.
                           223     ;                                       
                           224     ;                                       
                           225     ;Input:                 None.
                           226     ;
                           227     ;Output:                None.
                           228     ;
                           229     ;Registers Used:        AX, SI, BX, CX
                           230     ;
                           231     ;Stack Depth:           4 words
                           232     ;
                           233     ;Known Bugs:            None.
                           234     ;
                           235     ;Data Structures:       DHandlerVarLow, DHandlerVarHigh (8 byte arrays)
                           236     ;
                           237     ;Error Handling:        None.  
                           238     ;
                           239     ;Algorithms:            None.
                           240     ;
                           241     ;Limitations:           Stores new chars in the same array while DisplayHandler inter
                                   rupt 
                           242     ;                   is running which also grabbing the chars out of same array.
                           243     ;                   However it should not really affect user experience since
                           244     ;                   interrupts will be very fast.
                           245     ;
                           246     ;
                           247     ;Author:                        Anjian Wu
                           248     ;History:                       11-04-2013: Pseudo code - Anjian Wu
                           249     ;                               Working 7 seg version   - 11-08-2013 - Anjian Wu
                           250     ;                               Working 14 seg version  - 11-09-2013 - Anjian Wu
                           251     ;-------------------------------------------------------------------------------
                           252     ;                               Working 7 seg version   - 11-08-2013 - Anjian Wu
                           253     ;                               Working 14 seg version  - 11-09-2013 - Anjian Wu
                           254     ;-------------------------------------------------------------------------------
                           255     CGROUP  GROUP   CODE
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  03:02:47  11/10/;3  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           256     
----                       257     CODE SEGMENT PUBLIC 'CODE'
                           258     
                           259             ASSUME  CS:CGROUP, DS:DATA
                           260     
                           261     ;-------------------------------------------------------------------------------
                           262     
                           263             EXTRN   Dec2String:NEAR          ; Used to convert passed AX into dec ASCII
                           264             EXTRN   Hex2String:NEAR          ; Used to convert passed AX into hex ASCII
                           265             EXTRN   ASCIISegTable:NEAR   ;
                           266     
0000                       267     Display             PROC    NEAR
                           268                                     PUBLIC  Display
                           269                                     
                           270             
0000 51                    271             PUSH    CX;                     ; Store all Used Regs
0001 50                    272             PUSH    AX;
0002 53                    273             PUSH    BX;
                           274     
0003                       275     DisplayStrInit:
                           276     
0003 56                    277         PUSH    SI;                                         ; Save the original string po
                                   inter arg
0004                       278     DisplayClearLowbyte:
                           279     
0004 8D360800       R      280         LEA     SI, DHandlerVarLow.buffer   ; Grab address of lower byte seg buff
0008 B000                  281         MOV     AL, SEGMENT_NULL            ; Want to fill with SEGMENT_NULLs
000A E8BD00                282         CALL    DisplayBufferFill           ; Fill display array with SEGMENT_NULLs
                           283     
                           284     
000D                       285     DisplayClearHighbyte:   
                           286     
000D 8D361000       R      287         LEA     SI, DHandlerVarHigh.buffer  ; Grab address of high byte seg buff
0011 B000                  288         MOV     AL, SEGMENT_NULL            ; Want to fill with SEGMENT_NULLs
0013 E8B400                289         CALL    DisplayBufferFill           ; Fill display array with SEGMENT_NULLs
                           290             
0016                       291     DisplayBufferClearDone:  
                           292       
0016 5E                    293             POP     SI                              ; Get that original string pointer ba
                                   ck from stack
0017 B90000                294         MOV     CX, 0           ; Clear the counter
                           295                                
                           296     
001A                       297     DisplayStrLoop: ; Counter goes from 0 to DisplaySize - 1 or ends early if ASCII_NULL 
                                   found
                           298     
001A 83F908                299         CMP     CX, Display_SIZE    ; Is the counter maxed out?
001D 7D21                  300         JGE     DisplayStrDone      ; Yes, exit loop
                           301                                     ; No, continue loop
001F 33C0                  302             XOR             AX, AX                      ; Clear AX
                           303             
0021 268A04                304         MOV     AL, ES:[SI]         ; Grab char at address arg, put in AL
0024 3C00                  305         CMP     AL, ASCII_NULL      ; Is it ASCII_NULL? Cuz if so, end loop
0026 7418                  306         JE      DisplayStrDone      ; Yes, end loop
                           307         ;JNE    DisplayLoopSegtable ; No, continue
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  03:02:47  11/10/;3  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           308         
0028                       309     DisplayLoopSegtable:
0028 BB0000         E      310         MOV     BX, OFFSET(ASCIISegTable);point into the table of seg table
002B D1E0                  311             SHL             AX, SegPTRAdjust            ;Get absolute value from table by
                                    mul 2^(SegPTRAdjust)
002D 03D8                  312             ADD             BX, AX                          ; Get absolute appropriate se
                                   g table addr
                           313         
002F 2E8B07                314         MOV         AX,     CS:[BX]                 ;Now seg val is in AX
                           315      
0032 8BD9                  316         MOV     BX, CX                  ; Move counter (which also acts as index) to
                           317                                         ; BX as data seg ptr.
                           318                                          
                           319                                          
0034 88870800       R      320         MOV     DHandlerVarLow.buffer[BX]   , AL   ; Split AX into low and high byte
0038 88A71000       R      321         MOV     DHandlerVarHigh.buffer[BX]  , AH  
                           322             
003C 41                    323         INC     CX                          ; Update Counter
003D 46                    324         INC     SI                          ; Update char pointer (Str source)
                           325         
003E EBDA                  326         JMP     DisplayStrLoop  ; 
                           327         
0040                       328     DisplayStrDone:
                           329     
0040 5B                    330             POP    BX;
0041 58                    331             POP    AX;
0042 59                    332             POP    CX               ;    Restore all used regs          
                           333             
0043 C3                    334         RET                     
                           335         
                           336     Display  ENDP 
                           337     
                           338     
                           339     
                           340     ;Procedure:                     DisplayNum
                           341     ;
                           342     ;
                           343     ;Description:           This procedure will take the value at AX, and convert that de
                                   cimal
                           344     ;                   value into a string placed inside DisplayArray (a buffer) and the
                                   n
                           345     ;                   finally call Display to convert the stored string of ASCII's.
                           346     ;
                           347     ;                   This buffer is not directly accessed by DisplayHandler, but is
                           348     ;                   used to convert to seg pattern code if passed to Display.
                           349     ;
                           350     ;                   First it will clear the display buffer with ASCII_NULLs with Disp
                                   layBufferFill,
                           351     ;                   call Dec2String, which already places the a passed value into 
                           352     ;                   the passed address accordingly into the display array. 
                           353     ;                   
                           354     ;                   The purpose of the separate Displayarray buffer is to help debugg
                                   ing
                           355     ;                   reasons, such that the user doesn't have to decode the segment bu
                                   ff.
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  03:02:47  11/10/;3  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           356     ;
                           357     ;                   
                           358     ;                   
                           359     ;Operation:                     *   Load address of DisplayArray buffer 
                           360     ;                   *   Call DisplayBufferFill with ASCII-NULLs
                           361     ;                   *   Pass address and value to Dec2String
                           362     ;                   *   Prepare to pass ES:SI, by making ES = DS
                           363     ;                   *   Call Display
                           364     ;
                           365     ;Arguments:             AX - Num to be displayed
                           366     ;
                           367     ;
                           368     ;Return Values:         None.
                           369     ;
                           370     ;Result:            New ASCII chars in the display array and in DHandler buffers
                           371     ;
                           372     ;Shared Variables:      DisplayArray buffer is  shared with Dec2String and Display
                           373     ;
                           374     ;Local Variables:       AX - Used as arg, store char, 
                           375     ;                   SI - Used to store ptr arg
                           376     ;                   ES - Used as ptr to pass data segmentp
                           377     ;                   DisplayArray.buffer - stores new ASCII string to be passed to Dis
                                   play
                           378     ;
                           379     ;Global Variables:      None.
                           380     ;                                       
                           381     ;                                       
                           382     ;Input:                 None.
                           383     ;
                           384     ;Output:                None.
                           385     ;
                           386     ;Registers Used:        AX, ES, SI, DS
                           387     ;
                           388     ;Stack Depth:           4 Words;
                           389     ;
                           390     ;Known Bugs:            None.
                           391     ;
                           392     ;Data Structures:       DisplayArray.buffer (8 byte buffer)
                           393     ;
                           394     ;Error Handling:        If passed decimal length is too large, then DisplayArray is n
                                   ot
                           395     ;                   places and errorflag is raised. NOTE THIS FEATURE IS INSIDE
                           396     ;                   DEC2STRING, thus the flags raised should also be passed back.
                           397     ;                   
                           398     ;
                           399     ;Algorithms:            None.
                           400     ;
                           401     ;Limitations:           Stores new chars (after calling Display) in the same array 
                           402     ;                   while DisplayHandler interrupt 
                           403     ;                   is running which also grabbing the chars out of same array.
                           404     ;                   However it should not really affect user experience since
                           405     ;                   interrupts will be very fast.
                           406     ;
                           407     ;
                           408     ;Author:                        Anjian Wu
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  03:02:47  11/10/;3  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           409     ;History:                       11-04-2013: Pseudo code - Anjian Wu
                           410     ;                               Working 7 seg version   - 11-08-2013 - Anjian Wu
                           411     ;                               Working 14 seg version  - 11-09-2013 - Anjian Wu
                           412     ;-------------------------------------------------------------------------------
                           413     
                           414     
0044                       415     DisplayNum              PROC    NEAR
                           416                                     PUBLIC  DisplayNum
                           417                     
                           418                     
0044 50                    419             PUSH    AX;                     Save all Used regs
0045 56                    420         PUSH    SI
0046 06                    421         PUSH    ES
                           422         
0047                       423     DisplayNumStrInit:
0047 50                    424         PUSH    AX                      ; DisplayBufferFill also uses AX as arg, so save 
                                   that
                           425         
0048 8D360000       R      426         LEA     SI, DisplayArray.buffer ; Grab address of display array buffer
004C B000                  427         MOV     AL, ASCII_NULL          ; Fill with ASCII_NULL
004E E87900                428         CALL    DisplayBufferFill       ; 
                           429         
0051 58                    430         POP     AX                      ; Restore the arg  
0052                       431     DisplayNumPlace:
                           432     
0052 E80000         E      433         CALL    Dec2String              ; Dec2String chars at DS:SI
                           434         
0055 8CD8                  435         MOV     AX, DS
0057 8EC0                  436         MOV     ES, AX                  ; Prepare to access DS for display
                           437             
0059 E8A4FF                438         CALL    Display                 ; Translate ES:SI aka. DS:SI into Seg code
                           439         
005C                       440     DisplayNumDONE:
                           441     
005C 07                    442             POP    ES
005D 5E                    443         POP    SI
005E 58                    444         POP    AX;                      Restore all used Regs
                           445     
005F C3                    446         RET                             
                           447         
                           448     DisplayNum  ENDP      
                           449     
                           450     ;Procedure:                     DisplayHex
                           451     ;
                           452     ;
                           453     ;Description:           This procedure will take the value at AX, and convert that he
                                   x
                           454     ;                   value into a string placed inside DisplayArray (a buffer) and the
                                   n
                           455     ;                   finally call Display to convert the stored string of ASCII's.
                           456     ;
                           457     ;                   This buffer is not directly accessed by DisplayHandler, but is
                           458     ;                   used to convert to seg pattern code if passed to Display.
                           459     ;
                           460     ;                   First it will clear the display buffer with ASCII_NULLs with Disp
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  03:02:47  11/10/;3  PAGE   10


LOC  OBJ                  LINE     SOURCE

                                   layBufferFill,
                           461     ;                   call Hex2String, which already places the a passed value into 
                           462     ;                   the passed address accordingly into the display array. 
                           463     ;                   
                           464     ;                   The purpose of the separate Displayarray buffer is for debugging
                           465     ;                   reasons, such that the user doesn't have to decode the segment bu
                                   ff.
                           466     ;
                           467     ;                   
                           468     ;                   
                           469     ;Operation:                     *   Load address of DisplayArray buffer 
                           470     ;                   *   Call DisplayBufferFill with ASCII-NULLs
                           471     ;                   *   Pass address and value to Hex2String
                           472     ;                   *   Prepare to pass ES:SI, by making ES = DS
                           473     ;                   *   Call Display
                           474     ;
                           475     ;Arguments:             AX - Hex to be displayed
                           476     ;
                           477     ;
                           478     ;Return Values:         None.
                           479     ;
                           480     ;Result:            New ASCII chars in the display array and in DHandler buffers
                           481     ;
                           482     ;Shared Variables:      DisplayArray buffer is  shared with Dec2String and Display
                           483     ;
                           484     ;Local Variables:       AX - Used as arg, store char, 
                           485     ;                   SI - Used to store ptr arg
                           486     ;                   ES - Used as ptr to pass data segmentp
                           487     ;                   DisplayArray.buffer - stores new ASCII string to be passed to Dis
                                   play
                           488     ;
                           489     ;Global Variables:      None.
                           490     ;                                       
                           491     ;                                       
                           492     ;Input:                 None.
                           493     ;
                           494     ;Output:                None.
                           495     ;
                           496     ;Registers Used:        AX, ES, SI, DS
                           497     ;
                           498     ;Stack Depth:           4 Words;
                           499     ;
                           500     ;Known Bugs:            None.
                           501     ;
                           502     ;Data Structures:       DisplayArray.buffer (8 byte buffer)
                           503     ;
                           504     ;Error Handling:        If passed decimal length is too large, then DisplayArray is n
                                   ot
                           505     ;                   places and errorflag is raised. NOTE THIS FEATURE IS INSIDE
                           506     ;                   DEC2STRING, thus the flags raised should also be passed back.
                           507     ;                   
                           508     ;
                           509     ;Algorithms:            None.
                           510     ;
                           511     ;Limitations:           Stores new chars (after calling Display) in the same array 
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  03:02:47  11/10/;3  PAGE   11


LOC  OBJ                  LINE     SOURCE

                           512     ;                   while DisplayHandler interrupt 
                           513     ;                   is running which also grabbing the chars out of same array.
                           514     ;                   However it should not really affect user experience since
                           515     ;                   interrupts will be very fast.
                           516     ;
                           517     ;
                           518     ;Author:                        Anjian Wu
                           519     ;History:                       11-04-2013: Pseudo code - Anjian Wu
                           520     ;                               Working 7 seg version   - 11-08-2013 - Anjian Wu
                           521     ;                               Working 14 seg version  - 11-09-2013 - Anjian Wu
                           522     ;-------------------------------------------------------------------------------
                           523     
                           524     
0060                       525     DisplayHex              PROC    NEAR
                           526                                     PUBLIC  DisplayHex
                           527                                     
0060 50                    528             PUSH    AX;                     Save all Used regs
0061 56                    529         PUSH    SI
0062 06                    530         PUSH    ES
                           531         
0063                       532     DisplayHexInit:
                           533     
0063 50                    534         PUSH    AX                       ; DisplayBufferFill also uses AX as arg, so save
                                    that
                           535         
0064 8D360000       R      536         LEA     SI, DisplayArray.buffer  ; Grab address of display array
0068 B000                  537         MOV     AL, ASCII_NULL           ;
006A E85D00                538         CALL    DisplayBufferFill        ; Fill display array with ASCII_NULLs
                           539         
006D 58                    540         POP     AX                       ;  Restore the ARG
                           541         
006E                       542     DisplayHexPlace:
                           543     
006E E80000         E      544         CALL    Hex2String              ; Hex2String chars at DS:SI, with AX
                           545         
0071 8CD8                  546         MOV     AX, DS
0073 8EC0                  547         MOV     ES, AX                  ; Prepare to access DS for display
                           548             
0075 E888FF                549         CALL    Display                 ; Translate ES:SI aka. DS:SI
0078                       550     DisplayhexDONE:
                           551     
0078 07                    552             POP    ES
0079 5E                    553         POP    SI
007A 58                    554         POP    AX;                      Restore all used Regs
                           555     
007B C3                    556         RET       
                           557              
                           558     DisplayHex  ENDP   
                           559     
                           560     ; DisplayHandlerInit
                           561     ;
                           562     ; Description:       Does all initializations for DispalyHandler.
                           563     ;
                           564     ;                    Installs the displayhandler for the timer0 interrupt at 
                           565     ;                    interrupt table index Tmr0Vec. ALso clears the digit
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  03:02:47  11/10/;3  PAGE   12


LOC  OBJ                  LINE     SOURCE

                           566     ;                    used to index the segment digit to be displayed in
                           567     ;                    in DisplayHandler.
                           568     ;
                           569     ; Operation:         First clear the Digit to 0.
                           570     ;                    THen writes the address of the displayhandler to the
                           571     ;                    timer0 location in the interrupt vector table. Notice
                           572     ;                    need to multiple by 4 since table stores a CS and IP.
                           573     ;                     
                           574     ;
                           575     ; Arguments:         None.
                           576     ; Return Value:      None.
                           577     ;
                           578     ; Local Variables:   AX - Used to temporarily store vector table offset for ES
                           579     ; 
                           580     ; Shared Variables:  Digit (WORD) - Stores segment ptr for DisplayHandler
                           581     ;
                           582     ; Global Variables:  None.
                           583     ;
                           584     ; Input:             None.
                           585     ; Output:            None.
                           586     ;
                           587     ; Error Handling:    None.
                           588     ;
                           589     ; Algorithms:        None.
                           590     ; Data Structures:   None.
                           591     ;
                           592     ; Registers Used:    AX, ES
                           593     ;
                           594     ; Stack Depth:       0 words
                           595     ;
                           596     ;Author:                        Anjian Wu
                           597     ;History:                       11-04-2013: Pseudo code - Anjian Wu
                           598     ;                               Working 7 seg version   - 11-08-2013 - Anjian Wu
                           599     ;                               Working 14 seg version  - 11-09-2013 - Anjian Wu
                           600     ;-------------------------------------------------------------------------------
                           601     
007C                       602     DisplayHandlerInit  PROC    NEAR
                           603                         PUBLIC  DisplayHandlerInit
                           604     
                           605     
007C C70618000000   R      606             MOV     Digit, 0    ; Clear the Digit counters
                           607     
                           608     
0082 33C0                  609             XOR     AX, AX          ;clear ES (interrupt vectors are in segment 0)
0084 8EC0                  610             MOV     ES, AX
                           611                                     ;store the vector
0086 26C70620009500 R      612             MOV     ES: WORD PTR (4 * Tmr0Vec), OFFSET(DisplayHandler)
008D 26C7062200---- R      613             MOV     ES: WORD PTR (4 * Tmr0Vec + 2), SEG(DisplayHandler)
                           614     
                           615     
0094 C3                    616             RET                     ;all done, return
                           617     
                           618     
                           619     DisplayHandlerInit  ENDP
                           620                                     
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  03:02:47  11/10/;3  PAGE   13


LOC  OBJ                  LINE     SOURCE

                           621       
                           622     
                           623     
                           624     ;Procedure:                     DisplayHandler
                           625     ;
                           626     ;
                           627     ;Description:           Does all necessary functions to display to 14-segment.
                           628     ;                   This procedure will grab the next counter index. It will then use
                           629     ;                   this to index for the next char to be output to the display. 
                           630     ;
                           631     ;                   If the counter is beyond the number of characters available to th
                                   e display
                           632     ;                   the counter will reset back to 0. Thus the display is effectively
                           633     ;                   looping over all the chars as each interrupt comes.
                           634     ;
                           635     ;                   Since the counter value needs to be saved, I use a local variable
                                    
                           636     ;                   allocated in the data memory. Also since 14-seg requires two byte
                                    writes,
                           637     ;                   I have two Dhandler buffers for the HIGH and LOW byte array stora
                                   ge.
                           638     ;
                           639     ;                   
                           640     ;                   
                           641     ;Operation:                     *   Save all regs
                           642     ;                   *   Grab stored segment digit to be outputted, see if it is maxed
                                    out
                           643     ;                       * If so, then reset to 0 and keep going
                           644     ;                       * If not, then use it and keep going
                           645     ;                   *   Grab HIGH byte to AL and LOW byte to AH (This order matters)
                           646     ;                   *   Grab the I/O address for UPPER byte write for 14-seg
                           647     ;                   *   Use the Digit as offset for I/O write location (ADD)
                           648     ;                   *   OUT the AL (HIGH BYTE), this MUST be first to be outputted.
                           649     ;                   *   Since LOW byte is in AH, just swap AH with AL.
                           650     ;                   *   Again OUT AL (LOW BYTE), and update Digit++
                           651     ;                   *   Send appropriate EOI
                           652     ;
                           653     ;                   
                           654     ;Arguments:         Digit - stores counter 
                           655     ;
                           656     ;Return Values:         Digit - updated counter for next interrupt
                           657     ;
                           658     ;Result:            New ASCII char in the display. Updated counter value
                           659     ;
                           660     ;Shared Variables:      Digit - shared with DispalyHandlerInit (just accessed once to
                                    reset)
                           661     ;                   DHandlerVarLow  (8 byte arrays) - Shared with Display
                           662     ;                   DHandlerVarHigh (8 byte arrays) - Shared with Display
                           663     ;
                           664     ;Local Variables:       AX - stores all seg pattern codes. Also stores EOI value
                           665     ;                   BX - stores counter and acts as seg ptr
                           666     ;                   DX - stores seg pat right before output. stores I/O offsets
                           667     ;
                           668     ;Global Variables:      None.
                           669     ;                                       
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  03:02:47  11/10/;3  PAGE   14


LOC  OBJ                  LINE     SOURCE

                           670     ;                                       
                           671     ;Input:                 None.
                           672     ;
                           673     ;Output:                New ASCII char in the display at next offset.
                           674     ;
                           675     ;Registers Used:        AX, BX, DX
                           676     ;
                           677     ;Stack Depth:           3 Words.
                           678     ;
                           679     ;Known Bugs:            None.
                           680     ;
                           681     ;Data Structures:       DHandlerVarLow, DHandlerVarHigh (8 byte arrays)
                           682     ;
                           683     ;Error Handling:        None.
                           684     ;
                           685     ;Algorithms:            None.
                           686     ;
                           687     ;Limitations:           Outputs new chars in the same array Display might bechanging
                           688     ;
                           689     ;
                           690     ;Author:                        Anjian Wu
                           691     ;History:                       11-04-2013: Pseudo code - Anjian Wu
                           692     ;                               Working 7 seg version   - 11-08-2013 - Anjian Wu
                           693     ;                               Working 14 seg version  - 11-09-2013 - Anjian Wu
                           694     ;-------------------------------------------------------------------------------
                           695     
                           696     
0095                       697     DisplayHandler              PROC    NEAR
                           698                                             PUBLIC  DisplayHandler
                           699     
0095 50                    700             PUSH    AX                          ;save the registers
0096 53                    701             PUSH    BX                          ;Event Handlers should NEVER change
0097 52                    702             PUSH    DX                          ;any register values
                           703     
0098                       704     DisplayHInit:
                           705     
0098 8B1E1800       R      706             MOV     BX, Digit                   ;get offset for current digit
009C 83FB08                707             CMP     BX, Display_SIZE            ;Is the offset too large?
009F 7C03                  708             JL      DisplayHUpdate              ;no it isn't keep going
                           709             ;JGE     DisplayDigitReset          ;yes it is, reset it
                           710     
00A1                       711     DisplayDigitReset:
                           712     
00A1 BB0000                713             MOV    BX, 0                        ; Clear the digit index
                           714     
                           715     
                           716                     ;        
00A4                       717     DisplayHUpdate:                                 ; update the display
00A4 8A871000       R      718             MOV     AL, DHandlerVarHigh.buffer[BX]  ; Grab HIGH byte seg pat from buffer 
                                      
00A8 8AA70800       R      719             MOV     AH, DHandlerVarLow.buffer[BX]   ; Grab LOW byte seg pat from buffer  
                                     
                           720     
00AC BA0800                721             MOV     DX, LEDDisplay2                 ; get the display address for UPPER s
                                   eg pat   
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  03:02:47  11/10/;3  PAGE   15


LOC  OBJ                  LINE     SOURCE

00AF 03D3                  722             ADD     DX, BX                          ; ADD digit offset for display
00B1 EE                    723             OUT     DX, AL                          ; output segment directly
                           724     
00B2 BA0000                725             MOV     DX, LEDDisplay                  ; get the display address for LOW seg
                                    pat        
00B5 03D3                  726             ADD     DX, BX                          ; ADD digit offset for display
                           727             
00B7 86C4                  728             XCHG    AL, AH                                          ; Only AL is allowed 
                                   for OUT-ing bytes 
                           729                                                 ; (also a nifty operation)
                           730                                                 
00B9 EE                    731             OUT     DX, AL                      ;output segment directly
                           732                     
                           733     
                           734     
00BA                       735     DisplayDigitUpdate:                         ;Update digit
                           736     
00BA 43                    737             INC     BX                          ;update segment digit
                           738             
00BB 891E1800       R      739             MOV     Digit, BX                   ;save it for next time
                           740     
                           741     
00BF                       742     EndDisplayHandler:                      ;done taking care displaying
                           743     
00BF BA22FF                744             MOV     DX, INTCtrlrEOI         ;send the EOI to the interrupt controller
00C2 B80800                745             MOV     AX, TimerEOI
00C5 EE                    746             OUT     DX, AL
                           747     
00C6 5A                    748             POP     DX                      ;restore the registers
00C7 5B                    749             POP     BX
00C8 58                    750             POP     AX
                           751     
                           752     
00C9 CF                    753             IRET                            ;and return (Event Handlers end with IRET not
                                    RET)
                           754     
                           755     
                           756     DisplayHandler       ENDP
                           757             
                           758     ;Procedure:                     DisplayBufferFill
                           759     ;
                           760     ;
                           761     ;Description:           This procedure will fill the any Display_SIZE byte buffer 
                           762     ;                   with the PASSED arg value (AL).
                           763     ;
                           764     ;                   It does this by simply looping through 0 to Display_SIZE - 1
                           765     ;                   and writing AL to each char in DS:SI
                           766     ;
                           767     ;                   This function is used often to empty a buffer.
                           768     ;                   
                           769     ;Operation:                     *   Reset counter
                           770     ;                   *   Loop Display_SIZE times and fill each char with AL.
                           771     ;                   *   Update counter and Data seg ptr (SI)
                           772     ;                   *   DONE
                           773     ;
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  03:02:47  11/10/;3  PAGE   16


LOC  OBJ                  LINE     SOURCE

                           774     ;                   
                           775     ;Arguments:         AL -    The char to be filled with
                           776     ;                   DS:SI - Location of buffer to be filled
                           777     ;
                           778     ;Return Values:         None.
                           779     ;
                           780     ;Result:            ASCII_NULL empty DisplayArray
                           781     ;
                           782     ;Shared Variables:      This function may fill buffers used by DisplayNum, DusplayHex
                                   ,
                           783     ;                   and Display. (DisplayArray, DHandler1, Dhandler2 Display_SIZE byt
                                   e buffers)
                           784     ;
                           785     ;Local Variables:       SI - Pointer to DS:SI's char
                           786     ;                   CX - Counter
                           787     ;
                           788     ;Global Variables:      None.
                           789     ;                                       
                           790     ;                                       
                           791     ;Input:                 None.
                           792     ;
                           793     ;Output:                None.
                           794     ;
                           795     ;Registers Used:        CX, SI, AL
                           796     ;
                           797     ;Stack Depth:           4 Words.
                           798     ;
                           799     ;Known Bugs:            None.
                           800     ;
                           801     ;Data Structures:       Display_SIZE sized buffers
                           802     ;
                           803     ;Error Handling:        None.
                           804     ;
                           805     ;Algorithms:            None.
                           806     ;
                           807     ;Limitations:           Outputs new chars in the same array that DisplayHandler touch
                                   es.
                           808     ;
                           809     ;
                           810     ;Author:                        Anjian Wu
                           811     ;History:                       11-04-2013: Pseudo code - Anjian Wu
                           812     ;                               Working 7 seg version   - 11-08-2013 - Anjian Wu
                           813     ;                               Working 14 seg version  - 11-09-2013 - Anjian Wu
                           814     ;-------------------------------------------------------------------------------
                           815     
00CA                       816     DisplayBufferFill               PROC    NEAR
                           817                                             PUBLIC  DisplayBufferFill
                           818                                             
00CA 51                    819         PUSH    CX;             Save all Used Regs
00CB 53                    820         PUSH    BX;             Important since many functions use this
00CC 50                    821         PUSH    AX;
00CD 56                    822         PUSH    SI;
                           823                                     
00CE                       824     DisplayClrInit:
                           825     
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  03:02:47  11/10/;3  PAGE   17


LOC  OBJ                  LINE     SOURCE

                           826     
00CE B90000                827         MOV     CX, 0           ; Clear the counter
                           828                                 ; Counter goes from 0 to DisplaySize - 1
                           829     
00D1                       830     DisplayClrLoop:
                           831     
00D1 83F908                832         CMP     CX, Display_SIZE ; Is the counter maxed out?
00D4 7D06                  833         JGE     DisplayClrDone  ; Yes, exit loop
                           834                                 ; No, continue loop
                           835                                 
00D6 8804                  836         MOV     [SI] , AL       ; Fill that byte with ARG
                           837             
00D8 41                    838         INC     CX              ; Update Counter
00D9 46                    839         INC     SI              ; Update Data seg ptr
                           840         
00DA EBF5                  841         JMP     DisplayClrLoop  ; 
                           842         
00DC                       843     DisplayClrDone:
                           844     
00DC 5E                    845         POP    SI;
00DD 58                    846         POP    AX;
00DE 5B                    847         POP    BX;
00DF 59                    848         POP    CX;              Restore all used regs
                           849     
00E0 C3                    850         RET                     
                           851         
                           852     DisplayBufferFill  ENDP           
                           853      
                           854     
----                       855     CODE    ENDS 
                           856         
----                       857     DATA    SEGMENT PUBLIC  'DATA'
                           858     
                           859     
0000 (8                    860         DisplayArray       DISPLAYSTRUC <>      ;Where DisplayArray's buffer is. Use this
                                    only for
     ??
     )
                           861                                                 ;storing ASCII so that debugging is easie
                                   r.
                           862     
0008 (8                    863         DHandlerVarLow       DISPLAYSTRUC <>      ;Where DisplayHandler's high byte buffe
                                   r is stored
     ??
     )
                           864     
0010 (8                    865         DHandlerVarHigh       DISPLAYSTRUC <>      ;Where DisplayHandler's low byte buffe
                                   r is stored
     ??
     )
                           866     
0018 ????                  867         digit               DW      ?           ;The shared Handler pointer to next digit
                           868             
----                       869     DATA    ENDS
                           870     
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  03:02:47  11/10/;3  PAGE   18


LOC  OBJ                  LINE     SOURCE

                           871             END 

ASSEMBLY COMPLETE, NO ERRORS FOUND
