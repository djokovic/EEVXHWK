8086/87/88/186 MACRO ASSEMBLER    HW4_MAIN                                                 03:02:47  11/10/;3  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE HW4_MAIN
OBJECT MODULE PLACED IN HW4_MAIN.OBJ
ASSEMBLER INVOKED BY:  C:\UTIL\ASM86.EXE HW4_MAIN.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1     
                             2             NAME    hw4_main
                             3     
                             4     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             5     ;                                                                            ;
                             6     ;                                 hw4_main                                   ;
                             7     ;                            Homework #4 Main Loop                           ;
                             8     ;                                EE/CS  51                                   ;
                             9     ;                                 Anjian Wu                                  ;
                            10     ;                               TA: Pipe-mazo                                ;
                            11     ;                                                                            ;
                            12     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            13     ;                                 What's in here?
                            14     ;
                            15     ;   Mainloop        -   This is the mainloop that initializes chip selects,
                            16     ;                       timer interrupts, and display.
                            17     ;
                            18     ;   ClrIRQVectors   -   This functions installs the IllegalEventHandler for all
                            19     ;                       interrupt vectors in the interrupt vector table.
                            20     ;
                            21     ;   InitCS          -   Initialize the Peripheral Chip Selects on the 80188.
                            22     ;
                            23     ;   InitTimer       -   Initialize the 80188 Timers. Only uses Timer0 for now
                            24     ;
                            25     ;   IllegalEventHandler -   This procedure is the event handler for illegal
                            26     ;                           (uninitialized) interrupts.  It does nothing 
                            27     ;
                            28     ;
                            29     ;                               Pseudo code - 11-02-2013 - Anjian Wu
                            30     ;                   Added to Main - 11-09-2013 - Anjian Wu
                            31     
                            32     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            33     
                            34     ; Description:      This program tests the display functions for Homework
                            35     ;                   #4.  It calls Glenn's test functions that display
                            36     ;                   test strings into the Display, and then loops between
                            37     ;                   DisplayNum and DisplayHex
                            38     ;
                            39     ; Input:            None.
                            40     ; Output:           Display, 7-segment 8 chars.
                            41     ;
                            42     ; User Interface:   Display, 7-segment 8 chars.
                            43     ;
                            44     ; Error Handling:   None.
                            45     ;
                            46     ; Algorithms:       None.
                            47     ; Data Structures:  Arrays.
                            48     ;
                            49     ; Known Bugs:       None.
                            50     ; Limitations:      Only outputs 8 char strings max.
8086/87/88/186 MACRO ASSEMBLER    HW4_MAIN                                                 03:02:47  11/10/;3  PAGE    2


LOC  OBJ                  LINE     SOURCE

                            51     ;
                            52     ; Revision History:
                            53     ;History:                       11-04-2013: Pseudo code - Anjian Wu
                            54     
                            55     
                            56 +1  $INCLUDE(general.inc);
                      =1    57     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    58     ;                                                                               ;
                      =1    59     ;                                  General.INC                                  ;
                      =1    60     ;                               General Constants                           ;
                      =1    61     ;                                 Include File                              ;
                      =1    62     ;                                                                           ;
                      =1    63     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    64     
                      =1    65     ; This file contains general operations
                      =1    66     ;
                      =1    67     ; Revision History:
                      =1    68     ;    11/02/2013                 Created - Anjian Wu
                      =1    69     
                      =1    70     
                      =1    71     ; String Constants
                      =1    72     
  0000                =1    73     ASCII_NULL      EQU     0           ;
                      =1    74     
                      =1    75     ; General Definitions for Main Loops
                      =1    76     
  0001                =1    77     FIRST_RESERVED_VEC      EQU     1           ;reserve vectors 1-3
  0003                =1    78     LAST_RESERVED_VEC       EQU     3       ;
  0100                =1    79     NUM_IRQ_VECTORS     EQU 256     ;number of interrupt vectors
                      =1    80     
                            81 +1  $INCLUDE(timer.inc);
                      =1    82     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    83     ;                                                                               ;
                      =1    84     ;                                  Timer.INC                                    ;
                      =1    85     ;                              Timer Constants                              ;
                      =1    86     ;                                 Include File                              ;
                      =1    87     ;                                                                           ;
                      =1    88     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    89     
                      =1    90     ; This file contains the definitions for timers and their interupts
                      =1    91     ;
                      =1    92     ; Revision History:
                      =1    93     ;    11/02/2013                 Created - Anjian Wu
                      =1    94     
                      =1    95     
                      =1    96     
                      =1    97                                             ; Timer Definitions
                      =1    98     
                      =1    99     ; Addresses
  FF56                =1   100     Tmr0Ctrl        EQU     0FF56H          ;address of Timer 0 Control Register
  FF52                =1   101     Tmr0MaxCntA     EQU     0FF52H          ;address of Timer 0 Max Count A Register
  FF50                =1   102     Tmr0Count       EQU     0FF50H          ;address of Timer 0 Count Register
  FF66                =1   103     Tmr2Ctrl        EQU     0FF66H          ;address of Timer 2 Control Register
  FF62                =1   104     Tmr2MaxCnt      EQU     0FF62H          ;address of Timer 2 Max Count A Register
  FF60                =1   105     Tmr2Count       EQU     0FF60H          ;address of Timer 2 Count Register
8086/87/88/186 MACRO ASSEMBLER    HW4_MAIN                                                 03:02:47  11/10/;3  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   106     
                      =1   107     ; Control Register Values
  E001                =1   108     Tmr0CtrlVal     EQU     0E001H          ;value to write to Timer 0 Control Register
                      =1   109                                             ;1---------------  enable timer
                      =1   110                                             ;-1--------------  write to control
                      =1   111                                             ;--1-------------  enable interrupts
                      =1   112                                             ;----000000------  reserved
                      =1   113                                             ;---0------0-----  read only
                      =1   114                                             ;-----------0----  TMRIN0 is an enable
                      =1   115                                             ;------------00--  count timer 2 outs
                      =1   116                                             ;--------------0-  single counter mode
                      =1   117                                             ;---------------1  continuous mode
                      =1   118     
                      =1   119     
                      =1   120     ; Control Register Values
                      =1   121                                           
                      =1   122                                             ; Control Register Values
  1388                =1   123     CTS_PER_MILSEC  EQU     5000            ; 20MHZ/(4 * 1KHz) = 5000 counts per MS
  0008                =1   124     TimerEOI        EQU     00008H          ;Timer EOI command (same for all timers)
  8000                =1   125     NonSpecEOI      EQU     08000H          ;Non-specific EOI command
                      =1   126     
                      =1   127     
                      =1   128     ; Interrupt Vectors adn their control values
  0008                =1   129     Tmr0Vec         EQU     8               ;interrupt vector for Timer 0
  FF32                =1   130     INTCtrlrCtrl    EQU     0FF32H          ;address of interrupt controller for timer
  FF22                =1   131     INTCtrlrEOI     EQU     0FF22H          ;address of interrupt controller EOI register
                      =1   132     
  0001                =1   133     INTCtrlrCVal    EQU     00001H          ;set priority for timers to 1 and enable
                      =1   134                                             ;000000000000----  reserved
                      =1   135                                             ;------------0---  enable timer interrupt
                      =1   136                                             ;-------------001  timer priority
                           137 +1  $INCLUDE(chips.inc);
                      =1   138     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   139     ;                                                                               ;
                      =1   140     ;                                  Chips.INC                                    ;
                      =1   141     ;                           Chip Select Constants                           ;
                      =1   142     ;                                 Include File                              ;
                      =1   143     ;                                                                           ;
                      =1   144     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   145     
                      =1   146     ; This file contains the definitions for chip select values
                      =1   147     ;
                      =1   148     ; Revision History:
                      =1   149     ;    11/02/2013                 Created - Anjian Wu
                      =1   150     
                      =1   151     
                      =1   152     
                      =1   153     ; Chip Select Register Values
  0003                =1   154     PACSval         EQU     00003H          ;PCS base at 0, 3 wait states
                      =1   155                                             ;0000000000------  starts at address 0
                      =1   156                                             ;----------000---  reserved
                      =1   157                                             ;-------------0--  wait for RDY inputs
                      =1   158                                             ;--------------11  3 wait states
  0183                =1   159     MPCSval         EQU     00183H          ;PCS in I/O space, use PCS5/6, 3 wait states
                      =1   160                                             ;0---------000---  reserved
8086/87/88/186 MACRO ASSEMBLER    HW4_MAIN                                                 03:02:47  11/10/;3  PAGE    4


LOC  OBJ                  LINE     SOURCE

                      =1   161                                             ;-0000001--------  MCS is 8KB
                      =1   162                                             ;--------1-------  output PCS5/PCS6
                      =1   163                                             ;---------0------  PCS in I/O space
                      =1   164                                             ;-------------0--  wait for RDY inputs
                      =1   165                                             ;--------------11  3 wait states
                      =1   166                                             
  FFA4                =1   167     PACSreg         EQU     0FFA4H          ;address of PACS register
  FFA8                =1   168     MPCSreg         EQU     0FFA8H          ;address of MPCS register
                           169     
                           170     
                           171     CGROUP  GROUP   CODE
                           172     DGROUP  GROUP   STACK
                           173     
                           174     
                           175     
----                       176     CODE    SEGMENT PUBLIC 'CODE'
                           177     
                           178     
                           179             ASSUME  CS:CGROUP, DS:DGROUP
                           180     
                           181     
                           182     ;external function declarations
                           183     
                           184     
                           185             EXTRN   DisplayHandlerInit:NEAR          ;convert a number to a decimal strin
                                   g
                           186     
                           187             EXTRN   DisplayTest:NEAR          ; Glenn's Test Code
                           188     
0000                       189     START:  
                           190     
0000                       191     MAIN:
0000 B8----         R      192             MOV     AX, DGROUP              ;initialize the stack pointer
0003 8ED0                  193             MOV     SS, AX
0005 BCE00190       R      194             MOV     SP, OFFSET(DGROUP:TopOfStack)
                           195     
0009 B8----         R      196             MOV     AX, DGROUP              ;initialize the data segment
000C 8ED8                  197             MOV     DS, AX
                           198     
000E E83200                199             CALL    InitCS                   ; Initialize the chip selects
0011 E80A00                200             CALL    ClrIRQVectors           ;
                           201             
0014 E80000         E      202             CALL    DisplayHandlerInit       ; Initialize display handler
                           203     
0017 E84500                204             CALL    InitTimer                ; Initialize timer events, note interrupts
                           205             
001A FB                    206             STI                              ; start NOW
001B E80000         E      207             CALL    DisplayTest              ;Call Glenn's tests
                           208             
                           209             
                           210     
                           211     ; ClrIRQVectors
                           212     ;
                           213     ; Description:      This functions installs the IllegalEventHandler for all
                           214     ;                   interrupt vectors in the interrupt vector table.  Note
8086/87/88/186 MACRO ASSEMBLER    HW4_MAIN                                                 03:02:47  11/10/;3  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           215     ;                   that all 256 vectors are initialized so the code must be
                           216     ;                   located above 400H.  The initialization skips  (does not
                           217     ;                   initialize vectors) from vectors FIRST_RESERVED_VEC to
                           218     ;                   LAST_RESERVED_VEC. This is taken from Glenn's exmaples
                           219     ;
                           220     ; Arguments:        None.
                           221     ; Return Value:     None.
                           222     ;
                           223     ; Local Variables:  CX    - vector counter.
                           224     ;                   ES:SI - pointer to vector table.
                           225     ; Shared Variables: None.
                           226     ; Global Variables: None.
                           227     ;
                           228     ; Input:            None.
                           229     ; Output:           None.
                           230     ;
                           231     ; Error Handling:   None.
                           232     ;
                           233     ; Algorithms:       None.
                           234     ; Data Structures:  None.
                           235     ;
                           236     ; Registers Used:   flags, AX, CX, SI, ES
                           237     ; Stack Depth:      1 word
                           238     ;
                           239     ; Author:           Glen George
                           240     ; Last Modified:    Feb. 8, 2002
                           241     ;                   Added to Main - 11-09-2013 - Anjian Wu
                           242     
                           243     
001E                       244     ClrIRQVectors   PROC    NEAR
                           245     
                           246     
001E                       247     InitClrVectorLoop:              ;setup to store the same handler 256 times
                           248     
001E 33C0                  249             XOR     AX, AX          ;clear ES (interrupt vectors are in segment 0)
0020 8EC0                  250             MOV     ES, AX
0022 BE0000                251             MOV     SI, 0           ;initialize SI to skip RESERVED_VECS (4 bytes each)
                           252     
0025 B90001                253             MOV     CX, 256         ;up to 256 vectors to initialize
                           254     
                           255     
0028                       256     ClrVectorLoop:                  ;loop clearing each vector
                           257                                     ;check if should store the vector
0028 83FE04                258             CMP     SI, 4 * FIRST_RESERVED_VEC
002B 7205                  259             JB          DoStore                  ;if before start of reserved field - sto
                                   re it
002D 83FE0C                260             CMP         SI, 4 * LAST_RESERVED_VEC
0030 760B                  261             JBE         DoneStore        ;if in the reserved vectors - don't store it
                           262             ;JA     DoStore                  ;otherwise past them - so do the store
                           263     
0032                       264     DoStore:                        ;store the vector
0032 26C7045200     R      265             MOV     ES: WORD PTR [SI], OFFSET(IllegalEventHandler)
0037 26C74402----   R      266             MOV     ES: WORD PTR [SI + 2], SEG(IllegalEventHandler)
                           267     
003D                       268     DoneStore:                                  ;done storing the vector
8086/87/88/186 MACRO ASSEMBLER    HW4_MAIN                                                 03:02:47  11/10/;3  PAGE    6


LOC  OBJ                  LINE     SOURCE

003D 83C604                269             ADD     SI, 4           ;update pointer to next vector
                           270     
0040 E2E6                  271             LOOP    ClrVectorLoop   ;loop until have cleared all vectors
                           272             ;JMP    EndClrIRQVectors;and all done
                           273     
                           274     
0042                       275     EndClrIRQVectors:               ;all done, return
0042 C3                    276             RET
                           277     
                           278     
                           279     ClrIRQVectors   ENDP
                           280     
                           281     
                           282     ; InitCS
                           283     ;
                           284     ; Description:       Initialize the Peripheral Chip Selects on the 80188.
                           285     ;
                           286     ; Operation:         Write the initial values to the PACS and MPCS registers.
                           287     ;
                           288     ; Arguments:         None.
                           289     ; Return Value:      None.
                           290     ;
                           291     ; Local Variables:   None.
                           292     ; Shared Variables:  None.
                           293     ; Global Variables:  None.
                           294     ;
                           295     ; Input:             None.
                           296     ; Output:            None.
                           297     ;
                           298     ; Error Handling:    None.
                           299     ;
                           300     ; Algorithms:        None.
                           301     ; Data Structures:   None.
                           302     ;
                           303     ; Registers Changed: AX, DX
                           304     ; Stack Depth:       0 words
                           305     ;
                           306     ; Author:            Glen George
                           307     ; Last Modified:     Oct. 29, 1997
                           308     ;                    Pseudo code - 11-02-2013 - Anjian Wu
                           309     ;                    Added to Main - 11-09-2013 - Anjian Wu
                           310     
                           311     
                           312     
0043                       313     InitCS  PROC    NEAR; Do what we did for HWK1 part 5 :)
                           314     
                           315     
0043 BAA4FF                316             MOV     DX, PACSreg     ;setup to write to PACS register
0046 B80300                317             MOV     AX, PACSval
0049 EE                    318             OUT     DX, AL          ;write PACSval to PACS (base at 0, 3 wait states)
                           319     
004A BAA8FF                320             MOV     DX, MPCSreg     ;setup to write to MPCS register
004D B88301                321             MOV     AX, MPCSval
0050 EE                    322             OUT     DX, AL          ;write MPCSval to MPCS (I/O space, 3 wait states)
                           323     
8086/87/88/186 MACRO ASSEMBLER    HW4_MAIN                                                 03:02:47  11/10/;3  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           324     
0051 C3                    325             RET                     ;done so return
                           326     
                           327     
                           328     InitCS  ENDP
                           329     
                           330     ; IllegalEventHandler
                           331     ;
                           332     ; Description:       This procedure is the event handler for illegal
                           333     ;                    (uninitialized) interrupts.  It does nothing - it just
                           334     ;                    returns after sending a non-specific EOI.
                           335     ;
                           336     ; Operation:         Send a non-specific EOI and return.
                           337     ;
                           338     ; Arguments:         None.
                           339     ; Return Value:      None.
                           340     ;
                           341     ; Local Variables:   None.
                           342     ; Shared Variables:  None.
                           343     ; Global Variables:  None.
                           344     ;
                           345     ; Input:             None.
                           346     ; Output:            None.
                           347     ;
                           348     ; Error Handling:    None.
                           349     ;
                           350     ; Algorithms:        None.
                           351     ; Data Structures:   None.
                           352     ;
                           353     ; Registers Changed: None
                           354     ; Stack Depth:       2 words
                           355     ;
                           356     ; Author:            Glen George
                           357     ; Last Modified:     Dec. 25, 2000
                           358     ;                    Added to Main - 11-09-2013 - Anjian Wu
                           359     
                           360     
0052                       361     IllegalEventHandler     PROC    NEAR
                           362     
0052 90                    363             NOP                             ;do nothing (can set breakpoint here)
                           364     
0053 50                    365             PUSH    AX                      ;save the registers
0054 52                    366             PUSH    DX
                           367     
0055 BA22FF                368             MOV     DX, INTCtrlrEOI         ;send a non-sepecific EOI to the
0058 B80080                369             MOV     AX, NonSpecEOI          ;   interrupt controller to clear out
005B EE                    370             OUT     DX, AL                  ;   the interrupt that got us here
                           371     
005C 5A                    372             POP     DX                      ;restore the registers
005D 58                    373             POP     AX
                           374     
005E CF                    375             IRET                            ;and return
                           376     
                           377     
                           378     IllegalEventHandler     ENDP
8086/87/88/186 MACRO ASSEMBLER    HW4_MAIN                                                 03:02:47  11/10/;3  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           379     ; InitTimer
                           380     ;
                           381     ; Description:       Initialize the 80188 Timers.  The timers are initialized
                           382     ;                    to generate interrupts every MS_PER_SEG milliseconds.
                           383     ;                    Timer0 counter is also clear, and the interrupt control is
                           384     ;                    set.
                           385     ;
                           386     ; Operation:         The appropriate values are written to the timer control
                           387     ;                    registers in the PCB.  Also, the timer count registers
                           388     ;                    are reset to zero.  Finally, the interrupt controller is
                           389     ;                    setup to accept timer interrupts and any pending
                           390     ;                    interrupts are cleared by sending a TimerEOI to the
                           391     ;                    interrupt controller.
                           392     ;
                           393     ; Arguments:         None.
                           394     ; Return Value:      None.
                           395     ;
                           396     ; Local Variables:   None.
                           397     ; Shared Variables:  None.
                           398     ; Global Variables:  None.
                           399     ;
                           400     ; Input:             None.
                           401     ; Output:            None.
                           402     ;
                           403     ; Error Handling:    None.
                           404     ;
                           405     ; Algorithms:        None.
                           406     ; Data Structures:   None.
                           407     ;
                           408     ; Registers Changed: AX, DX
                           409     ; Stack Depth:       0 words
                           410     ;
                           411     ; Author:            Glen George
                           412     ; Last Modified:     Oct. 29, 1997
                           413     ;                    Pseudo code - 11-02-2013 - Anjian Wu
                           414     ;                    Added to Main - 11-09-2013 - Anjian Wu
                           415     
                           416     
005F                       417     InitTimer       PROC    NEAR
                           418     
005F                       419     InitTimerCountSet:
                           420                                     ;initialize Timer #0 for MS_PER_SEG ms interrupts
005F BA50FF                421             MOV     DX, Tmr0Count   ;initialize the count register to 0
0062 33C0                  422             XOR     AX, AX
0064 EE                    423             OUT     DX, AL
0065                       424     InitTimerMaxSet:
                           425     
0065 BA52FF                426             MOV     DX, Tmr0MaxCntA ;setup max count for milliseconds per segment
0068 B88813                427             MOV     AX, CTS_PER_MILSEC  ;   count so can time the segments
006B EE                    428             OUT     DX, AL
                           429             
006C                       430     InitTimerControlSet:
                           431     
006C BA56FF                432             MOV     DX, Tmr0Ctrl    ;setup the control register
006F B801E0                433             MOV     AX, Tmr0CtrlVal ;Set appropriate bits to timer register
8086/87/88/186 MACRO ASSEMBLER    HW4_MAIN                                                 03:02:47  11/10/;3  PAGE    9


LOC  OBJ                  LINE     SOURCE

0072 EE                    434             OUT     DX, AL
                           435             
0073                       436     InitTimerIntControlSet:              
                           437     
                           438                                     ;initialize interrupt controller for timers
0073 BA32FF                439             MOV     DX, INTCtrlrCtrl;setup the interrupt control register
0076 B80100                440             MOV     AX, INTCtrlrCVal
0079 EE                    441             OUT     DX, AL
007A                       442     InitTimerDone:
                           443     
007A BA22FF                444             MOV     DX, INTCtrlrEOI ;send a timer EOI (to clear out controller)
007D B80800                445             MOV     AX, TimerEOI
0080 EE                    446             OUT     DX, AL
                           447     
                           448     
0081 C3                    449             RET                     ;done so return
                           450     
                           451     
                           452     InitTimer       ENDP
                           453     
----                       454     CODE    ENDS
                           455     
                           456     
                           457     
                           458     ;the stack
                           459     
----                       460     STACK   SEGMENT STACK  'STACK'
                           461     
0000 (80                   462                     DB      80 DUP ('Stack ')       ;240 words
     537461636B20
     )
                           463     
01E0                       464     TopOfStack      LABEL   WORD
                           465     
----                       466     STACK   ENDS
                           467     
                           468     
                           469     
                           470             END     START

ASSEMBLY COMPLETE, NO ERRORS FOUND
