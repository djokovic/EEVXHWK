8086/87/88/186 MACRO ASSEMBLER    MOTORS                                                   17:09:42  11/22/;3  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE MOTORS
OBJECT MODULE PLACED IN MOTORS.OBJ
ASSEMBLER INVOKED BY:  C:\UTIL\ASM86.EXE MOTORS.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1     NAME        Motors
                             2     
                             3 +1  $INCLUDE(motors.inc);
                      =1     4     
                      =1     5     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1     6     ;                                                                               ;
                      =1     7     ;                                  Motors.INC                                   ;
                      =1     8     ;                               Motor Constants                             ;
                      =1     9     ;                                 Include File                              ;
                      =1    10     ;                                                                           ;
                      =1    11     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    12     
                      =1    13     ; This file contains the definitions for the Motor functions
                      =1    14     ;
                      =1    15     ; Revision History:
                      =1    16     ;    11/18/2013                 Created - Anjian Wu
                      =1    17     
                      =1    18     
                      =1    19     
                      =1    20     ; Fx Table Definitions
                      =1    21     
  7FFF                =1    22     Fx1             EQU     07FFFH         ; Fx component for Motor 1
  C000                =1    23     Fx2             EQU     0C000H         ; Fx component for Motor 2
  C000                =1    24     Fx3             EQU     0C000H         ; Fx component for Motor 3
  0000                =1    25     Fy1             EQU     0              ; Fy component for Motor 1
  9127                =1    26     Fy2             EQU     09127H         ; Fy component for Motor 2
  6ED9                =1    27     Fy3             EQU     06ED9H         ; Fy component for Motor 3
                      =1    28     
  0003                =1    29     FY_offset       EQU     3              ; Fy components are 3 down in table
                      =1    30     
                      =1    31     ; Motor Conv. Constants
                      =1    32     
  0168                =1    33     FULL_ANGLE      EQU     360             ; There are 360 deg in a full circle
 -8000                =1    34     NO_ANGLE_CHANGE EQU     -32768          ; NO angle change is denoted by -32768
  FFFF                =1    35     NO_SPEED_CHANGE EQU     65535           ; No speed change is denoted by 65534;
  0003                =1    36     numOfmotors     EQU     3               ; There are three motors on Robotrike
                      =1    37     
  0000                =1    38     STOPPED_SPEED   EQU     0               ;
  0000                =1    39     ZERO_ANGLE      EQU     0               ;
                      =1    40     
  0000                =1    41     ZERO_SPEED_PWM  EQU     0               ;
                      =1    42     
  007F                =1    43     PWM_WIDTH_MAX   EQU     127             ;
                      =1    44     
                      =1    45     
                      =1    46     
                      =1    47     ; Motor PORT Vals
  0183                =1    48     _8255_CNTRL_REG EQU     183H    ;Control Word Address
  0080                =1    49     _8255_CNTRL_VAL EQU     80H     ;Control Word Write val: MODE 0 for BOTH groups A & B
                      =1    50     
8086/87/88/186 MACRO ASSEMBLER    MOTORS                                                   17:09:42  11/22/;3  PAGE    2


LOC  OBJ                  LINE     SOURCE

  0181                =1    51     PORTB           EQU     181H    ;Address of port B
                      =1    52     
                      =1    53     ; MOtor MASK vals
                      =1    54                                       
  0002                =1    55     FORWARD_M1          EQU     00000010B   ;   MASK FORWARD for Motor 1
  0003                =1    56     BACKWARD_M1     EQU     00000011B   ;   MASK BACKWARD for Motor 1
                      =1    57     
  0008                =1    58     FORWARD_M2          EQU     00001000B   ;   MASK FORWARD for Motor 2
  000C                =1    59     BACKWARD_M2     EQU     00001100B   ;   MASK BACKWARD for Motor 2
                      =1    60     
  0020                =1    61     FORWARD_M3          EQU     00100000B   ;   MASK FORWARD for Motor 3
  0030                =1    62     BACKWARD_M3     EQU     00110000B   ;   MASK BACKWARD for Motor 3
                      =1    63     
  00FD                =1    64     STOP_M1             EQU     11111101B   ;   MASK STOP for Motor 1 Dont need
  00F7                =1    65     STOP_M2             EQU     11110111B   ;   MASK STOP for Motor 2 dont need
  00DF                =1    66     STOP_M3             EQU     11011111B   ;   MASK STOP for Motor 3 dont need
                      =1    67     
  0080                =1    68     LASER_ON        EQU     10000000B   ;   OR MASK for laser ON (PortB)
  007F                =1    69     LASER_OFF       EQU     01111111B   ;   AND MASK for laser OFF (PortB)
                      =1    70     
                      =1    71     
                      =1    72     
                      =1    73     
                            74 +1  $INCLUDE(general.inc);
                      =1    75     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    76     ;                                                                               ;
                      =1    77     ;                                  General.INC                                  ;
                      =1    78     ;                               General Constants                           ;
                      =1    79     ;                                 Include File                              ;
                      =1    80     ;                                                                           ;
                      =1    81     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    82     
                      =1    83     ; This file contains general operations
                      =1    84     ;
                      =1    85     ; Revision History:
                      =1    86     ;    11/02/2013                 Created - Anjian Wu
                      =1    87     
                      =1    88     
                      =1    89     ; General Constants
                      =1    90     
  0000                =1    91     ASCII_NULL      EQU     0           ;
  0004                =1    92     nibble_size     EQU     4           ;
  0008                =1    93     BYTE_size       EQU     8           ;
  0010                =1    94     WORD_size       EQU     16          ;
                      =1    95     
  0001                =1    96     TRUE            EQU     1           ;
  0000                =1    97     FALSE           EQU     0           ;
                      =1    98     
  0000                =1    99     RESET           EQU     0           ; General Value for Resetting something
                      =1   100     
  0000                =1   101     CLEAR           EQU     0           ;
                      =1   102     ; General Definitions for Main Loops
                      =1   103     
  0001                =1   104     FIRST_RESERVED_VEC      EQU     1           ;reserve vectors 1-3
  0003                =1   105     LAST_RESERVED_VEC       EQU     3       ;
8086/87/88/186 MACRO ASSEMBLER    MOTORS                                                   17:09:42  11/22/;3  PAGE    3


LOC  OBJ                  LINE     SOURCE

  0100                =1   106     NUM_IRQ_VECTORS     EQU 256     ;number of interrupt vectors
                      =1   107     
                           108 +1  $INCLUDE(timer.inc);
                      =1   109     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   110     ;                                                                               ;
                      =1   111     ;                                  Timer.INC                                    ;
                      =1   112     ;                              Timer Constants                              ;
                      =1   113     ;                                 Include File                              ;
                      =1   114     ;                                                                           ;
                      =1   115     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   116     
                      =1   117     ; This file contains the definitions for timers and their interupts
                      =1   118     ;
                      =1   119     ; Revision History:
                      =1   120     ;    11/02/2013                 Created - Anjian Wu
                      =1   121     
                      =1   122     
                      =1   123     
                      =1   124                                             ; Timer Definitions
                      =1   125     
                      =1   126     ; Addresses
  FF56                =1   127     Tmr0Ctrl        EQU     0FF56H          ;address of Timer 0 Control Register
  FF52                =1   128     Tmr0MaxCntA     EQU     0FF52H          ;address of Timer 0 Max Count A Register
  FF50                =1   129     Tmr0Count       EQU     0FF50H          ;address of Timer 0 Count Register
                      =1   130     
  FF5E                =1   131     Tmr1Ctrl        EQU     0FF5EH          ;address of Timer 1 Control Register
  FF52                =1   132     Tmr1MaxCntA     EQU     0FF52H          ;address of Timer 1 Max Count A Register
  FF50                =1   133     Tmr1Count       EQU     0FF50H          ;address of Timer 1 Count Register
                      =1   134     
                      =1   135     
  FF66                =1   136     Tmr2Ctrl        EQU     0FF66H          ;address of Timer 2 Control Register
  FF62                =1   137     Tmr2MaxCnt      EQU     0FF62H          ;address of Timer 2 Max Count A Register
  FF60                =1   138     Tmr2Count       EQU     0FF60H          ;address of Timer 2 Count Register
                      =1   139     
                      =1   140     ; Control Register Values
  E001                =1   141     Tmr0CtrlVal     EQU     0E001H          ;value to write to Timer 0 Control Register
                      =1   142                                             ;1---------------  enable timer
                      =1   143                                             ;-1--------------  write to control
                      =1   144                                             ;--1-------------  enable interrupts
                      =1   145                                             ;----000000------  reserved
                      =1   146                                             ;---0------0-----  read only
                      =1   147                                             ;-----------0----  TMRIN0 is an enable
                      =1   148                                             ;------------00--  count timer 2 outs
                      =1   149                                             ;--------------0-  single counter mode
                      =1   150                                             ;---------------1  continuous mode
                      =1   151     ; Control Register Values
  E001                =1   152     Tmr1CtrlVal     EQU     0E001H          ;value to write to Timer 0 Control Register
                      =1   153                                             ;1---------------  enable timer
                      =1   154                                             ;-1--------------  write to control
                      =1   155                                             ;--1-------------  enable interrupts
                      =1   156                                             ;----000000------  reserved
                      =1   157                                             ;---0------0-----  read only
                      =1   158                                             ;-----------0----  TMRIN0 is an enable
                      =1   159                                             ;------------00--  count timer 2 outs
                      =1   160                                             ;--------------0-  single counter mode
8086/87/88/186 MACRO ASSEMBLER    MOTORS                                                   17:09:42  11/22/;3  PAGE    4


LOC  OBJ                  LINE     SOURCE

                      =1   161                                             ;---------------1  continuous mode
                      =1   162     
                      =1   163     
                      =1   164     ; Control Register Values
                      =1   165                                           
                      =1   166                                             ; Control Register Values
  08CA                =1   167     CTS_PER_MILSEC  EQU     2250            ; 18MHZ/(8 * 1KHz) ~ 2250 counts per MS
  0008                =1   168     TimerEOI        EQU     00008H          ;Timer EOI command (same for all timers)
  8000                =1   169     NonSpecEOI      EQU     08000H          ;Non-specific EOI command
                      =1   170     
  57E4                =1   171     COUNT_FOR_100HZ EQU     22500           ; 18,000,000 HZ/(8 * 100 Hz) ~ 22500 counts f
                                   or 100 HZ
                      =1   172                                             ; NOTE THIS IS APPROXIMATE, Clock is actually
                                    a bit faster
                      =1   173                                             ; than 18 MHZ
                      =1   174     
                      =1   175     
                      =1   176     ; Interrupt Vectors and their control values
  0008                =1   177     Tmr0Vec         EQU     8               ;interrupt vector for Timer 0
  0012                =1   178     Tmr1Vec         EQU     18              ;interrupt vector for Timer 18
                      =1   179     
  FF32                =1   180     INTCtrlrCtrl    EQU     0FF32H          ;address of interrupt controller for timer
  FF22                =1   181     INTCtrlrEOI     EQU     0FF22H          ;address of interrupt controller EOI register
                      =1   182     
  0001                =1   183     INTCtrlrCVal    EQU     00001H          ;set priority for timers to 1 and enable
                      =1   184                                             ;000000000000----  reserved
                      =1   185                                             ;------------0---  enable timer interrupt
                      =1   186                                             ;-------------001  timer priority
                           187     
                           188     
                           189     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           190     ;                                                                            ;
                           191     ;                                 HW6 Motor Functions                        ;
                           192     ;                                 EE51                                           ;
                           193     ;                                 Anjian Wu                                  ;
                           194     ;                                                                            ;
                           195     ;                                 TA: Pipe-Mazo                              ;
                           196     ;                                                                            ;
                           197     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           198     ;                                 What's in here?
                           199     ;
                           200     ;                                   Code Segment
                           201     ;
                           202     ;   SetMotorSpeed  -   Sets the motor speed by changing PWM width
                           203     ;   GetMotorSpeed  -   Retrieves the abs motor speed 
                           204     ;   GetMotorDirection  -  retrieves motor angle (0 to 359 deg)
                           205     ;   SetLaser        -   Turns on the laser
                           206     ;   GetLaser        -   Checks if Laser is turned on or not
                           207     ;
                           208     ;
                           209     ;   MotorInit       - Initializes all motor vars, installs handler and sets up CS
                           210     ;   MotorHandler    -   Interrupt handler that outputs to PORTB with proper PWM
                           211     ;   SetMotor_GetArgs -   Used by MotorHandler to set motor in reverse
                           212     ;
                           213     ;
8086/87/88/186 MACRO ASSEMBLER    MOTORS                                                   17:09:42  11/22/;3  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           214     ;                                   Data Segment
                           215     ;
                           216     ;
                           217     ;   S           -   this is the PWM width value set by SetMotorSpeed
                           218     ;   S_PWM       -   This is the PWM counter that keeps track of where in the 
                           219     ;                   PWM phase each motor is in.
                           220     ;   S_PWM_STATUS-   This stores the status bit of each motor such that no 
                           221     ;                   repetitive PORTB writing is needed.
                           222     ;   SpeedStored -   Current ABS motor speed
                           223     ;   AngleStored -   Current robot moving angle
                           224     ;   LaserFlag   -   Status of laser
                           225     ;
                           226     ;                                 What's was last edit?
                           227     ;
                           228     ;                               Pseudo code -> 11-18-2013 - Anjian Wu
                           229     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           230     
                           231     ;Procedure:                     SetMotorSpeed
                           232     ;
                           233     ;Description:           This interrupt performs the holonomic calculations for each
                           234     ;                   respective motor by storing the speed and angle passed, as
                           235     ;                   well as calculating each motor's PWM length/counter such that
                           236     ;                   the overall speed and angle of the system matches the stored
                           237     ;                   ABS angle and ABS speed. Ultimately the function's stored
                           238     ;                   PWM values for each counter (aka S[0 to 2]) will be accessed
                           239     ;                   by the MotorHandler as the PWM width reference by which
                           240     ;                   each motor can be turned on or off.
                           241     ;           
                           242     ;                   
                           243     ;Operation:                     * Check if angle needs to be changed
                           244     ;                       * If not, then used previous angle
                           245     ;                   * Map the angle from + 32767 to - 32767
                           246     ;                     to +360 to -360 by dividing by ANGLE_NORM
                           247     ;                   * If angle is neg, then add 360 deg to get POS equivalent
                           248     ;                   * Store this angle
                           249     ;
                           250     ;                   * Check if speed needs to be changed
                           251     ;                       * If not, then used previous speed
                           252     ;                   * Store this speed. Divide speed by two.
                           253     ;                   * For i'th motor
                           254     ;                       *   Fx = MotorFTable[i] * speed * cos(angle). take only DX
                           255     ;                       *   Fy = MotorFTable[i + FY_OFFSET] * speed * sin(angle). tak
                                   e only DX
                           256     ;                       *   S[i] = SAL (FX + Fy), 2
                           257     ;                       *   increment counter
                           258     ;
                           259     ;Arguments:             AX     -> ABS speed to be set
                           260     ;                   BX     -> Angle to be set
                           261     ;
                           262     ;Return Values:         None.
                           263     ;
                           264     ;Result:            Possibly new values in S[0 to 2], speedstored, and anglestored
                           265     ;
                           266     ;Shared Variables:      S[0 to 2] (WRITE)
                           267     ;                   SpeedStored (WRITE/READ) 
8086/87/88/186 MACRO ASSEMBLER    MOTORS                                                   17:09:42  11/22/;3  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           268     ;                   AngleStored (WRITE/READ)
                           269     ;
                           270     ;Local Variables:       Angletemp -   temporary variable that stores angle values
                           271     ;                   Speedtemp -   temporary variable that stores angle values
                           272     ;                   counter   -   stores counter index
                           273     ;                   Fx        -   stores x component
                           274     ;                   Fy        -   stores y component
                           275     ;                   
                           276     ;
                           277     ;Global Variables:      None.
                           278     ;                                       
                           279     ;                                       
                           280     ;Input:                 none.
                           281     ;
                           282     ;Output:                none.
                           283     ;
                           284     ;Registers Used:        none.
                           285     ;
                           286     ;Stack Depth:           none.
                           287     ;
                           288     ;Known Bugs:            None.
                           289     ;
                           290     ;Data Structures:       None.
                           291     ;
                           292     ;Error Handling:        none.
                           293     ;
                           294     ;Algorithms:            none.
                           295     ;
                           296     ;Limitations:           None.
                           297     ;
                           298     ;
                           299     ;Author:                        Anjian Wu
                           300     ;History:                       11-18-2013: Pseudo code - Anjian Wu
                           301     ;------------------------------------------------------------------------------
                           302     
                           303     CGROUP  GROUP   CODE
                           304     DGROUP GROUP    DATA
                           305     
----                       306     CODE SEGMENT PUBLIC 'CODE'
                           307     
                           308             ASSUME  CS:CGROUP, DS:DGROUP
                           309             
                           310     ;External Procedures needed
                           311             EXTRN   XWORDLAT:NEAR      ; Used to enqueue key event/code
                           312             EXTRN   Cos_Table:NEAR      ; Used to enqueue key event/code
                           313             EXTRN   Sin_Table:NEAR      ; Used to enqueue key event/code
                           314     
0000                       315     SetMotorSpeed           PROC    NEAR
                           316                                         PUBLIC  SetMotorSpeed
                           317     
                           318     
0000                       319     SetMotorSpeedAngChk:
                           320     
0000 50                    321             PUSH    AX                                              ; Save Speed for late
                                   r
8086/87/88/186 MACRO ASSEMBLER    MOTORS                                                   17:09:42  11/22/;3  PAGE    7


LOC  OBJ                  LINE     SOURCE

0001 81FB0080              322         CMP     BX, NO_ANGLE_CHANGE     ; Do we need to change the angle?
0005 7502                  323         JNE     SetMotorAngleCalc       ; Yes
0007 7417                  324         JE      SetMotorSpeedChk        ; No, go to speed check
                           325     
0009                       326     SetMotorAngleCalc:
                           327     
0009 33D2                  328         XOR     DX, DX                  ; Always clear remainder
000B 8BC3                  329             MOV             AX, BX                                  ; Need to use AX spec
                                   ifically for IDIV
000D BB6801                330         MOV     BX, FULL_ANGLE          ; 
0010 99                    331         CWD                             ;
0011 F7FB                  332         IDIV    BX                          ; Take the MOD to Full angle
                           333     ; Angle now in DX since we want MOD
0013 83FA00                334             CMP             DX,     0                                       ; Is the Angl
                                   e Neg?
0016 7D04                  335             JGE             SetMotorAngleSave               ; Nope, store it
                           336             ;JL             SetMotorAngleNeg                ; Yes, it is ,need adjustment
                           337     
0018                       338     SetMotorAngleNeg:
0018 81C26801              339             ADD             DX, FULL_ANGLE                  ; Calc positive equivalent an
                                   gle
                           340             ;jmp    SetMotorAngleSave
001C                       341     SetMotorAngleSave:
001C 89160200       R      342             MOV             AngleStored, DX                 ; Store this abs angle
                           343         
0020                       344     SetMotorSpeedChk:
0020 58                    345         POP     AX                      ; Now retrieve the Speed Arg
0021 3DFFFF                346             CMP             AX, NO_SPEED_CHANGE     ; Are we changing the speed?
0024 7503                  347         JNE     SetMotorDiffSpeed       ; Yes
0026 EB0490                348         JMP     SetMotor_SpeedCalcInit  ; No, so Start speed calculations
                           349         
0029                       350     SetMotorDiffSpeed:  
0029 A30000         R      351         MOV     SpeedStored, AX         ; Store that speed
                           352         ;JMP    SetMotor_SpeedCalcInit
                           353         
                           354     ;-----------------------Motor Speed Math---------------------------------
                           355     
002C                       356     SetMotor_SpeedCalcInit:
002C 33DB                  357         XOR     BX, BX                  ; Clear loop counter
002E 8CC8                  358         MOV     AX, CS
0030 8EC0                  359         MOV     ES, AX                  ; Prepare to use XWORDLAT in code segment
                           360         
0032                       361     SetMotor_CalcLoop:  
0032 83FB03                362         CMP     BX, numOfmotors         ;
0035 7D2F                  363         JGE     SetMotor_DONE           ;
                           364         ;JL     SetMotor_GrabAllArgs    ;
                           365         
0037                       366     SetMotor_GrabAllArgs:     
0037 E82D00                367         CALL    SetMotor_GetArgs        ; Update COS, SIN, Fx, and Fy values
                           368                                         ; Passes ES, and CX
003A                       369     SetMotor_CalcX:     
                           370     
003A A10000         R      371         MOV     AX, SpeedStored         ; Grab current speed 
003D D1E8                  372         SHR     AX, 1                   ; Div Speed by two to get into range [0, 7FFFH]  
                                      
8086/87/88/186 MACRO ASSEMBLER    MOTORS                                                   17:09:42  11/22/;3  PAGE    8


LOC  OBJ                  LINE     SOURCE

003F F72E0400       R      373         IMUL    Fx                      ; Fx * SpeedStored. 
0043 8BC2                  374         MOV     AX, DX                  ; Truncated answer in DX
0045 F72E0800       R      375         IMUL    COS_VAL                 ; (Fx * SpeedStored)*COS(AngleStored)
                           376         ;SAL     DX, 2                   ; Truncated double sign bit
                           377         
0049 8BCA                  378         MOV     CX, DX;
                           379         ;MOV     S[BX], DH               ; Take only high byte of high word  
                           380         
004B                       381     SetMotor_CalcY:   
                           382      
004B A10000         R      383         MOV     AX, SpeedStored         ; Grab current speed 
004E D1E8                  384         SHR     AX, 1                   ; Div Speed by two to get into range [0, 7FFFH]  
                                      
0050 F72E0600       R      385         IMUL    Fy                      ; Fy * SpeedStored. 
0054 8BC2                  386         MOV     AX, DX                  ; Truncated answer in DX
0056 F72E0A00       R      387         IMUL    SIN_VAL                 ; (Fy * SpeedStored)*SIN(AngleStored)
                           388         ;SAL     DX, 2                  ; Truncated double sign bit
                           389         
005A 03CA                  390         ADD     CX, DX                  ;
                           391         
005C C1E102                392         SAL     CX, 2                   ;
                           393         
005F 88AF0E00       R      394         MOV     S[BX], CH               ; Fx * v * cos q + Fy * v * sin q
                           395     
                           396         ;ADD     S[BX], DH               ; Fx * v * cos q + Fy * v * sin q
                           397     
0063                       398     SetMotor_LoopDone:
                           399         
0063 43                    400         INC     BX                      ; Increment the counter
0064 EBCC                  401         JMP     SetMotor_CalcLoop       ; LOOP
                           402         
0066                       403     SetMotor_DONE:
                           404     
0066 C3                    405         RET
                           406     
                           407     SetMotorSpeed ENDP
                           408     
                           409     
                           410     
0067                       411     SetMotor_GetArgs                PROC    NEAR
                           412                             PUBLIC  SetMotor_GetArgs    ; Used by many functions
                           413     
0067 53                    414         PUSH    BX                      ; Save All Used Regs
0068 50                    415         PUSH    AX;
0069                       416     GetArgsInit:
                           417     
                           418     ; NOTE XWORDLAT does not change BX
                           419     
0069                       420     GetArgsFx:
                           421     ; Grab Fx    
0069 B87F01         R      422         MOV     AX, offset(MotorFTable) ; First grab CX'th Fx component
006C E80000         E      423         CALL    XWORDLAT                ; Fx component in AX
006F A30400         R      424         MOV     Fx, AX                  ; Save it
                           425         
0072                       426     GetArgsFy:
8086/87/88/186 MACRO ASSEMBLER    MOTORS                                                   17:09:42  11/22/;3  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           427     ; Grab Fy     
0072 B88501         R      428         MOV     AX, offset(MotorFTable) + 2*FY_OFFSET ; First grab CX'th Fy component
                           429                                                       ; Mul FY_OFFSET since this is
                           430                                                       ; WORD table and offset is in
                           431                                                       ; terms of 'elements'
                           432                                                       
0075 E80000         E      433         CALL    XWORDLAT                ; Fx component in AX
0078 A30600         R      434         MOV     Fy, AX                  ; Save it
                           435         
007B                       436     GetArgsCos:
007B 8B1E0200       R      437         MOV     BX, AngleStored         ; Grab stored angle, this is the proper element
                           438                                         ; index for look up
                           439     ; Grab Cos(AngleStored)    
007F B80000         E      440         MOV     AX, offset(Cos_Table)   ; Do COS operation table lookup
0082 E80000         E      441         CALL    XWORDLAT                ; COSVal component in AX
0085 A30800         R      442         MOV     COS_VAL, AX             ; Save it
                           443         
0088                       444     GetArgsSin:
                           445     ; Grab Sin(AngleStored)    
0088 B80000         E      446         MOV     AX, offset(Sin_Table)   ; Do SIN operation table lookup
008B E80000         E      447         CALL    XWORDLAT                ; SIN_VAL component in AX
008E A30A00         R      448         MOV     SIN_VAL, AX             ; Save it
                           449     
0091                       450     GetArgsDone:
                           451     
0091 58                    452         POP    AX;
0092 5B                    453         POP    BX                      ; Restore all used regs
                           454         
0093 C3                    455         RET
                           456         
                           457     SetMotor_GetArgs    ENDP
                           458     
                           459     
                           460     ;Procedure:                     GetMotorSpeed
                           461     ;
                           462     ;Description:           This function returns the value of the motor speed. This valu
                                   e
                           463     ;                   is exactly the speedstore shared variable. It will simply return
                           464     ;                   this value.
                           465     ;
                           466     ;                                    
                           467     ;                   
                           468     ;Operation:                     Simply Returns the speedstore value
                           469     ;
                           470     ;Arguments:             None.
                           471     ;
                           472     ;Return Values:         AX -> Speedstore
                           473     ;
                           474     ;Result:            Grabs the current motor speed for User.
                           475     ;
                           476     ;Shared Variables:      Speedstore (Read)
                           477     ;
                           478     ;Local Variables:       None.
                           479     ;                   
                           480     ;
8086/87/88/186 MACRO ASSEMBLER    MOTORS                                                   17:09:42  11/22/;3  PAGE   10


LOC  OBJ                  LINE     SOURCE

                           481     ;Global Variables:      None.
                           482     ;                                       
                           483     ;                                       
                           484     ;Input:                 None.
                           485     ;
                           486     ;Output:                None.
                           487     ;
                           488     ;Registers Used:        AX
                           489     ;
                           490     ;Stack Depth:           N/A
                           491     ;
                           492     ;Known Bugs:            None.
                           493     ;
                           494     ;Data Structures:       None.
                           495     ;
                           496     ;Error Handling:        None
                           497     ;
                           498     ;Algorithms:            None.
                           499     ;
                           500     ;Limitations:           None.
                           501     ;
                           502     ;
                           503     ;Author:                        Anjian Wu
                           504     ;History:                       11-18-2013: Pseudo code - Anjian Wu
                           505     ;------------------------------------------------------------------------------
                           506     
                           507     
0094                       508     GetMotorSpeed               PROC    NEAR
                           509     
0094 A10000         R      510         MOV     AX, SpeedStored;
0097 C3                    511         RET
                           512     
                           513     GetMotorSpeed ENDP
                           514     
                           515     ;Procedure:                     GetMotorDirection
                           516     ;
                           517     ;Description:           This function returns the value of the motor angle. This valu
                                   e
                           518     ;                   is exactly the anglestore shared variable. It will simply return
                           519     ;                   value MOD 360. The MOD 360 is for when anglestore = 360, of which
                           520     ;                   it is equivalent to angle of 0 degs anyways.
                           521     ;
                           522     ;                                    
                           523     ;                   
                           524     ;Operation:                     Simply Returns the anglestore MOD 360 deg value
                           525     ;
                           526     ;Arguments:             None.
                           527     ;
                           528     ;Return Values:         AX -> the angle to be returned, between 0 and 359 deg
                           529     ;
                           530     ;Result:            Grabs the current motor speed for User.
                           531     ;
                           532     ;Shared Variables:      anglestore (Read)
                           533     ;
                           534     ;Local Variables:       None.
8086/87/88/186 MACRO ASSEMBLER    MOTORS                                                   17:09:42  11/22/;3  PAGE   11


LOC  OBJ                  LINE     SOURCE

                           535     ;                   
                           536     ;
                           537     ;Global Variables:      None.
                           538     ;                                       
                           539     ;                                       
                           540     ;Input:                 None.
                           541     ;
                           542     ;Output:                None.
                           543     ;
                           544     ;Registers Used:        AX
                           545     ;
                           546     ;Stack Depth:           N/A
                           547     ;
                           548     ;Known Bugs:            None.
                           549     ;
                           550     ;Data Structures:       None.
                           551     ;
                           552     ;Error Handling:        None
                           553     ;
                           554     ;Algorithms:            None.
                           555     ;
                           556     ;Limitations:           None.
                           557     ;
                           558     ;
                           559     ;Author:                        Anjian Wu
                           560     ;History:                       11-18-2013: Pseudo code - Anjian Wu
                           561     ;------------------------------------------------------------------------------
                           562     
                           563     
0098                       564     GetMotorDirection                   PROC    NEAR
                           565     
0098 A10200         R      566         MOV     AX, AngleStored;
009B C3                    567         RET
                           568     
                           569     GetMotorDirection ENDP
                           570     
                           571     ;Procedure:                     SetLaser
                           572     ;
                           573     ;Description:           This function will turn the robot laser on or off depending
                           574     ;                   on the passed arg in AX. If AX is 0 then lazer is turned off.
                           575     ;                   Else it is turned on. Also will record laser status in LaserFlag.
                           576     ;
                           577     ;                                    
                           578     ;                   
                           579     ;Operation:                     * Compare arg to zero
                           580     ;                   * If zero then turn laser off by turning off bit 7 of port B 
                           581     ;                     of the 8255. Clear LaserFlag.
                           582     ;                   * If not then turn laser on by turning on bit 7 of port B 
                           583     ;                     of the 8255. Set LaserFlag.
                           584     ;                   
                           585     ;
                           586     ;Arguments:             arg -> AX -> on or off.
                           587     ;
                           588     ;Return Values:         None.
                           589     ;
8086/87/88/186 MACRO ASSEMBLER    MOTORS                                                   17:09:42  11/22/;3  PAGE   12


LOC  OBJ                  LINE     SOURCE

                           590     ;Result:            Grabs the current motor speed for User.
                           591     ;
                           592     ;Shared Variables:      LaserFlag (Write)
                           593     ;
                           594     ;Local Variables:       None.
                           595     ;                   
                           596     ;
                           597     ;Global Variables:      None.
                           598     ;                                       
                           599     ;                                       
                           600     ;Input:                 None.
                           601     ;
                           602     ;Output:                None.
                           603     ;
                           604     ;Registers Used:        AX
                           605     ;
                           606     ;Stack Depth:           N/A
                           607     ;
                           608     ;Known Bugs:            None.
                           609     ;
                           610     ;Data Structures:       None.
                           611     ;
                           612     ;Error Handling:        None
                           613     ;
                           614     ;Algorithms:            None.
                           615     ;
                           616     ;Limitations:           None.
                           617     ;
                           618     ;
                           619     ;Author:                        Anjian Wu
                           620     ;History:                       11-18-2013: Pseudo code - Anjian Wu
                           621     ;------------------------------------------------------------------------------
                           622     
009C                       623     SetLaser                    PROC    NEAR
                           624                         PUBLIC  SetLaser
                           625     
009C A30C00         R      626         MOV     LaserFlag, AX;
009F C3                    627         RET
                           628     
                           629     SetLaser ENDP
                           630     
                           631     ;Procedure:                     GetLaser
                           632     ;
                           633     ;Description:           This function returns the value of the LaserFlag. This value
                           634     ;                   is exactly the LaserFlag shared variable. It will simply return
                           635     ;                   this value. Zero value indicates FALSE, other wise TRUE.
                           636     ;                                    
                           637     ;                   
                           638     ;Operation:                     Simply Returns the LaserFlag value
                           639     ;
                           640     ;Arguments:             None.
                           641     ;
                           642     ;Return Values:         AX -> LaserFlag
                           643     ;
                           644     ;Result:            Grabs the current motor speed for User.
8086/87/88/186 MACRO ASSEMBLER    MOTORS                                                   17:09:42  11/22/;3  PAGE   13


LOC  OBJ                  LINE     SOURCE

                           645     ;
                           646     ;Shared Variables:      LaserFlag (Read)
                           647     ;
                           648     ;Local Variables:       None.
                           649     ;                   
                           650     ;
                           651     ;Global Variables:      None.
                           652     ;                                       
                           653     ;                                       
                           654     ;Input:                 None.
                           655     ;
                           656     ;Output:                None.
                           657     ;
                           658     ;Registers Used:        AX
                           659     ;
                           660     ;Stack Depth:           N/A
                           661     ;
                           662     ;Known Bugs:            None.
                           663     ;
                           664     ;Data Structures:       None.
                           665     ;
                           666     ;Error Handling:        None
                           667     ;
                           668     ;Algorithms:            None.
                           669     ;
                           670     ;Limitations:           None.
                           671     ;
                           672     ;
                           673     ;Author:                        Anjian Wu
                           674     ;History:                       11-18-2013: Pseudo code - Anjian Wu
                           675     ;------------------------------------------------------------------------------
                           676     
                           677     
00A0                       678     GetLaser                    PROC    NEAR
                           679     
00A0 A10C00         R      680         MOV     AX, LaserFlag;
00A3 C3                    681         RET
                           682     
                           683     GetLaser ENDP
                           684     
                           685     
                           686     ; MOTORINIT
                           687     ;
                           688     ; Description:       Does all initializations for Motors.
                           689     ;
                           690     ;                    Installs the MotorHandler for the timer0 interrupt at 
                           691     ;                    interrupt table index Tmr0Vec. ALso clears the 
                           692     ;                    LaserFlag, SpeedStored, S[0 to 2], AngleStored, S_PWM[0 to 2]
                           693     ;                    and S_PWM_STATUS[0 to 2].
                           694     ;
                           695     ;                    Also sets up the PORTB on the 8255 and proper chip select
                           696     ;
                           697     ; Operation:         First clear LaserFlag, SpeedStored, S[0 to 2], AngleStored, 
                           698     ;                    S_PWM[0 to 2] and S_PWM_STATUS[0 to 2].
                           699     ;
8086/87/88/186 MACRO ASSEMBLER    MOTORS                                                   17:09:42  11/22/;3  PAGE   14


LOC  OBJ                  LINE     SOURCE

                           700     ;                    Then writes the address of the MotorHandler to the
                           701     ;                    timer0 location in the interrupt vector table. Notice
                           702     ;                    need to multiple by 4 since table stores a CS and IP.
                           703     ;
                           704     ;                    Then set up chip select and PORTB control word values
                           705     ;                     
                           706     ;
                           707     ; Arguments:         None.
                           708     ; Return Value:      None.
                           709     ;
                           710     ; Local Variables:   AX - Used to temporarily store vector table offset for ES
                           711     ; 
                           712     ; Shared Variables:  LaserFlag (WRITE)
                           713     ;                    SpeedStored (WRITE)
                           714     ;                    AngleStored (WRITE)
                           715     ;                    S[0 to 2] (WRITE)
                           716     ;                    S_PWM[0 to 2] (WRITE)
                           717     ;                    S_PWM_STATUS[0 to 2] (WRITE)
                           718     ;
                           719     ; Global Variables:  None.
                           720     ;
                           721     ; Input:             None.
                           722     ; Output:            None.
                           723     ;
                           724     ; Error Handling:    None.
                           725     ;
                           726     ; Algorithms:        None.
                           727     ; Data Structures:   None.
                           728     ;
                           729     ; Registers Used:    AX, ES
                           730     ;
                           731     ; Stack Depth:       0 words
                           732     ;
                           733     ;Author:                        Anjian Wu
                           734     ;History:                       11-18-2013: Pseudo code - Anjian Wu
                           735     
                           736     ;-------------------------------------------------------------------------------
                           737     
00A4                       738     MOTORINIT          PROC    NEAR
                           739                        PUBLIC  MOTORINIT
                           740                        
00A4                       741     MOTORINITInitStart:
00A4 C7060C000000   R      742             MOV     LaserFlag, FALSE        ; Clear the LaserFlag to OFF
00AA C70600000000   R      743             MOV     SpeedStored, STOPPED_SPEED      ; Clear the SpeedStored to NOT moving
00B0 C70602000000   R      744             MOV     AngleStored, ZERO_ANGLE         ; Clear the AngleStored to 0 deg
00B6 C70604000000   R      745             MOV     Fx, 0                   ;
00BC C70606000000   R      746             MOV     Fy , 0                  ; 
00C2 C70608000000   R      747             MOV     COS_VAL, 0              ; 
00C8 C7060A000000   R      748             MOV     SIN_VAL, 0              ;  
00CE C60611000090   R      749             MOV     S_PWM, 0                ; Clear PWM counters (fresh PWM cycle)
                           750     
00D4 33DB                  751             XOR     BX, BX              ; Clear Counter
                           752             
00D6                       753     MOTORINITClearPWMvars:
                           754     
8086/87/88/186 MACRO ASSEMBLER    MOTORS                                                   17:09:42  11/22/;3  PAGE   15


LOC  OBJ                  LINE     SOURCE

00D6 83FB03                755             CMP     BX, numOfmotors     ; 
00D9 7D09                  756             JGE     MOTORINITInitVector ;
                           757             
00DB C6870E000090   R      758             MOV     S[BX], ZERO_SPEED_PWM   ; Clear PWM widths (not moving)
00E1 43                    759             INC     BX                      ; Increment counter/motor index
00E2 EBF2                  760             JMP     MOTORINITClearPWMvars; Loop until all entries are cleared
                           761             
00E4                       762     MOTORINITInitVector:
                           763            
00E4 33C0                  764             XOR     AX, AX          ;clear ES (interrupt vectors are in segment 0)
00E6 8EC0                  765             MOV     ES, AX
                           766                                     ;store the vector
00E8 26C70620000501 R      767             MOV     ES: WORD PTR (4 * Tmr0Vec), OFFSET(MotorHandler)
00EF 26C7062200---- R      768             MOV     ES: WORD PTR (4 * Tmr0Vec + 2), SEG(MotorHandler)
                           769     
00F6                       770     MOTORINITCS:
                           771     
00F6 BA8301                772             MOV     DX, _8255_CNTRL_REG
00F9 B88000                773             MOV     AX, _8255_CNTRL_VAL
00FC EE                    774             OUT     DX, AL
                           775        
00FD BA8101                776             MOV     DX, PORTB    ;Clear PortB
0100 B80000                777             MOV     AX, CLEAR
0103 EE                    778             OUT     DX, AL
                           779     
                           780     
0104 C3                    781             RET                     ;all done, return
                           782     
                           783     
                           784     MOTORINIT  ENDP
                           785     
                           786     ;Procedure:                     MotorHandler
                           787     ;
                           788     ;Description:           This function performs the PWM for the three motors. It does 
                                   this
                           789     ;                   by looping through each motor's S_PWM counter and determining
                           790     ;                   which phase in the PWM each motor is in. It will then set the
                           791     ;                   PORT B controls appropriately.
                           792     ;
                           793     ;                   Instead of writing to the PORt B each cycle, this function uses
                           794     ;                   stored status bits of each motor. Thus if the motor is already in
                                   side
                           795     ;                   the active phase of the PWM, there is no need to turn on the prop
                                   er
                           796     ;                   bits in PORTB since they are already ON.
                           797     ;                                    
                           798     ;                   
                           799     ;Operation:                     *   Loop while i < numOfMotors
                           800     ;                   *   Grab speed in i'th S[i]
                           801     ;                   *   If speed is NEG then
                           802     ;                       * take abs of speed and check if greater than S_PWM[i] counte
                                   r
                           803     ;                           *   greater than we are in active neg phase
                           804     ;                           *   thus check if we've set motors for this phase yet
                           805     ;                               * If not, update S_PWM_STATUS[i] for NEG
8086/87/88/186 MACRO ASSEMBLER    MOTORS                                                   17:09:42  11/22/;3  PAGE   16


LOC  OBJ                  LINE     SOURCE

                           806     ;                               * Call MotorHandlerNeg(i)
                           807     ;                       * else we are in inactive phase of PWM
                           808     ;                           *   thus check if we've set motors for this phase yet
                           809     ;                               * If not, update S_PWM_STATUS[i] for ZERO
                           810     ;                               * Call MotorHandlerZero(i)
                           811     ;                   *   Else speed is POS or ZERO and motor is FORWARDS
                           812     ;                       * check if speed greater than S_PWM[i] counter
                           813     ;                           *   greater than we are in active pos phase
                           814     ;                           *   thus check if we've set motors for this phase yet
                           815     ;                               * If not, update S_PWM_STATUS[i] for POS
                           816     ;                               * Call MotorHandlerPos(i)
                           817     ;                       * else we are in inactive phase of PWM
                           818     ;                           *   thus check if we've set motors for this phase yet
                           819     ;                               * If not, update S_PWM_STATUS[i] for ZERO
                           820     ;                               * Call MotorHandlerZero(i)
                           821     ;                   *   Update S_PWM(i) counter and i
                           822     ;                   *   Loop
                           823     ;
                           824     ;Arguments:             None.
                           825     ;
                           826     ;Return Values:         None.
                           827     ;
                           828     ;Result:            Sets each individual motor's PORTB bit depending on PWM phase of
                           829     ;                   eash motor.
                           830     ;
                           831     ;Shared Variables:      S[c](READ) - this is the PWM width value set by SetMotorSpeed
                           832     ;                   S_PWM[c](WRITE/READ) - This is the PWM counter that keeps track o
                                   f
                           833     ;                                          where in the PWM phase each motor is in.
                           834     ;                   S_PWM_STATUS[c](WRITE/READ) - This stores the status bit of each 
                                   motor
                           835     ;                                          such that no repetitive PORTB writing is n
                                   eeded.
                           836     ;
                           837     ;Local Variables:       c - counter
                           838     ;                   
                           839     ;
                           840     ;Global Variables:      None.
                           841     ;                                       
                           842     ;                                       
                           843     ;Input:                 None.
                           844     ;
                           845     ;Output:                Each motor via PORT B
                           846     ;
                           847     ;Registers Used:        None,
                           848     ;
                           849     ;Stack Depth:           N/A
                           850     ;
                           851     ;Known Bugs:            None.
                           852     ;
                           853     ;Data Structures:       None.
                           854     ;
                           855     ;Error Handling:        None
                           856     ;
                           857     ;Algorithms:            None.
8086/87/88/186 MACRO ASSEMBLER    MOTORS                                                   17:09:42  11/22/;3  PAGE   17


LOC  OBJ                  LINE     SOURCE

                           858     ;
                           859     ;Limitations:           None.
                           860     ;
                           861     ;
                           862     ;Author:                        Anjian Wu
                           863     ;History:                       11-18-2013: Pseudo code - Anjian Wu
                           864     ;------------------------------------------------------------------------------
                           865     ; DC movement reference table
                           866     ;_____________________________       
                           867     ;Port B Bit 1 |  Port B Bit 0
                           868     ;Port B Bit 3 |  Port B Bit 2 
                           869     ;Port B Bit 5 |  Port B Bit 4 
                           870     ;           0 | 0       no movement
                           871     ;           0 | 1       no movement
                           872     ;           1 | 0       forwards
                           873     ;           1 | 1       backwards
                           874     
0105                       875     MotorHandler  PROC    NEAR
                           876                   PUBLIC  MotorHandler
                           877                
0105 60                    878         PUSHA   ; Always Save all regs in interrupt
0106                       879     MotorHandInit:
                           880     
0106 33DB                  881         XOR     BX, BX              ; Start with motor 0/ clear counter
0108 C60612000090   R      882         MOV     PORTB_BUFF, RESET   ; Clear portB such that we only need to turn on
                           883                                     ; bits we want. (No AND MASKs needed)
010E                       884     MotorHandPWMChk:
010E 803E11007F     R      885         CMP     S_PWM, PWM_WIDTH_MAX    ; Is the current PWM counter outside PWN range?
0113 7606                  886         JBE     MotorHandLoop           ; Nope, proceed
                           887         ;JA    MotorHandPWMChkRESET     ; Yes it is, clear it.
0115                       888     MotorHandPWMChkRESET:
0115 C60611000090   R      889         MOV     S_PWM, 0                ;
                           890         ;JMP    MotorHandLoop           ;
                           891     
011B                       892     MotorHandLoop:
011B 83FB03                893         CMP     BX, numOfmotors             ; For each numOfmotors motors
011E 7D34                  894         JGE     LaserHandler                ; If each is done, proceed to Laser handling
                           895         ;JL     MotorHandPWMMux             ;
                           896         
0120                       897     MotorHandPWMMux:
0120 8A870E00       R      898         MOV     AL, S[BX]                   ; Grab counter ref value, it is used for many
                                    CMPs
0124 3C00                  899         CMP     AL, 0                       ; Bx'th motor going reverse or forwards?
0126 7C12                  900         JL      MotorHandPWM_NEG            ; Going reverse
                           901         ;JGE    MotorHandPWM_POS            ; Going forward/stopped
                           902         
0128                       903     MotorHandPWM_POS:
0128 38061100       R      904         CMP     S_PWM, AL                   ; Pwm counter over Active phase? (S_PWM < S[b
                                   x] ??)
012C 7D20                  905         JGE     MotorHandOFFPHASE           ; Motor should be in inactive phase
                           906         ;JL     MotorHandPOSPHASE           ; Motor should be active pos
012E                       907     MotorHandPOSPHASE:                      ;
012E 2E8A8F8B01     R      908         MOV     CL, CS:MOTORTABLE_POS[BX]
0133 080E1200       R      909         OR      PORTB_BUFF, CL              ; Turn on appropriate bits for FORWARD
0137 EB1890                910         JMP     MotorHandLoopEnd            ;
8086/87/88/186 MACRO ASSEMBLER    MOTORS                                                   17:09:42  11/22/;3  PAGE   18


LOC  OBJ                  LINE     SOURCE

                           911         
013A                       912     MotorHandPWM_NEG:
013A F6D8                  913         NEG     AL                          ; Get the absolute value (we already know to 
                                   go neg dir)
013C 38061100       R      914         CMP     S_PWM, AL               ; Pwm counter over Active phase? (S_PWM < S[bx] ?
                                   ?)
0140 7D0C                  915         JGE     MotorHandOFFPHASE           ; Motor should be in inactive phase
                           916         ;JL     MotorHandNEGPHASE           ; Motor should be active pos
                           917     
0142                       918     MotorHandNEGPHASE:
0142 2E8A8F8E01     R      919         MOV     CL, CS:MOTORTABLE_NEG[BX]
0147 080E1200       R      920         OR      PORTB_BUFF, CL              ; Turn on appropriate bits for FORWARD
014B EB0490                921         JMP     MotorHandLoopEnd    
                           922         ;   
014E                       923     MotorHandOFFPHASE:
                           924         ;OR      PORTB_BUFF, CS:BYTE PTR MOTORTABLE_ZERO[BX]; Turn on appropriate bits fo
                                   r FORWARD
014E EB0190                925         JMP     MotorHandLoopEnd 
                           926         
0151                       927     MotorHandLoopEnd:
0151 43                    928         INC     BX;
0152 EBC7                  929         JMP     MotorHandLoop
                           930      ;-------------------------------Laser Functions-----------------------------------
                           931        
0154                       932     LaserHandler:
0154 833E0C0000     R      933         CMP     LaserFlag, FALSE            ; Laser time?
0159 7503                  934         JNE     LaserHandlerON              ; pew pew
                           935         ;JE     LaserHandlerOFF             ; Turn off laser
                           936         
015B                       937     LaserHandlerOFF:
015B EB0790                938         JMP     MotorHandEOI                ; Don't turn on laser
                           939     
015E                       940     LaserHandlerON:
015E 800E12008090   R      941         OR      PORTB_BUFF, LASER_ON        ; Turn on appropriate bits for laser on
                           942         ;JMP     MotorHandEOI               ;        
                           943     
0164                       944     MotorHandEOI:
0164 FE061100       R      945         INC     S_PWM                      ; Update shared PWM counter
                           946     
0168 33D2                  947         XOR     DX, DX
016A BA8101                948         MOV     DX, PORTB                  ;Finally write out the calculates Port B value
                                   s
016D A01200         R      949         MOV     AL, PORTB_BUFF
0170 EE                    950         OUT     DX, AL
                           951     
0171 BA22FF                952         MOV     DX, INTCtrlrEOI             ;send the EOI to the interrupt controller
0174 B80800                953         MOV     AX, TimerEOI
0177 EE                    954         OUT     DX, AL
                           955         
0178 61                    956         POPA    ; Restore all regs (AX, BX, CX, and DX were used)
                           957         
0179 CF                    958         IRET
                           959         
                           960      MotorHandler ENDP
                           961     ;-------------------------------Stub Functions-----------------------------------
8086/87/88/186 MACRO ASSEMBLER    MOTORS                                                   17:09:42  11/22/;3  PAGE   19


LOC  OBJ                  LINE     SOURCE

017A                       962     GetTurretAngle      PROC    NEAR
                           963                         PUBLIC  GetTurretAngle
                           964                         
017A C3                    965         RET
                           966         
                           967     GetTurretAngle ENDP
                           968     
017B                       969     SetTurretAngle      PROC    NEAR
                           970                         PUBLIC  SetTurretAngle
                           971                         
017B C3                    972         RET
                           973         
                           974     SetTurretAngle ENDP
                           975     
017C                       976     SetRelTurretAngle      PROC    NEAR
                           977                             PUBLIC  SetRelTurretAngle
                           978                         
017C C3                    979         RET
                           980         
                           981     SetRelTurretAngle ENDP
                           982     
017D                       983     SetTurretElevation      PROC    NEAR
                           984                         PUBLIC  SetTurretElevation
                           985                         
017D C3                    986         RET
                           987         
                           988     SetTurretElevation ENDP
                           989     
017E                       990      GetTurretElevation      PROC    NEAR
                           991                         PUBLIC  GetTurretElevation
                           992                         
017E C3                    993         RET
                           994         
                           995     GetTurretElevation ENDP
                           996     
                           997     ; MotorFTables (F1 to F3)
                           998     ;
                           999     ; Description:      This table contains all the X and Y direction vector
                          1000     ;                   components for the Holonomic motion. They are taken from 
                          1001     ;                   Glenn's handout :)
                          1002     ;
                          1003     ; Author:           Anjian Wu
                          1004     ; Last Modified:    11/15/2013
                          1005     
                          1006     
017F                      1007     MotorFTable         LABEL       WORD
                          1008                     PUBLIC  MotorFTable
                          1009                                         
017F FF7F                 1010             DW              Fx1     ;Fx component for Motor 1
0181 00C0                 1011             DW              Fx2         ;Fx component for Motor 2   
0183 00C0                 1012             DW              Fx3         ;Fx component for Motor 3   
                          1013             
0185 0000                 1014             DW              Fy1     ;Fy component for Motor 1
0187 2791                 1015             DW              Fy2         ;Fy component for Motor 2   
0189 D96E                 1016             DW              Fy3         ;Fy component for Motor 3   
8086/87/88/186 MACRO ASSEMBLER    MOTORS                                                   17:09:42  11/22/;3  PAGE   20


LOC  OBJ                  LINE     SOURCE

                          1017             
                          1018     
                          1019     ; MOTORTABLE_POS
                          1020     ;
                          1021     ; Description:      This table contains all the MASK values for OR mask
                          1022     ;                   such that when masked with PORTB bits, it will set
                          1023     ;                   the (i+1)'th motor into Positive rotation.
                          1024     ;
                          1025     ; Author:           Anjian Wu
                          1026     ; Last Modified:    11/18/2013
                          1027     
                          1028     
018B                      1029     MOTORTABLE_POS      LABEL       BYTE
                          1030                         PUBLIC  MOTORTABLE_POS
                          1031                                         
018B 02                   1032             DB              FORWARD_M1      ;MASK FORWARD for Motor 1
018C 08                   1033             DB              FORWARD_M2      ;MASK FORWARD for Motor 2
018D 20                   1034             DB              FORWARD_M3      ;MASK FORWARD for Motor 3
                          1035     
                          1036     
                          1037     ; MOTORTABLE_NEG
                          1038     ;
                          1039     ; Description:      This table contains all the MASK values for OR mask
                          1040     ;                   such that when masked with PORTB bits, it will set
                          1041     ;                   the (i+1)'th motor into NEGATIVE rotation.
                          1042     ;
                          1043     ; Author:           Anjian Wu
                          1044     ; Last Modified:    11/18/2013
                          1045     
                          1046     
018E                      1047     MOTORTABLE_NEG      LABEL       BYTE
                          1048                         PUBLIC  MOTORTABLE_NEG
                          1049                                         
018E 03                   1050             DB              BACKWARD_M1     ;MASK BACKWARD for Motor 1
018F 0C                   1051             DB              BACKWARD_M2     ;MASK BACKWARD for Motor 2
0190 30                   1052             DB              BACKWARD_M3     ;MASK BACKWARD for Motor 3
                          1053     
                          1054     
                          1055     ; MOTORTABLE_ZERO
                          1056     ;
                          1057     ; Description:      This table contains all the MASK values for OR mask
                          1058     ;                   such that when masked with PORTB bits, it will set
                          1059     ;                   the (i+1)'th motor into ZERO rotation.
                          1060     ;
                          1061     ; Author:           Anjian Wu
                          1062     ; Last Modified:    11/18/2013
                          1063     
                          1064     
0191                      1065     MOTORTABLE_ZERO     LABEL       BYTE
                          1066                         PUBLIC  MOTORTABLE_ZERO
                          1067                                         
0191 FD                   1068             DB              STOP_M1         ;MASK STOP for Motor 1
0192 F7                   1069             DB              STOP_M2         ;MASK STOP for Motor 2
0193 DF                   1070             DB              STOP_M3         ;MASK STOP for Motor 3
                          1071     
8086/87/88/186 MACRO ASSEMBLER    MOTORS                                                   17:09:42  11/22/;3  PAGE   21


LOC  OBJ                  LINE     SOURCE

                          1072     
                          1073     
                          1074                                     
----                      1075     CODE    ENDS
                          1076         
----                      1077     DATA    SEGMENT PUBLIC  'DATA'
                          1078     
                          1079     
0000 ????                 1080         SpeedStored     DW  ?     ;Flag to show that a Key was debounced recently
                          1081                                                
0002 ????                 1082         AngleStored     DW  ?     ;Debounce count for single key press
                          1083        
0004 ????                 1084         Fx              DW  ?     ;Debounce count for single key press
0006 ????                 1085         Fy              DW  ?     ;Debounce count for single key press
0008 ????                 1086         COS_VAL         DW  ?     ;Debounce count for single key press
000A ????                 1087         SIN_VAL         DW  ?     ;Debounce count for single key press
                          1088     
                          1089     
000C ????                 1090         LaserFlag       DW  ?     ;Debounce count for auto-repeat key press
                          1091         
000E (3                   1092         S           DB          numOfMotors DUP     (?) ; Motor speed array (essentially 
                                   PWM width)
     ??
     )
                          1093     
0011 ??                   1094         S_PWM   DB      ? ; Current motor pulse width counter
                          1095         
0012 ??                   1096         PORTB_BUFF      DB  ?     ; Buffer for PORT B values (gets masked a lot)
                          1097     
                          1098             
----                      1099     DATA    ENDS
                          1100     
                          1101             END 

ASSEMBLY COMPLETE, NO ERRORS FOUND
