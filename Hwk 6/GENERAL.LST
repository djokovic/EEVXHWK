8086/87/88/186 MACRO ASSEMBLER    GENERAL                                                  19:55:30  11/24/;3  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE GENERAL
OBJECT MODULE PLACED IN GENERAL.OBJ
ASSEMBLER INVOKED BY:  C:\UTIL\ASM86.EXE GENERAL.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1     NAME        general
                             2     
                             3 +1  $INCLUDE(general.inc);
                      =1     4     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1     5     ;                                                                               ;
                      =1     6     ;                                  General.INC                                  ;
                      =1     7     ;                               General Constants                           ;
                      =1     8     ;                                 Include File                              ;
                      =1     9     ;                                                                           ;
                      =1    10     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    11     
                      =1    12     ; This file contains general operations
                      =1    13     ;
                      =1    14     ; Revision History:
                      =1    15     ;    11/02/2013                 Created - Anjian Wu
                      =1    16     ;    11/23/2013                 Added WORD_LOOKUP_ADJUST - Anjian Wu
                      =1    17     
                      =1    18     
                      =1    19     ; General Constants
                      =1    20     
  0000                =1    21     ASCII_NULL      EQU     0           ;
  0004                =1    22     nibble_size     EQU     4           ;
  0008                =1    23     BYTE_size       EQU     8           ;
  0010                =1    24     WORD_size       EQU     16          ;
                      =1    25     
  0001                =1    26     TRUE            EQU     1           ;
  0000                =1    27     FALSE           EQU     0           ;
                      =1    28     
  0000                =1    29     RESET           EQU     0           ; General Value for Resetting something
                      =1    30     
  0000                =1    31     CLEAR           EQU     0           ;
                      =1    32     
  0001                =1    33     WORD_LOOKUP_ADJUST  EQU    1           ; Two bytes in one word -> SHL by 2 
                      =1    34     
                      =1    35     ; General Definitions for Main Loops
                      =1    36     
  0001                =1    37     FIRST_RESERVED_VEC      EQU     1           ;reserve vectors 1-3
  0003                =1    38     LAST_RESERVED_VEC       EQU     3       ;
  0100                =1    39     NUM_IRQ_VECTORS     EQU 256     ;number of interrupt vectors
                      =1    40     
                            41     
                            42     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            43     ;                                                                            ;
                            44     ;                                 General Functions                          ;
                            45     ;                                 EE51                                           ;
                            46     ;                                 Anjian Wu                                  ;
                            47     ;                                                                            ;
                            48     ;                                 TA: Pipe-Mazo                              ;
                            49     ;                                                                            ;
                            50     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8086/87/88/186 MACRO ASSEMBLER    GENERAL                                                  19:55:30  11/24/;3  PAGE    2


LOC  OBJ                  LINE     SOURCE

                            51     ;                                 What's in here?
                            52     ;
                            53     ;                                   Code Segment
                            54     ;
                            55     ;   XWORDLAT  -   Sets the motor speed by changing PWM width
                            56     ;
                            57     ;
                            58     ;                                 What's was last edit?
                            59     ;
                            60     ;                               Pseudo code -> 11-18-2013 - Anjian Wu
                            61     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            62     
                            63     ;Procedure:                     XWORDLAT
                            64     ;
                            65     ;Description:           This function performs the WORD equivalent of XLAT instr.
                            66     ;                   It takes arguments AX as the offset of the Table, BX as the
                            67     ;                   element pointer, and ES as the location of the where the segment
                            68     ;                   should be.
                            69     ;           
                            70     ;                   It will then return the table lookup value in AX.
                            71     ;                   
                            72     ;Operation:                     * Adjust element index for WORD look up
                            73     ;                   * Add in the absolute offset of the table
                            74     ;                   * Grab the value and store word in AX. Then return that.
                            75     ;
                            76     ;Arguments:             AX     -> Offset of WORD look up table
                            77     ;                   BX     -> Element Pointer
                            78     ;                   ES     -> Which segment, CS or DS
                            79     ;
                            80     ;Return Values:         AX     -> The element grabbed.
                            81     ;
                            82     ;
                            83     ;Shared Variables:      None.
                            84     ;
                            85     ;Local Variables:       BX -   absolute pointer for table look up
                            86     ;                   
                            87     ;Global Variables:      None.
                            88     ;                                                               
                            89     ;Input:                 none.
                            90     ;
                            91     ;Output:                none.
                            92     ;
                            93     ;Registers Used:        none.
                            94     ;
                            95     ;Stack Depth:           none.
                            96     ;
                            97     ;Known Bugs:            None.
                            98     ;
                            99     ;Data Structures:       None.
                           100     ;
                           101     ;Error Handling:        none.
                           102     ;
                           103     ;Algorithms:            none.
                           104     ;
                           105     ;Limitations:           None.
8086/87/88/186 MACRO ASSEMBLER    GENERAL                                                  19:55:30  11/24/;3  PAGE    3


LOC  OBJ                  LINE     SOURCE

                           106     ;
                           107     ;
                           108     ;Author:                        Anjian Wu
                           109     ;History:                       11-22-2013: Created - Anjian Wu
                           110     ;------------------------------------------------------------------------------
                           111     
                           112     CGROUP  GROUP   CODE
                           113     DGROUP GROUP    DATA
                           114     
----                       115     CODE SEGMENT PUBLIC 'CODE'
                           116     
                           117             ASSUME  CS:CGROUP, DS:DGROUP
                           118     
0000                       119     XWORDLAT                PROC    NEAR
                           120                                     PUBLIC  XWORDLAT    ; Used by many functions
                           121     
                           122     
                           123         
0000 53                    124         PUSH    BX;
0001                       125     XWORDLATBODY:    
0001 D1E3                  126         SHL     BX, WORD_LOOKUP_ADJUST  ; Adjust relative pointer for WORD entries
0003 03D8                  127         ADD     BX, AX                  ; Grab absolute address by adding offset
0005 268B07                128         MOV     AX, ES:[BX]             ; Grab the word from table
                           129         
0008 5B                    130         POP     BX;
                           131         
0009 C3                    132         RET
                           133         
                           134     XWORDLAT ENDP
                           135     
                           136                                     
----                       137     CODE    ENDS
                           138         
----                       139     DATA    SEGMENT PUBLIC  'DATA'
                           140     
                           141     ; Empty for now
                           142             
----                       143     DATA    ENDS
                           144     
                           145             END 

ASSEMBLY COMPLETE, NO ERRORS FOUND
