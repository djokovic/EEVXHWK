8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE DISPLAY
OBJECT MODULE PLACED IN DISPLAY.OBJ
ASSEMBLER INVOKED BY:  C:\5XTOOLS\ASM86.EXE DISPLAY.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1     NAME        Display
                             2     
                             3 +1  $INCLUDE(display.inc);
                      =1     4     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1     5     ;                                                                               ;
                      =1     6     ;                                  Display.INC                                  ;
                      =1     7     ;                               Display Constants                           ;
                      =1     8     ;                                 Include File                              ;
                      =1     9     ;                                                                           ;
                      =1    10     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    11     
                      =1    12     ; This file contains the definitions for the display functions
                      =1    13     ;
                      =1    14     ; Revision History:
                      =1    15     ;    11/02/2013                 Created - Anjian Wu
                      =1    16     ;    12/13/2013         Added Brightness constants - Anjian Wu
                      =1    17     
                      =1    18     
                      =1    19     
                      =1    20     ; General Definitions
                      =1    21     
  0008                =1    22     Display_SIZE    EQU     8               ; Size of chars that can fit in display
  0000                =1    23     SEGMENT_NULL    EQU     0               ; Byte value for Sseg pattern of ASCII_NULL
  0001                =1    24     SegPTRAdjust    EQU     1               ; Since we want WORD, we need to adjust 
                      =1    25      
                      =1    26     
                      =1    27     ; Display Addresses
                      =1    28     
  0000                =1    29     LEDDisplay      EQU     0               ; Display is hardware mapped to 0 - 7H
  0008                =1    30     LEDDisplay2     EQU     8               ; 14- seg also hardware mapped to 8h - 0DH
                      =1    31     
                      =1    32     
----                  =1    33     DISPLAYSTRUC     STRUC                      ;structure containing all display buffers
0000                  =1    34         buffer              DB          Display_SIZE        DUP     (?) ;pointer to the f
                                   unction to get switch 
----                  =1    35     DISPLAYSTRUC      ENDS
                      =1    36     
                      =1    37     ; Brightness Values
  000A                =1    38     DELTA_BRIGHT        EQU     10      ;
  0064                =1    39     MIN_BRIGHT          EQU     100     ;
  0000                =1    40     MAX_BRIGHT          EQU     0       ;
                      =1    41     
                      =1    42     ; Scroll Values
                      =1    43     
  02EE                =1    44     SCROLLRATE          EQU     750    ;
                            45 +1  $INCLUDE(general.inc);
                      =1    46     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    47     ;                                                                               ;
                      =1    48     ;                                  General.INC                                  ;
                      =1    49     ;                               General Constants                           ;
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    50     ;                                 Include File                              ;
                      =1    51     ;                                                                           ;
                      =1    52     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    53     
                      =1    54     ; This file contains general operations
                      =1    55     ;
                      =1    56     ; Revision History:
                      =1    57     ;    11/02/2013                 Created - Anjian Wu
                      =1    58     ;    11/23/2013                 Added WORD_LOOKUP_ADJUST - Anjian Wu
                      =1    59     ;    12/05/2014         Added FMS_ERROR key, ZERO, changed other keys to 
                      =1    60     ;                       ASCII based - Anjian
                      =1    61     
                      =1    62     
                      =1    63     ; General Constants
  000D                =1    64     CAR_RETURN              EQU             13                      ;
  0000                =1    65     ASCII_NULL      EQU     0           ;
  0001                =1    66     bit_size        EQU     1           ;
  0004                =1    67     nibble_size     EQU     4           ;
  0008                =1    68     BYTE_size       EQU     8           ;
  0010                =1    69     WORD_size       EQU     16          ;
  0000                =1    70     ArrayEmpty      EQU     0               ; Empty is set at 0 index
                      =1    71     
  0001                =1    72     TRUE            EQU     1           ;
  0000                =1    73     FALSE           EQU     0           ;
                      =1    74     
  0000                =1    75     RESET           EQU     0           ; General Value for Resetting something
                      =1    76     
  0000                =1    77     CLEAR           EQU     0           ;
                      =1    78     
  0000                =1    79     ZERO            EQU     0           ;
                      =1    80     
  000A                =1    81     DIGIT           EQU     10          ; A digit in base 10 
                      =1    82     
  0001                =1    83     WORD_LOOKUP_ADJUST  EQU    1           ; Two bytes in one word -> SHL by 1
                      =1    84     
                      =1    85     ; General Definitions for Main Loops
                      =1    86     
  0001                =1    87     FIRST_RESERVED_VEC      EQU     1           ;reserve vectors 1-3
  0003                =1    88     LAST_RESERVED_VEC       EQU     3       ;
  0100                =1    89     NUM_IRQ_VECTORS     EQU 256     ;number of interrupt vectors
                      =1    90     
                      =1    91     ; MainLoop Key Codes
                      =1    92     
  0000                =1    93     KEY_EVENT_KEY       EQU     0   ; Event code indicating key pressed
  0001                =1    94     SER_ERR_KEY         EQU     1   ; Event code indicating serial error
  0002                =1    95     RX_ENQUEUED_KEY     EQU     2   ; Event code indicating new rx value gotten
  0003                =1    96     MODEM_KEY           EQU     3   ; Event code indicating modem event
  0004                =1    97     FSM_ERROR           EQU     4   ; Error key showing FSM error
                      =1    98     
                      =1    99     ; General Addresses
                      =1   100     
  FF22                =1   101     INTCtrlReg          EQU     0FF22H  ;EOI interrupt controller       
                           102 +1  $INCLUDE(timer.inc);
                      =1   103     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   104     ;                                                                               ;
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   105     ;                                  Timer.INC                                    ;
                      =1   106     ;                              Timer Constants                              ;
                      =1   107     ;                                 Include File                              ;
                      =1   108     ;                                                                           ;
                      =1   109     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   110     
                      =1   111     ; This file contains the definitions for timers and their interupts
                      =1   112     ;
                      =1   113     ; Revision History:
                      =1   114     ;    11/23/2013                 Created - Anjian Wu
                      =1   115     ;    12/10/2013         Added Timer2 vals - Anjian Wu
                      =1   116     
                      =1   117     
                      =1   118                                             ; Timer Definitions
                      =1   119     
                      =1   120     ; Addresses
  FF56                =1   121     Tmr0Ctrl        EQU     0FF56H          ;address of Timer 0 Control Register
  FF52                =1   122     Tmr0MaxCntA     EQU     0FF52H          ;address of Timer 0 Max Count A Register
  FF50                =1   123     Tmr0Count       EQU     0FF50H          ;address of Timer 0 Count Register
                      =1   124     
  FF5E                =1   125     Tmr1Ctrl        EQU     0FF5EH          ;address of Timer 1 Control Register
  FF5A                =1   126     Tmr1MaxCntA     EQU     0FF5AH          ;address of Timer 1 Max Count A Register
  FF58                =1   127     Tmr1Count       EQU     0FF58H          ;address of Timer 1 Count Register
                      =1   128     
                      =1   129     
  FF66                =1   130     Tmr2Ctrl        EQU     0FF66H          ;address of Timer 2 Control Register
  FF62                =1   131     Tmr2MaxCnt      EQU     0FF62H          ;address of Timer 2 Max Count A Register
  FF60                =1   132     Tmr2Count       EQU     0FF60H          ;address of Timer 2 Count Register
                      =1   133     
                      =1   134     ; Control Register Values
  E001                =1   135     Tmr0CtrlVal     EQU     0E001H          ;value to write to Timer 0 Control Register
                      =1   136                                             ;1---------------  enable timer
                      =1   137                                             ;-1--------------  write to control
                      =1   138                                             ;--1-------------  enable interrupts
                      =1   139                                             ;----000000------  reserved
                      =1   140                                             ;---0------0-----  read only
                      =1   141                                             ;-----------0----  Retrigger
                      =1   142                                             ;------------0---  Prescaler
                      =1   143                                             ;-------------0--  external clock
                      =1   144                                             ;--------------0-  single counter mode
                      =1   145                                             ;---------------1  continuous mode
                      =1   146                                             
  E001                =1   147     Tmr1CtrlVal     EQU     0E001H          ;value to write to Timer 1 Control Register
                      =1   148                                             ;1---------------  enable timer
                      =1   149                                             ;-1--------------  write to control
                      =1   150                                             ;--1-------------  enable interrupts
                      =1   151                                             ;----000000------  reserved
                      =1   152                                             ;---0------0-----  read only
                      =1   153                                             ;-----------0----  Retrigger
                      =1   154                                             ;------------0---  Prescaler
                      =1   155                                             ;-------------0--  external clock
                      =1   156                                             ;--------------0-  single counter mode
                      =1   157                                             ;---------------1  continuous mode
                      =1   158     
  E001                =1   159     Tmr2CtrlVal     EQU     0E001H          ;value to write to Timer 2 Control Register
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE    4


LOC  OBJ                  LINE     SOURCE

                      =1   160                                             ;1---------------  enable timer
                      =1   161                                             ;-1--------------  write to control
                      =1   162                                             ;--1-------------  enable interrupts
                      =1   163                                             ;----0000000-----  reserved
                      =1   164                                             ;-----------0----  MaxCount
                      =1   165                                             ;------------000-  reserved
                      =1   166                                             ;---------------1  continuous mode
                      =1   167     ; Control Register Values
                      =1   168                                           
                      =1   169                                             ; Control Register Values
  08CA                =1   170     CTS_PER_MILSEC  EQU     2250            ; 18MHZ/(8 * 1KHz) ~ 2250 counts per MS
                      =1   171     
  07D0                =1   172     PRESCALE_2SEC   EQU     2000            ; 2 seconds = CTS_PER_MILSEC * 2000
                      =1   173     
  0008                =1   174     TimerEOI        EQU     00008H          ;Timer EOI command (same for all timers)
  8000                =1   175     NonSpecEOI      EQU     08000H          ;Non-specific EOI command
                      =1   176     
                      =1   177     
  0258                =1   178     COUNT_FOR_30HZ  EQU     600             ; 18,000,000 HZ/(8 * 30 Hz * PWM_WIDTH_MAX) 
                      =1   179                                             ; ~ 600 counts for 30 HZ of PWM
                      =1   180                                             
  00B1                =1   181     COUNT_FOR_100HZ EQU     177             ; 18,000,000 HZ/(8 * 100 Hz * PWM_WIDTH_MAX) 
                      =1   182                                             ; ~ 177 counts for 100 HZ of PWM             
                                                             
                      =1   183                                             
                      =1   184                                             ; NOTE THIS IS APPROXIMATE, Clock is actually
                                    a bit faster
                      =1   185                                             ; than 18 MHZ
                      =1   186     
                      =1   187     
                           188 +1  $INCLUDE(vectors.inc);
                      =1   189     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   190     ;                                                                               ;
                      =1   191     ;                                  Vector.INC                                   ;
                      =1   192     ;                              IVector Constants                            ;
                      =1   193     ;                                 Include File                              ;
                      =1   194     ;                                                                           ;
                      =1   195     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   196     
                      =1   197     ; This file contains the definitions for timers and their interupts
                      =1   198     ;
                      =1   199     ; Revision History:
                      =1   200     ;    11/23/2013                 Created - Anjian Wu
                      =1   201     ;    12/10/2013         Added Timer 2 info - Anjian Wu
                      =1   202     
                      =1   203                                             ; IVector Definitions
                      =1   204     
                      =1   205     ; Interrupt Vectors and their control values
  0008                =1   206     Tmr0Vec         EQU     8               ;interrupt vector for Timer 0
  0012                =1   207     Tmr1Vec         EQU     18              ;interrupt vector for Timer 1
  0013                =1   208     Tmr2Vec         EQU     19              ;interrupt vector for Timer 2
                      =1   209     
  FF32                =1   210     INTCtrlrCtrl    EQU     0FF32H          ;address of interrupt controller for timer
  FF22                =1   211     INTCtrlrEOI     EQU     0FF22H          ;address of interrupt controller EOI register
                      =1   212     
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE    5


LOC  OBJ                  LINE     SOURCE

  0001                =1   213     INTCtrlrCVal    EQU     00001H          ;set priority for timers to 1 and enable
                      =1   214                                             ;000000000000----  reserved
                      =1   215                                             ;------------0---  enable timer interrupt
                      =1   216                                             ;-------------001  timer priority
                           217     
                           218     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           219     ;                                                                            ;
                           220     ;                                 HW4 Display Functions                      ;
                           221     ;                                 EE51                                           ;
                           222     ;                                 Anjian Wu                                  ;
                           223     ;                                                                            ;
                           224     ;                                 TA: Pipe-Mazo                              ;
                           225     ;                                                                            ;
                           226     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           227     ;                                 What's in here?
                           228     ;
                           229     ;                                   Code Segment
                           230     ;
                           231     ;   Display   -     This is pass a string to be displayed. The string is at
                           232     ;                   ES:SI and is null terminated. 
                           233     ;
                           234     ;   DisplayNum  -   This function is passed a 16-bit signed value to be outputted
                           235     ;                   to the display. The number is in AX, with at most 5 digits
                           236     ;
                           237     ;   DisplayHex   -  This function is passed a 16-bit HEX value to be outputted
                           238     ;                   to the display. The number is in AX with at most 4 digits; 
                           239     ;
                           240     ;   DisplayHandlerInit - This installs the DisplayHandler into vector table
                           241     ;
                           242     ;   DisplayHandler - This is the interrupt function that multiplexes the display
                           243     ;                    by grabbing the next char value to be outputted.
                           244     ;
                           245     ;   DisplayBufferFill - This function clears the display array with all ASCII_NULL
                           246     ;
                           247     ;                                   Data Segment
                           248     ;
                           249     ;   DisplayArray(DISPLAYSTRUC)  - Where DisplayArray's buffer is. This is only for
                           250     ;                                 storing ASCII, which is then translated into seg.
                           251     ;                                 (Easier to debug DisplayHex and DisplayNum)
                           252     ;
                           253     ;   DHandlerVarLow(DISPLAYSTRUC)  - Where DisplayHandler's high byte buffer is stored
                                   ;
                           254     ;
                           255     ;   DHandlerVarHigh(DISPLAYSTRUC)  - Where DisplayHandler's low byte buffer is stored
                                   ;
                           256     ;
                           257     ;   digitchar (DW)                  - The shared Handler pointer to next digitchar
                           258     ;
                           259     ;                                 What's was last edit?
                           260     ;
                           261     ;                               11-02-2013 Pseudo code - Anjian Wu
                           262     ;                               11-08-2013 Initial Version - Anjian Wu
                           263     ;                               11-08-2013 Working 7 seg version - Anjian Wu
                           264     ;                               11-09-2013 Working 14 seg version - Anjian Wu
                           265     ;                   12-10-2013 Renamed Digit to DigitChar - Anjian Wu
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           266     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           267     
                           268     ;Procedure:                     Display
                           269     ;
                           270     ;Description:           This procedure will take the address of the string at ES:SI, 
                                   and
                           271     ;                   place that string into the Dhandler buffers. This display buffers
                           272     ;                   is shared with DisplayHandler.
                           273     ;
                           274     ;                   DHandlerVarHigh.buffer  - Stores upper byte of 14-seg code
                           275     ;                   DHandlerVarLow.buffer   - Stores lower byte of 14-seg code 
                           276     ;                   (Both buffer elements share same index)
                           277     ;
                           278     ;                   This function does this by first clearing BOTH buffers using the
                           279     ;                   DisplayBufferFill to fill up buffers with SEGMENT_NULL. This help
                                   s
                           280     ;                   avoid displaying left over chars from previous strings.
                           281     ;
                           282     ;                   The function will then loop grabbing the ASCII_CHAR from ES:SI, a
                                   nd
                           283     ;                   mapping the character to it's 14-segment code. The code is then s
                                   tored
                           284     ;                   into both the high and low buffer.
                           285     ;
                           286     ;                   If the loop hits a ASCII_NULL before the full Display_SIZE is rea
                                   ched,
                           287     ;                   the loop will terminate early. This is ok since we already cleare
                                   d the
                           288     ;                   buffers beforehand.
                           289     ;                   
                           290     ;                   
                           291     ;Operation:                     *   Call DisplayBufferFill(low byte buffer)
                           292     ;                   *   Call DisplayBufferFill(high byte buffer)
                           293     ;                   *   Clear Counter
                           294     ;                   *   Loop grabbing each char at ES:SI until counter hits Display_s
                                   ize
                           295     ;                       or ASCII_NULL was hit.
                           296     ;                       * Check counter
                           297     ;                       * Grab next char, is this ASCII_NULL? Yes -> terminate, no->k
                                   eep going
                           298     ;                       * Grab segtable offset, double char index to get absolute WOR
                                   D ptr
                           299     ;                       * Grab the WORD and split storing high and low byte into buff
                                   ers
                           300     ;                       * update counter and char (source) byte ptr.
                           301     ;
                           302     ;                   *   DONE
                           303     ;
                           304     ;Arguments:             SI   -> starting point of string ptr
                           305     ;                   ES   -> Can be either Data segment or Code segment
                           306     ;
                           307     ;Return Values:         None.
                           308     ;
                           309     ;Result:            New ASCII chars in the Dhander buffers.
                           310     ;
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           311     ;Shared Variables:      The buffer arrays is shared with DisplayHandler and DisplayBu
                                   ffFill
                           312     ;
                           313     ;Local Variables:       AX - Used as arg, store char, 
                           314     ;                   SI - Used to store ptr arg
                           315     ;                   BX - Used as ptr to access code segment
                           316     ;                   CX - Used as counter
                           317     ;                   
                           318     ;
                           319     ;Global Variables:      None.
                           320     ;                                       
                           321     ;                                       
                           322     ;Input:                 None.
                           323     ;
                           324     ;Output:                None.
                           325     ;
                           326     ;Registers Used:        AX, SI, BX, CX
                           327     ;
                           328     ;Stack Depth:           4 words
                           329     ;
                           330     ;Known Bugs:            None.
                           331     ;
                           332     ;Data Structures:       DHandlerVarLow, DHandlerVarHigh (8 byte arrays)
                           333     ;
                           334     ;Error Handling:        None.  
                           335     ;
                           336     ;Algorithms:            None.
                           337     ;
                           338     ;Limitations:           Stores new chars in the same array while DisplayHandler inter
                                   rupt 
                           339     ;                   is running which also grabbing the chars out of same array.
                           340     ;                   However it should not really affect user experience since
                           341     ;                   interrupts will be very fast.
                           342     ;
                           343     ;
                           344     ;Author:                        Anjian Wu
                           345     ;History:                       11-04-2013: Pseudo code - Anjian Wu
                           346     ;                               Working 7 seg version   - 11-08-2013 - Anjian Wu
                           347     ;                               Working 14 seg version  - 11-09-2013 - Anjian Wu
                           348     ;-------------------------------------------------------------------------------
                           349     
                           350     CGROUP  GROUP   CODE
                           351     DGROUP  GROUP   DATA
                           352     
----                       353     CODE    SEGMENT PUBLIC 'CODE'
                           354     
                           355     
                           356             ASSUME  CS:CGROUP, DS:DGROUP
                           357     
                           358     ;-------------------------------------------------------------------------------
                           359     
                           360             EXTRN   Dec2String:NEAR          ; Used to convert passed AX into dec ASCII
                           361             EXTRN   Hex2String:NEAR          ; Used to convert passed AX into hex ASCII
                           362             EXTRN   ASCIISegTable:NEAR          ; Used to convert passed AX into hex ASCI
                                   I
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           363     
                           364     
0000                       365     Display             PROC    NEAR
                           366                                     PUBLIC  Display
                           367                                     
                           368             
0000 51                    369             PUSH    CX;                     ; Store all Used Regs
0001 50                    370             PUSH    AX;
0002 53                    371             PUSH    BX;
                           372     
0003                       373     DisplayStrInit:
                           374     
0003 56                    375         PUSH    SI;                                         ; Save the original string po
                                   inter arg
0004                       376     DisplayClearLowbyte:
                           377     
0004 8D360800       R      378         LEA     SI, DHandlerVarLow.buffer   ; Grab address of lower byte seg buff
0008 B000                  379         MOV     AL, SEGMENT_NULL            ; Want to fill with SEGMENT_NULLs
000A E87C01                380         CALL    DisplayBufferFill           ; Fill display array with SEGMENT_NULLs
                           381     
                           382     
000D                       383     DisplayClearHighbyte:   
                           384     
000D 8D361000       R      385         LEA     SI, DHandlerVarHigh.buffer  ; Grab address of high byte seg buff
0011 B000                  386         MOV     AL, SEGMENT_NULL            ; Want to fill with SEGMENT_NULLs
0013 E87301                387         CALL    DisplayBufferFill           ; Fill display array with SEGMENT_NULLs
                           388             
0016                       389     DisplayBufferClearDone:  
                           390       
0016 5E                    391             POP     SI                              ; Get that original string pointer ba
                                   ck from stack
0017 B90000                392         MOV     CX, 0           ; Clear the counter
                           393                                
                           394     
001A                       395     DisplayStrLoop: ; Counter goes from 0 to DisplaySize - 1 or ends early if ASCII_NULL 
                                   found
                           396     
001A 83F908                397         CMP     CX, Display_SIZE    ; Is the counter maxed out?
001D 7D21                  398         JGE     DisplayStrDone      ; Yes, exit loop
                           399                                     ; No, continue loop
001F 33C0                  400             XOR             AX, AX                      ; Clear AX
                           401             
0021 268A04                402         MOV     AL, ES:[SI]         ; Grab char at address arg, put in AL
0024 3C00                  403         CMP     AL, ASCII_NULL      ; Is it ASCII_NULL? Cuz if so, end loop
0026 7418                  404         JE      DisplayStrDone      ; Yes, end loop
                           405         ;JNE    DisplayLoopSegtable ; No, continue
                           406         
0028                       407     DisplayLoopSegtable:
0028 BB0000         E      408         MOV     BX, OFFSET(ASCIISegTable);point into the table of seg table
002B D1E0                  409             SHL             AX, SegPTRAdjust            ;Get absolute value from table by
                                    mul 2^(SegPTRAdjust)
002D 03D8                  410             ADD             BX, AX                          ; Get absolute appropriate se
                                   g table addr
                           411         
002F 2E8B07                412         MOV         AX,     CS:[BX]                 ;Now seg val is in AX
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           413      
0032 8BD9                  414         MOV     BX, CX                  ; Move counter (which also acts as index) to
                           415                                         ; BX as data seg ptr.
                           416                                          
                           417                                          
0034 88870800       R      418         MOV     DHandlerVarLow.buffer[BX]   , AL   ; Split AX into low and high byte
0038 88A71000       R      419         MOV     DHandlerVarHigh.buffer[BX]  , AH  
                           420             
003C 41                    421         INC     CX                          ; Update Counter
003D 46                    422         INC     SI                          ; Update char pointer (Str source)
                           423         
003E EBDA                  424         JMP     DisplayStrLoop  ; 
                           425         
0040                       426     DisplayStrDone:
                           427     
0040 5B                    428             POP    BX;
0041 58                    429             POP    AX;
0042 59                    430             POP    CX               ;    Restore all used regs          
                           431             
0043 C3                    432         RET                     
                           433         
                           434     Display  ENDP 
                           435     
                           436     
                           437     
                           438     ;Procedure:                     DisplayNum
                           439     ;
                           440     ;
                           441     ;Description:           This procedure will take the value at AX, and convert that de
                                   cimal
                           442     ;                   value into a string placed inside DisplayArray (a buffer) and the
                                   n
                           443     ;                   finally call Display to convert the stored string of ASCII's.
                           444     ;
                           445     ;                   This buffer is not directly accessed by DisplayHandler, but is
                           446     ;                   used to convert to seg pattern code if passed to Display.
                           447     ;
                           448     ;                   First it will clear the display buffer with ASCII_NULLs with Disp
                                   layBufferFill,
                           449     ;                   call Dec2String, which already places the a passed value into 
                           450     ;                   the passed address accordingly into the display array. 
                           451     ;                   
                           452     ;                   The purpose of the separate Displayarray buffer is to help debugg
                                   ing
                           453     ;                   reasons, such that the user doesn't have to decode the segment bu
                                   ff.
                           454     ;
                           455     ;                   
                           456     ;                   
                           457     ;Operation:                     *   Load address of DisplayArray buffer 
                           458     ;                   *   Call DisplayBufferFill with ASCII-NULLs
                           459     ;                   *   Pass address and value to Dec2String
                           460     ;                   *   Prepare to pass ES:SI, by making ES = DS
                           461     ;                   *   Call Display
                           462     ;
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE   10


LOC  OBJ                  LINE     SOURCE

                           463     ;Arguments:             AX - Num to be displayed
                           464     ;
                           465     ;
                           466     ;Return Values:         None.
                           467     ;
                           468     ;Result:            New ASCII chars in the display array and in DHandler buffers
                           469     ;
                           470     ;Shared Variables:      DisplayArray buffer is  shared with Dec2String and Display
                           471     ;
                           472     ;Local Variables:       AX - Used as arg, store char, 
                           473     ;                   SI - Used to store ptr arg
                           474     ;                   ES - Used as ptr to pass data segmentp
                           475     ;                   DisplayArray.buffer - stores new ASCII string to be passed to Dis
                                   play
                           476     ;
                           477     ;Global Variables:      None.
                           478     ;                                       
                           479     ;                                       
                           480     ;Input:                 None.
                           481     ;
                           482     ;Output:                None.
                           483     ;
                           484     ;Registers Used:        AX, ES, SI, DS
                           485     ;
                           486     ;Stack Depth:           4 Words;
                           487     ;
                           488     ;Known Bugs:            None.
                           489     ;
                           490     ;Data Structures:       DisplayArray.buffer (8 byte buffer)
                           491     ;
                           492     ;Error Handling:        If passed decimal length is too large, then DisplayArray is n
                                   ot
                           493     ;                   places and errorflag is raised. NOTE THIS FEATURE IS INSIDE
                           494     ;                   DEC2STRING, thus the flags raised should also be passed back.
                           495     ;                   
                           496     ;
                           497     ;Algorithms:            None.
                           498     ;
                           499     ;Limitations:           Stores new chars (after calling Display) in the same array 
                           500     ;                   while DisplayHandler interrupt 
                           501     ;                   is running which also grabbing the chars out of same array.
                           502     ;                   However it should not really affect user experience since
                           503     ;                   interrupts will be very fast.
                           504     ;
                           505     ;
                           506     ;Author:                        Anjian Wu
                           507     ;History:                       11-04-2013: Pseudo code - Anjian Wu
                           508     ;                               Working 7 seg version   - 11-08-2013 - Anjian Wu
                           509     ;                               Working 14 seg version  - 11-09-2013 - Anjian Wu
                           510     ;-------------------------------------------------------------------------------
                           511     
                           512     
0044                       513     DisplayNum              PROC    NEAR
                           514                                     PUBLIC  DisplayNum
                           515                     
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE   11


LOC  OBJ                  LINE     SOURCE

                           516                     
0044 50                    517             PUSH    AX;                     Save all Used regs
0045 56                    518         PUSH    SI
0046 06                    519         PUSH    ES
                           520         
0047                       521     DisplayNumStrInit:
0047 50                    522         PUSH    AX                      ; DisplayBufferFill also uses AX as arg, so save 
                                   that
                           523         
0048 8D360000       R      524         LEA     SI, DisplayArray.buffer ; Grab address of display array buffer
004C B000                  525         MOV     AL, ASCII_NULL          ; Fill with ASCII_NULL
004E E83801                526         CALL    DisplayBufferFill       ; 
                           527         
0051 58                    528         POP     AX                      ; Restore the arg  
0052                       529     DisplayNumPlace:
                           530     
0052 E80000         E      531         CALL    Dec2String              ; Dec2String chars at DS:SI
                           532         
0055 8CD8                  533         MOV     AX, DS
0057 8EC0                  534         MOV     ES, AX                  ; Prepare to access DS for display
                           535             
0059 E8A4FF                536         CALL    Display                 ; Translate ES:SI aka. DS:SI into Seg code
                           537         
005C                       538     DisplayNumDONE:
                           539     
005C 07                    540             POP    ES
005D 5E                    541         POP    SI
005E 58                    542         POP    AX;                      Restore all used Regs
                           543     
005F C3                    544         RET                             
                           545         
                           546     DisplayNum  ENDP      
                           547     
                           548     ;Procedure:                     DisplayHex
                           549     ;
                           550     ;
                           551     ;Description:           This procedure will take the value at AX, and convert that he
                                   x
                           552     ;                   value into a string placed inside DisplayArray (a buffer) and the
                                   n
                           553     ;                   finally call Display to convert the stored string of ASCII's.
                           554     ;
                           555     ;                   This buffer is not directly accessed by DisplayHandler, but is
                           556     ;                   used to convert to seg pattern code if passed to Display.
                           557     ;
                           558     ;                   First it will clear the display buffer with ASCII_NULLs with Disp
                                   layBufferFill,
                           559     ;                   call Hex2String, which already places the a passed value into 
                           560     ;                   the passed address accordingly into the display array. 
                           561     ;                   
                           562     ;                   The purpose of the separate Displayarray buffer is for debugging
                           563     ;                   reasons, such that the user doesn't have to decode the segment bu
                                   ff.
                           564     ;
                           565     ;                   
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE   12


LOC  OBJ                  LINE     SOURCE

                           566     ;                   
                           567     ;Operation:                     *   Load address of DisplayArray buffer 
                           568     ;                   *   Call DisplayBufferFill with ASCII-NULLs
                           569     ;                   *   Pass address and value to Hex2String
                           570     ;                   *   Prepare to pass ES:SI, by making ES = DS
                           571     ;                   *   Call Display
                           572     ;
                           573     ;Arguments:             AX - Hex to be displayed
                           574     ;
                           575     ;
                           576     ;Return Values:         None.
                           577     ;
                           578     ;Result:            New ASCII chars in the display array and in DHandler buffers
                           579     ;
                           580     ;Shared Variables:      DisplayArray buffer is  shared with Dec2String and Display
                           581     ;
                           582     ;Local Variables:       AX - Used as arg, store char, 
                           583     ;                   SI - Used to store ptr arg
                           584     ;                   ES - Used as ptr to pass data segmentp
                           585     ;                   DisplayArray.buffer - stores new ASCII string to be passed to Dis
                                   play
                           586     ;
                           587     ;Global Variables:      None.
                           588     ;                                       
                           589     ;                                       
                           590     ;Input:                 None.
                           591     ;
                           592     ;Output:                None.
                           593     ;
                           594     ;Registers Used:        AX, ES, SI, DS
                           595     ;
                           596     ;Stack Depth:           4 Words;
                           597     ;
                           598     ;Known Bugs:            None.
                           599     ;
                           600     ;Data Structures:       DisplayArray.buffer (8 byte buffer)
                           601     ;
                           602     ;Error Handling:        If passed decimal length is too large, then DisplayArray is n
                                   ot
                           603     ;                   places and errorflag is raised. NOTE THIS FEATURE IS INSIDE
                           604     ;                   DEC2STRING, thus the flags raised should also be passed back.
                           605     ;                   
                           606     ;
                           607     ;Algorithms:            None.
                           608     ;
                           609     ;Limitations:           Stores new chars (after calling Display) in the same array 
                           610     ;                   while DisplayHandler interrupt 
                           611     ;                   is running which also grabbing the chars out of same array.
                           612     ;                   However it should not really affect user experience since
                           613     ;                   interrupts will be very fast.
                           614     ;
                           615     ;
                           616     ;Author:                        Anjian Wu
                           617     ;History:                       11-04-2013: Pseudo code - Anjian Wu
                           618     ;                               Working 7 seg version   - 11-08-2013 - Anjian Wu
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE   13


LOC  OBJ                  LINE     SOURCE

                           619     ;                               Working 14 seg version  - 11-09-2013 - Anjian Wu
                           620     ;-------------------------------------------------------------------------------
                           621     
                           622     
0060                       623     DisplayHex              PROC    NEAR
                           624                                     PUBLIC  DisplayHex
                           625                                     
0060 50                    626             PUSH    AX;                     Save all Used regs
0061 56                    627         PUSH    SI
0062 06                    628         PUSH    ES
                           629         
0063                       630     DisplayHexInit:
                           631     
0063 50                    632         PUSH    AX                       ; DisplayBufferFill also uses AX as arg, so save
                                    that
                           633         
0064 8D360000       R      634         LEA     SI, DisplayArray.buffer  ; Grab address of display array
0068 B000                  635         MOV     AL, ASCII_NULL           ;
006A E81C01                636         CALL    DisplayBufferFill        ; Fill display array with ASCII_NULLs
                           637         
006D 58                    638         POP     AX                       ;  Restore the ARG
                           639         
006E                       640     DisplayHexPlace:
                           641     
006E E80000         E      642         CALL    Hex2String              ; Hex2String chars at DS:SI, with AX
                           643         
0071 8CD8                  644         MOV     AX, DS
0073 8EC0                  645         MOV     ES, AX                  ; Prepare to access DS for display
                           646             
0075 E888FF                647         CALL    Display                 ; Translate ES:SI aka. DS:SI
0078                       648     DisplayhexDONE:
                           649     
0078 07                    650             POP    ES
0079 5E                    651         POP    SI
007A 58                    652         POP    AX;                      Restore all used Regs
                           653     
007B C3                    654         RET       
                           655              
                           656     DisplayHex  ENDP   
                           657     
                           658     ; DisplayHandlerInit
                           659     ;
                           660     ; Description:       Does all initializations for DispalyHandler.
                           661     ;
                           662     ;                    Installs the displayhandler for the timer0 interrupt at 
                           663     ;                    interrupt table index Tmr0Vec. ALso clears the digitchar
                           664     ;                    used to index the segment digitchar to be displayed in
                           665     ;                    in DisplayHandler.
                           666     ;
                           667     ; Operation:         *  First clear the digitchar to 0.
                           668     ;                                        *      Then calls DisplayBuffFill, passing S
                                   EG_NULLs to be filled
                           669     ;                                               for DHandlerVarHigh and DHandlerVarLo
                                   w buffers. That way
                           670     ;                                               the display will not output random st
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE   14


LOC  OBJ                  LINE     SOURCE

                                   uff initially.
                           671     ;                    *  Then writes the address of the displayhandler to the
                           672     ;                    *  imer0 location in the interrupt vector table. Notice
                           673     ;                       need to multiple by 4 since table stores a CS and IP.
                           674     ;                     
                           675     ;
                           676     ; Arguments:         None.
                           677     ; Return Value:      None.
                           678     ;
                           679     ; Local Variables:   AX - Used to temporarily store vector table offset for ES
                           680     ; 
                           681     ; Shared Variables:  digitchar (WORD) - Stores segment ptr for DisplayHandler
                           682     ;
                           683     ; Global Variables:  None.
                           684     ;
                           685     ; Input:             None.
                           686     ; Output:            None.
                           687     ;
                           688     ; Error Handling:    None.
                           689     ;
                           690     ; Algorithms:        None.
                           691     ; Data Structures:   None.
                           692     ;
                           693     ; Registers Used:    AX, ES
                           694     ;
                           695     ; Stack Depth:       0 words
                           696     ;
                           697     ;Author:                        Anjian Wu
                           698     ;History:                       11-04-2013: Pseudo code - Anjian Wu
                           699     ;                               Working 7 seg version   - 11-08-2013 - Anjian Wu
                           700     ;                               Working 14 seg version  - 11-09-2013 - Anjian Wu
                           701     ;                               Added buffer clearing   - 11-10-2013 - Anjian Wu
                           702     ;-------------------------------------------------------------------------------
                           703     
007C                       704     DisplayHandlerInit  PROC    NEAR
                           705                         PUBLIC  DisplayHandlerInit
                           706                         
                           707                         
                           708     
                           709     
007C C70618000000   R      710             MOV     digitchar, 0    ; Clear the digitchar counters
                           711                     
0082                       712     DisplayInitClearLowbyte:        ; Also important to clear buffer in the beginning
                           713     
0082 8D360800       R      714                     LEA     SI, DHandlerVarLow.buffer   ; Grab address of lower byte seg 
                                   buff
0086 B000                  715                     MOV     AL, SEGMENT_NULL            ; Want to fill with SEGMENT_NULLs
0088 E8FE00                716                     CALL    DisplayBufferFill           ; Fill display array with SEGMENT
                                   _NULLs
008B E81201                717             CALL    Scroll_Reset                ; Make sure scrolling starts with
                           718                                                 ; chars in original position before
                           719                                                 ; moving
008E C70622000000   R      720             MOV     ScrollFlag, FALSE           ; Turn scrolling OFF
                           721     
0094                       722     DisplayInitClearHighbyte:       
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE   15


LOC  OBJ                  LINE     SOURCE

                           723     
0094 8D361000       R      724                     LEA     SI, DHandlerVarHigh.buffer  ; Grab address of high byte seg b
                                   uff
0098 B000                  725                     MOV     AL, SEGMENT_NULL            ; Want to fill with SEGMENT_NULLs
009A E8EC00                726                     CALL    DisplayBufferFill           ; Fill display array with SEGMENT
                                   _NULLs
                           727             
009D                       728     DispalyBrightnessInit:
009D C7061C000000   R      729             MOV     brightnessCTR, 0                ; Reset counter
00A3 C7061A000000   R      730             MOV     brightnessSetting, MAX_BRIGHT   ; Initial State with highest brightne
                                   ss
                           731     
00A9                       732     DisplayInitVectorSetting:
                           733     
00A9 33C0                  734             XOR     AX, AX          ;clear ES (interrupt vectors are in segment 0)
00AB 8EC0                  735             MOV     ES, AX
                           736                                     ;store the vector
00AD 26C7064C00D300 R      737             MOV     ES: WORD PTR (4 * Tmr2Vec), OFFSET(DisplayHandler)
00B4 26C7064E00---- R      738             MOV     ES: WORD PTR (4 * Tmr2Vec + 2), SEG(DisplayHandler)
                           739     
                           740     
00BB C3                    741             RET                     ;all done, return
                           742     
                           743     
                           744     DisplayHandlerInit  ENDP
                           745     
                           746     
                           747                                     
00BC                       748     ScrollControl       PROC    NEAR
                           749                         PUBLIC  ScrollControl
                           750     
00BC 833E220001     R      751         CMP     ScrollFlag, TRUE   ; Is the flag already true?
00C1 7409                  752         JE      ScrollOFF          ; If so, switch it to false
                           753         ;JNE    ScrollON           ;
00C3                       754     ScrollON:   
00C3 C70622000100   R      755         MOV     ScrollFlag, TRUE   ; Else it is NOT true (ToggleHandler will
                           756                                    ; STOP immediately)
                           757         
00C9 EB0790                758         JMP     ScrollDone         ; In which we switch TO true
                           759         
00CC                       760     ScrollOFF:
00CC C70622000000   R      761         MOV     ScrollFlag, FALSE  ; Turn serial debug off
                           762         ;JMP    ScrollDone         ;
00D2                       763     ScrollDone:
                           764     
00D2 C3                    765         RET                             ;                    
                           766     
                           767     ScrollControl   ENDP
                           768     
                           769     ;Procedure:                     DisplayHandler
                           770     ;
                           771     ;
                           772     ;Description:           Does all necessary functions to display to 14-segment.
                           773     ;                   This procedure will grab the next counter index. It will then use
                           774     ;                   this to index for the next char to be output to the display. 
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE   16


LOC  OBJ                  LINE     SOURCE

                           775     ;
                           776     ;                   If the counter is beyond the number of characters available to th
                                   e display
                           777     ;                   the counter will reset back to 0. Thus the display is effectively
                           778     ;                   looping over all the chars as each interrupt comes.
                           779     ;
                           780     ;                   Since the counter value needs to be saved, I use a local variable
                                    
                           781     ;                   allocated in the data memory. Also since 14-seg requires two byte
                                    writes,
                           782     ;                   I have two Dhandler buffers for the HIGH and LOW byte array stora
                                   ge.
                           783     ;
                           784     ;                   
                           785     ;                   
                           786     ;Operation:                     *   Save all regs
                           787     ;                   *   Grab stored segment digitchar to be outputted, see if it is m
                                   axed out
                           788     ;                       * If so, then reset to 0 and keep going
                           789     ;                       * If not, then use it and keep going
                           790     ;                   *   Grab HIGH byte to AL and LOW byte to AH (This order matters)
                           791     ;                   *   Grab the I/O address for UPPER byte write for 14-seg
                           792     ;                   *   Use the digitchar as offset for I/O write location (ADD)
                           793     ;                   *   OUT the AL (HIGH BYTE), this MUST be first to be outputted.
                           794     ;                   *   Since LOW byte is in AH, just swap AH with AL.
                           795     ;                   *   Again OUT AL (LOW BYTE), and update digitchar++
                           796     ;                   *   Send appropriate EOI
                           797     ;
                           798     ;                   
                           799     ;Arguments:         digitchar - stores counter 
                           800     ;
                           801     ;Return Values:         digitchar - updated counter for next interrupt
                           802     ;
                           803     ;Result:            New ASCII char in the display. Updated counter value
                           804     ;
                           805     ;Shared Variables:      digitchar - shared with DispalyHandlerInit (just accessed onc
                                   e to reset)
                           806     ;                   DHandlerVarLow  (8 byte arrays) - Shared with Display
                           807     ;                   DHandlerVarHigh (8 byte arrays) - Shared with Display
                           808     ;
                           809     ;Local Variables:       AX - stores all seg pattern codes. Also stores EOI value
                           810     ;                   BX - stores counter and acts as seg ptr
                           811     ;                   DX - stores seg pat right before output. stores I/O offsets
                           812     ;
                           813     ;Global Variables:      None.
                           814     ;                                       
                           815     ;                                       
                           816     ;Input:                 None.
                           817     ;
                           818     ;Output:                New ASCII char in the display at next offset.
                           819     ;
                           820     ;Registers Used:        AX, BX, DX
                           821     ;
                           822     ;Stack Depth:           3 Words.
                           823     ;
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE   17


LOC  OBJ                  LINE     SOURCE

                           824     ;Known Bugs:            None.
                           825     ;
                           826     ;Data Structures:       DHandlerVarLow, DHandlerVarHigh (8 byte arrays)
                           827     ;
                           828     ;Error Handling:        None.
                           829     ;
                           830     ;Algorithms:            None.
                           831     ;
                           832     ;Limitations:           Outputs new chars in the same array Display might bechanging
                           833     ;
                           834     ;
                           835     ;Author:                        Anjian Wu
                           836     ;History:                       11-04-2013: Pseudo code - Anjian Wu
                           837     ;                               Working 7 seg version   - 11-08-2013 - Anjian Wu
                           838     ;                               Working 14 seg version  - 11-09-2013 - Anjian Wu
                           839     ;                   12-13-2013  -> Added Brightness Setting
                           840     ;-------------------------------------------------------------------------------
                           841     
                           842     
00D3                       843     DisplayHandler              PROC    NEAR
                           844                                             PUBLIC  DisplayHandler
                           845     
00D3 60                    846             PUSHA
                           847             
00D4                       848     DisplayScrollControl:
00D4 833E220001     R      849             CMP     ScrollFlag, TRUE         ;
00D9 7523                  850             JNE     DisplayBrightnessControl ; 
                           851             
00DB FF062000       R      852             INC     scrollcounter            ;
00DF 813E2000EE02   R      853             CMP     scrollcounter, SCROLLRATE;
00E5 7C17                  854             JL      DisplayBrightnessControl ;
                           855             ;JGE    DisplayScrollUpdate      ;
00E7                       856     DisplayScrollUpdate:
00E7 C70620000000   R      857             MOV     scrollcounter, 0         ;
00ED FF061E00       R      858             INC     scrollindex              ;
00F1 833E1E0008     R      859             CMP     scrollindex, Display_SIZE;
00F6 7C06                  860             JL      DisplayBrightnessControl ;
00F8 C7061E000000   R      861             MOV     scrollindex, 0           ;
                           862             
00FE                       863     DisplayBrightnessControl:
00FE A11C00         R      864             MOV     AX, brightnessCTR        ; Grab brightness counter
0101 3B061A00       R      865             CMP     AX, brightnessSetting    ; Has the display been dimmed long enough?
0105 7C3B                  866             JL      DisplayClearFirstChar    ; No, need to wait longer
                           867             ;JGE    DisplayHInit             ; Yes, so output the chars
                           868             
                           869     ;\/\/\/\/\/\/\/\/\/\/\/Regular DisplayHandler From Before (below)\/\/\/\/\/\/\/\/\/\/
                                   \/
0107                       870     DisplayHInit:
                           871     
0107 8B1E1800       R      872             MOV     BX, digitchar               ;get offset for current digitchar
010B 83FB08                873             CMP     BX, Display_SIZE            ;Is the offset too large?
010E 7C09                  874             JL      DisplayHUpdate              ;no it isn't keep going
                           875             ;JGE     DisplayDigitReset          ;yes it is, reset it
                           876     
0110                       877     DisplayDigitReset:
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE   18


LOC  OBJ                  LINE     SOURCE

                           878     
0110 BB0000                879             MOV    BX, 0                        ; Clear the digitchar index
0113 C7061C000000   R      880             MOV   brightnessCTR, 0              ; Clear brightness counter (in effect
                           881                                                 ; the display muxes all chars and takes
                           882     
0119                       883     DisplayHUpdate:                                 ; update the display
                           884     
0119 8BC3                  885             MOV     AX, BX                          ; Copy the digitchar index
011B 03061E00       R      886             ADD     AX, scrollindex                 ; Calc the scroll offset
011F B90800                887             MOV     CX, Display_SIZE                ; We need to WRAP around after Displa
                                   y_SIZE
0122 33D2                  888             XOR     DX, DX
0124 F7F1                  889             DIV     CX                              ; MOD(digitindex + scrollindex, Displ
                                   ay_SIZE)
                           890                                                     ; -> MOD is in DX
0126                       891     Check:                                               
0126 8A871000       R      892             MOV     AL, DHandlerVarHigh.buffer[BX]  ; Grab HIGH byte seg pat from buffer 
                                      
012A 8AA70800       R      893             MOV     AH, DHandlerVarLow.buffer[BX]   ; Grab LOW byte seg pat from buffer  
                                     
                           894     
012E 52                    895             PUSH    DX
012F 83C208                896             ADD     DX, LEDDisplay2                 ; ADD digitchar offset for display
0132 EE                    897             OUT     DX, AL                          ; output segment directly
                           898             
0133 5A                    899             POP     DX
0134 83C200                900             ADD     DX, LEDDisplay                          ; ADD digitchar offset for di
                                   splay
                           901             
0137 86C4                  902             XCHG    AL, AH                                          ; Only AL is allowed 
                                   for OUT-ing bytes 
                           903                                                 ; (also a nifty operation)
                           904                                                 
0139 EE                    905             OUT     DX, AL                      ;output segment directly
                           906                     
                           907     
                           908     
013A                       909     DisplayDigitUpdate:                         ;Update digitchar
                           910     
013A 43                    911             INC     BX                          ;update segment digitchar
                           912             
013B 891E1800       R      913             MOV     digitchar, BX                   ;save it for next time
                           914             
013F EB0F90                915             JMP     EndDisplayHandler           ;
                           916     ;\/\/\/\/\/\/\/\/\/\/\/Regular DisplayHandler From Before (above)\/\/\/\/\/\/\/\/\/\/
                                   \/
                           917     
0142                       918     DisplayClearFirstChar:                  ;done taking care displaying
                           919     
0142 FF061C00       R      920             INC     brightnessCTR           ;increment the brightness 
0146 32C0                  921             XOR     AL, AL                  ;
0148 BA0800                922             MOV     DX, LEDDisplay2         ; get the display address for UPPER seg pat  
                                    
014B EE                    923             OUT     DX, AL                  ; Clear first char
                           924     
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE   19


LOC  OBJ                  LINE     SOURCE

014C BA0000                925             MOV     DX, LEDDisplay          ;get the display address for LOW seg pat     
                                                                              
014F EE                    926             OUT     DX, AL                  ; Clear first char
                           927     
0150                       928     EndDisplayHandler:
                           929     
0150 BA22FF                930             MOV     DX, INTCtrlrEOI         ;send the EOI to the interrupt controller
0153 B80800                931             MOV     AX, TimerEOI
0156 EE                    932             OUT     DX, AL
                           933     
0157 61                    934             POPA
                           935     
0158 CF                    936             IRET                            ;and return (Event Handlers end with IRET not
                                    RET)
                           937     
                           938     
                           939     DisplayHandler       ENDP
                           940     
                           941     ;Procedure:                     Inc_Bright
                           942     ;
                           943     ;Description:           Determines which Serial error occurred at the chip,
                           944     ;                   and informs the user to the issue. Note this is
                           945     ;                   serial errors from Remote Serial Chip.
                           946     ;
                           947     ;Operation:         * Table offset = AX = Display_SIZE*AL + OFFSET(SerErrTable)
                           948     ;                   * Just store that into Error_Buff_PTR.
                           949     ;                
                           950     ;Arguments:             AL  -> Event Val
                           951     ;Return Values:         none.
                           952     ;Shared Variables:      Error_Buff_PTR (WRITE).
                           953     ;Local Variables:       AX  -> abs pointer address.
                           954     ;Global Variables:      None.                   
                           955     ;Input:                 None.
                           956     ;Output:                None.
                           957     ;Registers Used:        None.
                           958     ;Stack Depth:           none.
                           959     ;Known Bugs:            None.
                           960     ;Data Structures:       None.
                           961     ;Error Handling:        None.
                           962     ;Algorithms:            None.
                           963     ;Limitations:           Only displays error to user, does not fix the error.
                           964     ;Author:                        Anjian Wu
                           965     ;Revision History:
                           966     ;                   Edits by Anjian Wu:
                           967     ;                               12-06-2013 -> Initial Version
                           968     ;                   12-13-2013 -> Working and documentation
                           969     ;------------------------------------------------------------------------------
0159                       970     Inc_Bright      PROC    NEAR
                           971                     PUBLIC  Inc_Bright
                           972     
0159 A11A00         R      973             MOV     AX, brightnessSetting   ;  
015C 2D0A00                974             SUB     AX, DELTA_BRIGHT        ;
015F 3D0000                975             CMP     AX, MAX_BRIGHT          ;
0162 7E06                  976             JLE     Inc_BrightMax           ;
                           977             ;JL     Inc_BrightGoodToGo      ;
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE   20


LOC  OBJ                  LINE     SOURCE

                           978             
0164                       979     Inc_BrightGoodToGo:      
0164 A31A00         R      980             MOV     brightnessSetting, AX   ;
0167 EB0790                981             JMP     Inc_BrightDone          ;
016A                       982     Inc_BrightMax:
016A C7061A000000   R      983             MOV     brightnessSetting, MAX_BRIGHT;
                           984             
0170                       985     Inc_BrightDone:
                           986     
0170 C3                    987             RET
                           988         
                           989     Inc_Bright    ENDP   
                           990     
                           991     ;Procedure:                     Dec_Bright
                           992     ;
                           993     ;Description:           Determines which Serial error occurred at the chip,
                           994     ;                   and informs the user to the issue. Note this is
                           995     ;                   serial errors from Remote Serial Chip.
                           996     ;
                           997     ;Operation:         * Table offset = AX = Display_SIZE*AL + OFFSET(SerErrTable)
                           998     ;                   * Just store that into Error_Buff_PTR.
                           999     ;                
                          1000     ;Arguments:             AL  -> Event Val
                          1001     ;Return Values:         none.
                          1002     ;Shared Variables:      Error_Buff_PTR (WRITE).
                          1003     ;Local Variables:       AX  -> abs pointer address.
                          1004     ;Global Variables:      None.                   
                          1005     ;Input:                 None.
                          1006     ;Output:                None.
                          1007     ;Registers Used:        None.
                          1008     ;Stack Depth:           none.
                          1009     ;Known Bugs:            None.
                          1010     ;Data Structures:       None.
                          1011     ;Error Handling:        None.
                          1012     ;Algorithms:            None.
                          1013     ;Limitations:           Only displays error to user, does not fix the error.
                          1014     ;Author:                        Anjian Wu
                          1015     ;Revision History:
                          1016     ;                   Edits by Anjian Wu:
                          1017     ;                               12-06-2013 -> Initial Version
                          1018     ;                   12-13-2013 -> Working and documentation
                          1019     ;------------------------------------------------------------------------------
0171                      1020     Dec_Bright      PROC    NEAR
                          1021                     PUBLIC  Dec_Bright
                          1022     
0171 A11A00         R     1023             MOV     AX, brightnessSetting   ;  
0174 050A00               1024             ADD     AX, DELTA_BRIGHT        ;
0177 3D6400               1025             CMP     AX, MIN_BRIGHT          ;
017A 7D06                 1026             JGE     Dec_BrightMin           ;
                          1027             ;JL             Dec_BrightGoodToGo  ;
                          1028             
017C                      1029     Dec_BrightGoodToGo:      
017C A31A00         R     1030             MOV     brightnessSetting, AX   ;
017F EB0790               1031             JMP     Dec_BrightDone          ;
0182                      1032     Dec_BrightMin:
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE   21


LOC  OBJ                  LINE     SOURCE

0182 C7061A006400   R     1033             MOV     brightnessSetting, MIN_BRIGHT;
                          1034             
0188                      1035     Dec_BrightDone:
                          1036     
0188 C3                   1037             RET
                          1038         
                          1039     Dec_Bright    ENDP   
                          1040     ;Procedure:                     DisplayBufferFill
                          1041     ;
                          1042     ;
                          1043     ;Description:           This procedure will fill the any Display_SIZE byte buffer 
                          1044     ;                   with the PASSED arg value (AL).
                          1045     ;
                          1046     ;                   It does this by simply looping through 0 to Display_SIZE - 1
                          1047     ;                   and writing AL to each char in DS:SI
                          1048     ;
                          1049     ;                   This function is used often to empty a buffer.
                          1050     ;                   
                          1051     ;Operation:                     *   Reset counter
                          1052     ;                   *   Loop Display_SIZE times and fill each char with AL.
                          1053     ;                   *   Update counter and Data seg ptr (SI)
                          1054     ;                   *   DONE
                          1055     ;
                          1056     ;                   
                          1057     ;Arguments:         AL -    The char to be filled with
                          1058     ;                   DS:SI - Location of buffer to be filled
                          1059     ;
                          1060     ;Return Values:         None.
                          1061     ;
                          1062     ;Result:            ASCII_NULL empty DisplayArray
                          1063     ;
                          1064     ;Shared Variables:      This function may fill buffers used by DisplayNum, DusplayHex
                                   ,
                          1065     ;                   and Display. (DisplayArray, DHandler1, Dhandler2 Display_SIZE byt
                                   e buffers)
                          1066     ;
                          1067     ;Local Variables:       SI - Pointer to DS:SI's char
                          1068     ;                   CX - Counter
                          1069     ;
                          1070     ;Global Variables:      None.
                          1071     ;                                       
                          1072     ;                                       
                          1073     ;Input:                 None.
                          1074     ;
                          1075     ;Output:                None.
                          1076     ;
                          1077     ;Registers Used:        CX, SI, AL
                          1078     ;
                          1079     ;Stack Depth:           4 Words.
                          1080     ;
                          1081     ;Known Bugs:            None.
                          1082     ;
                          1083     ;Data Structures:       Display_SIZE sized buffers
                          1084     ;
                          1085     ;Error Handling:        None.
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE   22


LOC  OBJ                  LINE     SOURCE

                          1086     ;
                          1087     ;Algorithms:            None.
                          1088     ;
                          1089     ;Limitations:           Outputs new chars in the same array that DisplayHandler touch
                                   es.
                          1090     ;
                          1091     ;
                          1092     ;Author:                        Anjian Wu
                          1093     ;History:                       11-04-2013: Pseudo code - Anjian Wu
                          1094     ;                               Working 7 seg version   - 11-08-2013 - Anjian Wu
                          1095     ;                               Working 14 seg version  - 11-09-2013 - Anjian Wu
                          1096     ;-------------------------------------------------------------------------------
                          1097     
0189                      1098     DisplayBufferFill               PROC    NEAR
                          1099                                             PUBLIC  DisplayBufferFill
                          1100                                             
0189 51                   1101         PUSH    CX;             Save all Used Regs
018A 53                   1102         PUSH    BX;             Important since many functions use this
018B 50                   1103         PUSH    AX;
018C 56                   1104         PUSH    SI;
                          1105                                     
018D                      1106     DisplayClrInit:
                          1107     
                          1108     
018D B90000               1109         MOV     CX, 0           ; Clear the counter
                          1110                                 ; Counter goes from 0 to DisplaySize - 1
                          1111     
0190                      1112     DisplayClrLoop:
                          1113     
0190 83F908               1114         CMP     CX, Display_SIZE ; Is the counter maxed out?
0193 7D06                 1115         JGE     DisplayClrDone  ; Yes, exit loop
                          1116                                 ; No, continue loop
                          1117                                 
0195 8804                 1118         MOV     [SI] , AL       ; Fill that byte with ARG
                          1119             
0197 41                   1120         INC     CX              ; Update Counter
0198 46                   1121         INC     SI              ; Update Data seg ptr
                          1122         
0199 EBF5                 1123         JMP     DisplayClrLoop  ; 
                          1124         
019B                      1125     DisplayClrDone:
                          1126     
019B 5E                   1127         POP    SI;
019C 58                   1128         POP    AX;
019D 5B                   1129         POP    BX;
019E 59                   1130         POP    CX;              Restore all used regs
                          1131     
019F C3                   1132         RET                     
                          1133         
                          1134     DisplayBufferFill  ENDP   
                          1135             
                          1136     ;Procedure:                     Scroll_Reset
                          1137     ;
                          1138     ;Description:           Determines which Serial error occurred at the chip,
                          1139     ;                   and informs the user to the issue. Note this is
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE   23


LOC  OBJ                  LINE     SOURCE

                          1140     ;                   serial errors from Remote Serial Chip.
                          1141     ;
                          1142     ;Operation:         * Table offset = AX = Display_SIZE*AL + OFFSET(SerErrTable)
                          1143     ;                   * Just store that into Error_Buff_PTR.
                          1144     ;                
                          1145     ;Arguments:             AL  -> Event Val
                          1146     ;Return Values:         none.
                          1147     ;Shared Variables:      Error_Buff_PTR (WRITE).
                          1148     ;Local Variables:       AX  -> abs pointer address.
                          1149     ;Global Variables:      None.                   
                          1150     ;Input:                 None.
                          1151     ;Output:                None.
                          1152     ;Registers Used:        None.
                          1153     ;Stack Depth:           none.
                          1154     ;Known Bugs:            None.
                          1155     ;Data Structures:       None.
                          1156     ;Error Handling:        None.
                          1157     ;Algorithms:            None.
                          1158     ;Limitations:           Only displays error to user, does not fix the error.
                          1159     ;Author:                        Anjian Wu
                          1160     ;Revision History:
                          1161     ;                   Edits by Anjian Wu:
                          1162     ;                               12-06-2013 -> Initial Version
                          1163     ;                   12-13-2013 -> Working and documentation
                          1164     ;------------------------------------------------------------------------------
01A0                      1165     Scroll_Reset    PROC    NEAR
                          1166                     PUBLIC  Scroll_Reset
                          1167     
01A0 C7061E000000   R     1168             MOV     scrollindex, 0      ;
01A6 C70620000000   R     1169             MOV     scrollcounter, 0    ;
                          1170             
01AC C3                   1171             RET
                          1172         
                          1173     Scroll_Reset    ENDP
                          1174     
----                      1175     CODE    ENDS 
                          1176         
----                      1177     DATA    SEGMENT PUBLIC  'DATA'
                          1178     
                          1179     
0000 (8                   1180         DisplayArray       DISPLAYSTRUC <>      ;Where DisplayArray's buffer is. Use this
                                    only for
     ??
     )
                          1181                                                 ;storing ASCII so that debugging is easie
                                   r.
                          1182     
0008 (8                   1183         DHandlerVarLow       DISPLAYSTRUC <>      ;Where DisplayHandler's high byte buffe
                                   r is stored
     ??
     )
                          1184     
0010 (8                   1185         DHandlerVarHigh       DISPLAYSTRUC <>      ;Where DisplayHandler's low byte buffe
                                   r is stored
     ??
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  13:45:29  12/14/;3  PAGE   24


LOC  OBJ                  LINE     SOURCE

     )
                          1186     
0018 ????                 1187         digitchar               DW      ?           ;The shared Handler pointer to next d
                                   igitchar
                          1188         
001A ????                 1189         brightnessSetting       DW      ?       ;
                          1190         
001C ????                 1191         brightnessCTR           DW      ?       ;
                          1192         
001E ????                 1193         scrollindex         DW      ?           ; The current scrolling index 
                          1194         
0020 ????                 1195         scrollcounter       DW      ?           ; Counter to control scrolling speed
                          1196         
0022 ????                 1197         ScrollFlag          DW      ?
                          1198             
----                      1199     DATA    ENDS
                          1200     
                          1201             END 

ASSEMBLY COMPLETE, NO ERRORS FOUND
