8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE REMOTE
OBJECT MODULE PLACED IN REMOTE.OBJ
ASSEMBLER INVOKED BY:  C:\5XTOOLS\ASM86.EXE REMOTE.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1     NAME        Remote
                             2     
                             3 +1  $INCLUDE(remote.inc);
                      =1     4     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1     5     ;                                                                               ;
                      =1     6     ;                                  Remote.INC                                   ;
                      =1     7     ;                               Remote Constants                            ;
                      =1     8     ;                                 Include File                              ;
                      =1     9     ;                                                                           ;
                      =1    10     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    11     
                      =1    12     ; This file contains robot constants
                      =1    13     ;
                      =1    14     ; Revision History:
                      =1    15     ;    11/10/2013                 Created - Anjian Wu
                      =1    16     ;    12/11/2013                 Added PRESCALE - Anjian Wu
                      =1    17     ;    12/12/2013                 Updated numOfStatus - Anjian Wu
                      =1    18     
                      =1    19     ; General Constants
                      =1    20     
  03E8                =1    21     PRESCALE            EQU     1000    ; How many Millisec per change in display
                      =1    22                                         ; status?
  0000                =1    23     ACTION_LABEL       EQU     0       ;
  0001                =1    24     ACTION_VAL                 EQU     1       ;
  0002                =1    25     SPEED_LABEL        EQU     2       ;
  0004                =1    26     ANGLE_LABEL        EQU     4       ;
  0006                =1    27     ERROR_LABEL        EQU     6       ;
                      =1    28     
                      =1    29     ; Brightness Values
  01F4                =1    30     DELTA_BRIGHT        EQU     500    ;
  0064                =1    31     MIN_BRIGHT          EQU     100     ;
  C350                =1    32     MAX_BRIGHT          EQU     50000   ;
                      =1    33     
                      =1    34     ; Key Commands  
                      =1    35     
                      =1    36     
  0007                =1    37     CMD_LENGTH          EQU     7       ; Standard FIXED CMD length
                      =1    38     
                      =1    39     ; Displaying Constants
                      =1    40     
  000A                =1    41     numOfStatus         EQU     10       ;
                      =1    42     
                      =1    43     
                      =1    44     ;FSM States Definitions
                      =1    45     
  0000                =1    46     ST_INITIAL          EQU     0   ;Start state
  0001                =1    47     ST_SPEED        EQU     1   ;Set Abs Speed: wait for digit or '+'
  0002                =1    48     ST_DIR          EQU     2   ;Set Abs Speed: wait for digit
  0003                =1    49     ST_ROBOT        EQU     3   ; Grab Robot Error string
                      =1    50     
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    51     ;Token offsets
  0000                =1    52     TOKEN_S         EQU     0; - Set Speed
  0001                =1    53     TOKEN_D         EQU     1;- Set Dir
  0002                =1    54     TOKEN_R         EQU     2;- Set Robot Error
  0003                =1    55     TOKEN_NUM       EQU     3;- A digit
  0004                =1    56     TOKEN_END       EQU     4; - Return
  0005                =1    57     TOKEN_OTHER     EQU     5; Bad char
                      =1    58     
  0006                =1    59     NUM_TOKEN_TYPES EQU     TOKEN_OTHER + 1; TOKEN_OTHER is always the last Token
                      =1    60     
                      =1    61     ; TOken Masks
                      =1    62     
  007F                =1    63     TOKEN_MASK      EQU     01111111B       ;mask high bit of token
                            64 +1  $INCLUDE(general.inc); Include files
                      =1    65     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    66     ;                                                                               ;
                      =1    67     ;                                  General.INC                                  ;
                      =1    68     ;                               General Constants                           ;
                      =1    69     ;                                 Include File                              ;
                      =1    70     ;                                                                           ;
                      =1    71     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    72     
                      =1    73     ; This file contains general operations
                      =1    74     ;
                      =1    75     ; Revision History:
                      =1    76     ;    11/02/2013                 Created - Anjian Wu
                      =1    77     ;    11/23/2013                 Added WORD_LOOKUP_ADJUST - Anjian Wu
                      =1    78     ;    12/05/2014         Added FMS_ERROR key, ZERO, changed other keys to 
                      =1    79     ;                       ASCII based - Anjian
                      =1    80     
                      =1    81     
                      =1    82     ; General Constants
  000D                =1    83     CAR_RETURN              EQU             13                      ;
  0000                =1    84     ASCII_NULL      EQU     0           ;
  0001                =1    85     bit_size        EQU     1           ;
  0004                =1    86     nibble_size     EQU     4           ;
  0008                =1    87     BYTE_size       EQU     8           ;
  0010                =1    88     WORD_size       EQU     16          ;
  0000                =1    89     ArrayEmpty      EQU     0               ; Empty is set at 0 index
                      =1    90     
  0001                =1    91     TRUE            EQU     1           ;
  0000                =1    92     FALSE           EQU     0           ;
                      =1    93     
  0000                =1    94     RESET           EQU     0           ; General Value for Resetting something
                      =1    95     
  0000                =1    96     CLEAR           EQU     0           ;
                      =1    97     
  0000                =1    98     ZERO            EQU     0           ;
                      =1    99     
  000A                =1   100     DIGIT           EQU     10          ; A digit in base 10 
                      =1   101     
  0001                =1   102     WORD_LOOKUP_ADJUST  EQU    1           ; Two bytes in one word -> SHL by 1
                      =1   103     
                      =1   104     ; General Definitions for Main Loops
                      =1   105     
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE    3


LOC  OBJ                  LINE     SOURCE

  0001                =1   106     FIRST_RESERVED_VEC      EQU     1           ;reserve vectors 1-3
  0003                =1   107     LAST_RESERVED_VEC       EQU     3       ;
  0100                =1   108     NUM_IRQ_VECTORS     EQU 256     ;number of interrupt vectors
                      =1   109     
                      =1   110     ; MainLoop Key Codes
                      =1   111     
  0000                =1   112     KEY_EVENT_KEY       EQU     0   ; Event code indicating key pressed
  0001                =1   113     SER_ERR_KEY         EQU     1   ; Event code indicating serial error
  0002                =1   114     RX_ENQUEUED_KEY     EQU     2   ; Event code indicating new rx value gotten
  0003                =1   115     MODEM_KEY           EQU     3   ; Event code indicating modem event
  0004                =1   116     FSM_ERROR           EQU     4   ; Error key showing FSM error
                      =1   117     
                      =1   118     ; General Addresses
                      =1   119     
  FF22                =1   120     INTCtrlReg          EQU     0FF22H  ;EOI interrupt controller       
                           121 +1  $INCLUDE(display.inc);
                      =1   122     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   123     ;                                                                               ;
                      =1   124     ;                                  Display.INC                                  ;
                      =1   125     ;                               Display Constants                           ;
                      =1   126     ;                                 Include File                              ;
                      =1   127     ;                                                                           ;
                      =1   128     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   129     
                      =1   130     ; This file contains the definitions for the display functions
                      =1   131     ;
                      =1   132     ; Revision History:
                      =1   133     ;    11/02/2013                 Created - Anjian Wu
                      =1   134     
                      =1   135     
                      =1   136     
                      =1   137     ; General Definitions
                      =1   138     
  0008                =1   139     Display_SIZE    EQU     8               ; Size of chars that can fit in display
  0000                =1   140     SEGMENT_NULL    EQU     0               ; Byte value for Sseg pattern of ASCII_NULL
  0001                =1   141     SegPTRAdjust    EQU     1               ; Since we want WORD, we need to adjust 
                      =1   142      
                      =1   143     
                      =1   144     ; Display Addresses
                      =1   145     
  0000                =1   146     LEDDisplay      EQU     0               ; Display is hardware mapped to 0 - 7H
  0008                =1   147     LEDDisplay2     EQU     8               ; 14- seg also hardware mapped to 8h - 0DH
                      =1   148     
                      =1   149     
----                  =1   150     DISPLAYSTRUC     STRUC                      ;structure containing all display buffers
0000                  =1   151         buffer              DB          Display_SIZE        DUP     (?) ;pointer to the f
                                   unction to get switch 
----                  =1   152     DISPLAYSTRUC      ENDS
                      =1   153     
                      =1   154     
                      =1   155     
                           156 +1  $INCLUDE(chips.inc);
                      =1   157     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   158     ;                                                                               ;
                      =1   159     ;                                  Chips.INC                                    ;
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE    4


LOC  OBJ                  LINE     SOURCE

                      =1   160     ;                           Chip Select Constants                           ;
                      =1   161     ;                                 Include File                              ;
                      =1   162     ;                                                                           ;
                      =1   163     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   164     
                      =1   165     ; This file contains the definitions for chip select values
                      =1   166     ;
                      =1   167     ; Revision History:
                      =1   168     ;    11/23/2013                 Created - Anjian Wu
                      =1   169     
                      =1   170     
                      =1   171     
                      =1   172     ; Chip Select Register Values
  0003                =1   173     PACSval         EQU     00003H          ;PCS base at 0, 3 wait states
                      =1   174                                             ;0000000000------  starts at address 0
                      =1   175                                             ;----------000---  reserved
                      =1   176                                             ;-------------0--  wait for RDY inputs
                      =1   177                                             ;--------------11  3 wait states
  0183                =1   178     MPCSval         EQU     00183H          ;PCS in I/O space, use PCS5/6, 3 wait states
                      =1   179                                             ;0---------000---  reserved
                      =1   180                                             ;-0000001--------  MCS is 8KB
                      =1   181                                             ;--------1-------  output PCS5/PCS6
                      =1   182                                             ;---------0------  PCS in I/O space
                      =1   183                                             ;-------------0--  wait for RDY inputs
                      =1   184                                             ;--------------11  3 wait states
                      =1   185                                             
  FFA4                =1   186     PACSreg         EQU     0FFA4H          ;address of PACS register
  FFA8                =1   187     MPCSreg         EQU     0FFA8H          ;address of MPCS register
                           188 +1  $INCLUDE(macros.inc);
                      =1   189 +1  $NOLIST
                           354 +1  $INCLUDE(queue.inc);
                      =1   355     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   356     ;                                                                               ;
                      =1   357     ;                                  Queues.INC                                   ;
                      =1   358     ;                           Queue Conversion Constants                          ;
                      =1   359     ;                                 Include File                              ;
                      =1   360     ;                                                                           ;
                      =1   361     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   362     
                      =1   363     ; This file contains the definitions for the queue functions
                      =1   364     ;
                      =1   365     ; Revision History:
                      =1   366     ;    10/29/2013                 Created - Anjian Wu
                      =1   367     ;    11/01/2013   Debugged,Documented, and working - Anjian Wu
                      =1   368     ;
                      =1   369     ;Structure for Queue allocation, information, and storage
                      =1   370     
                      =1   371     
                      =1   372     ; General Definitions
                      =1   373     
                      =1   374     
  0000                =1   375     BYTE_QUEUE      EQU     0             ; QueueInit Key for Byte queue.
  0001                =1   376     WORD_QUEUE      EQU     1             ; QueueInit Key for Word queue.
                      =1   377     
  0001                =1   378     ByteQ           EQU     1             ; Byte norm factor for indexing
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE    5


LOC  OBJ                  LINE     SOURCE

  0002                =1   379     WordQ           EQU     2             ; Word norm factor for indexing
  0400                =1   380     ARRAY_SIZE      EQU     1024          ; Size of queue array (fits 512-1 words, 
                      =1   381                                           ;or 1023 bytes)
                      =1   382     
  0200                =1   383     MAX_Q_LENG          EQU     512          ;Maxlength allowed for byte or word queue
                      =1   384     
----                  =1   385     QUEUESTRUC      STRUC                   ;structure containing all queue info
0000                  =1   386         head            DW      ?           ;counter for debouncing the switch
0002                  =1   387         tail            DW      ?           ;time until change repeat rates
0004                  =1   388         qsize           DW      ?           ;rate at which to repeat the switch
0006                  =1   389         leng            DW      ?           ;rate at which to repeat the switch
0008                  =1   390         array               DB          ARRAY_SIZE  DUP     (?) ;pointer to the function 
                                   to get switch status
----                  =1   391     QUEUESTRUC      ENDS
                      =1   392     
                      =1   393     ;Structure for storing Queue return values or args
                      =1   394     
----                  =1   395     QUEUEVARS      STRUC                ;structure containing all queue info
0000                  =1   396         dequeued    DW      ?               ;counter for debouncing the switch
----                  =1   397     QUEUEVARS      ENDS
                      =1   398     
                      =1   399     
                      =1   400     
                           401 +1  $INCLUDE(vectors.inc);
                      =1   402     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   403     ;                                                                               ;
                      =1   404     ;                                  Vector.INC                                   ;
                      =1   405     ;                              IVector Constants                            ;
                      =1   406     ;                                 Include File                              ;
                      =1   407     ;                                                                           ;
                      =1   408     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   409     
                      =1   410     ; This file contains the definitions for timers and their interupts
                      =1   411     ;
                      =1   412     ; Revision History:
                      =1   413     ;    11/23/2013                 Created - Anjian Wu
                      =1   414     ;    12/10/2013         Added Timer 2 info - Anjian Wu
                      =1   415     
                      =1   416                                             ; IVector Definitions
                      =1   417     
                      =1   418     ; Interrupt Vectors and their control values
  0008                =1   419     Tmr0Vec         EQU     8               ;interrupt vector for Timer 0
  0012                =1   420     Tmr1Vec         EQU     18              ;interrupt vector for Timer 1
  0013                =1   421     Tmr2Vec         EQU     19              ;interrupt vector for Timer 2
                      =1   422     
  FF32                =1   423     INTCtrlrCtrl    EQU     0FF32H          ;address of interrupt controller for timer
  FF22                =1   424     INTCtrlrEOI     EQU     0FF22H          ;address of interrupt controller EOI register
                      =1   425     
  0001                =1   426     INTCtrlrCVal    EQU     00001H          ;set priority for timers to 1 and enable
                      =1   427                                             ;000000000000----  reserved
                      =1   428                                             ;------------0---  enable timer interrupt
                      =1   429                                             ;-------------001  timer priority
                           430 +1  $INCLUDE(timer.inc);
                      =1   431     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   432     ;                                                                               ;
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE    6


LOC  OBJ                  LINE     SOURCE

                      =1   433     ;                                  Timer.INC                                    ;
                      =1   434     ;                              Timer Constants                              ;
                      =1   435     ;                                 Include File                              ;
                      =1   436     ;                                                                           ;
                      =1   437     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   438     
                      =1   439     ; This file contains the definitions for timers and their interupts
                      =1   440     ;
                      =1   441     ; Revision History:
                      =1   442     ;    11/23/2013                 Created - Anjian Wu
                      =1   443     ;    12/10/2013         Added Timer2 vals - Anjian Wu
                      =1   444     
                      =1   445     
                      =1   446                                             ; Timer Definitions
                      =1   447     
                      =1   448     ; Addresses
  FF56                =1   449     Tmr0Ctrl        EQU     0FF56H          ;address of Timer 0 Control Register
  FF52                =1   450     Tmr0MaxCntA     EQU     0FF52H          ;address of Timer 0 Max Count A Register
  FF50                =1   451     Tmr0Count       EQU     0FF50H          ;address of Timer 0 Count Register
                      =1   452     
  FF5E                =1   453     Tmr1Ctrl        EQU     0FF5EH          ;address of Timer 1 Control Register
  FF5A                =1   454     Tmr1MaxCntA     EQU     0FF5AH          ;address of Timer 1 Max Count A Register
  FF58                =1   455     Tmr1Count       EQU     0FF58H          ;address of Timer 1 Count Register
                      =1   456     
                      =1   457     
  FF66                =1   458     Tmr2Ctrl        EQU     0FF66H          ;address of Timer 2 Control Register
  FF62                =1   459     Tmr2MaxCnt      EQU     0FF62H          ;address of Timer 2 Max Count A Register
  FF60                =1   460     Tmr2Count       EQU     0FF60H          ;address of Timer 2 Count Register
                      =1   461     
                      =1   462     ; Control Register Values
  E001                =1   463     Tmr0CtrlVal     EQU     0E001H          ;value to write to Timer 0 Control Register
                      =1   464                                             ;1---------------  enable timer
                      =1   465                                             ;-1--------------  write to control
                      =1   466                                             ;--1-------------  enable interrupts
                      =1   467                                             ;----000000------  reserved
                      =1   468                                             ;---0------0-----  read only
                      =1   469                                             ;-----------0----  Retrigger
                      =1   470                                             ;------------0---  Prescaler
                      =1   471                                             ;-------------0--  external clock
                      =1   472                                             ;--------------0-  single counter mode
                      =1   473                                             ;---------------1  continuous mode
                      =1   474                                             
  E001                =1   475     Tmr1CtrlVal     EQU     0E001H          ;value to write to Timer 1 Control Register
                      =1   476                                             ;1---------------  enable timer
                      =1   477                                             ;-1--------------  write to control
                      =1   478                                             ;--1-------------  enable interrupts
                      =1   479                                             ;----000000------  reserved
                      =1   480                                             ;---0------0-----  read only
                      =1   481                                             ;-----------0----  Retrigger
                      =1   482                                             ;------------0---  Prescaler
                      =1   483                                             ;-------------0--  external clock
                      =1   484                                             ;--------------0-  single counter mode
                      =1   485                                             ;---------------1  continuous mode
                      =1   486     
  E001                =1   487     Tmr2CtrlVal     EQU     0E001H          ;value to write to Timer 2 Control Register
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE    7


LOC  OBJ                  LINE     SOURCE

                      =1   488                                             ;1---------------  enable timer
                      =1   489                                             ;-1--------------  write to control
                      =1   490                                             ;--1-------------  enable interrupts
                      =1   491                                             ;----0000000-----  reserved
                      =1   492                                             ;-----------0----  MaxCount
                      =1   493                                             ;------------000-  reserved
                      =1   494                                             ;---------------1  continuous mode
                      =1   495     ; Control Register Values
                      =1   496                                           
                      =1   497                                             ; Control Register Values
  08CA                =1   498     CTS_PER_MILSEC  EQU     2250            ; 18MHZ/(8 * 1KHz) ~ 2250 counts per MS
                      =1   499     
  07D0                =1   500     PRESCALE_2SEC   EQU     2000            ; 2 seconds = CTS_PER_MILSEC * 2000
                      =1   501     
  0008                =1   502     TimerEOI        EQU     00008H          ;Timer EOI command (same for all timers)
  8000                =1   503     NonSpecEOI      EQU     08000H          ;Non-specific EOI command
                      =1   504     
                      =1   505     
  0258                =1   506     COUNT_FOR_30HZ  EQU     600             ; 18,000,000 HZ/(8 * 30 Hz * PWM_WIDTH_MAX) 
                      =1   507                                             ; ~ 600 counts for 30 HZ of PWM
                      =1   508                                             
  00B1                =1   509     COUNT_FOR_100HZ EQU     177             ; 18,000,000 HZ/(8 * 100 Hz * PWM_WIDTH_MAX) 
                      =1   510                                             ; ~ 177 counts for 100 HZ of PWM             
                                                             
                      =1   511                                             
                      =1   512                                             ; NOTE THIS IS APPROXIMATE, Clock is actually
                                    a bit faster
                      =1   513                                             ; than 18 MHZ
                      =1   514     
                      =1   515     
                           516     
                           517     
                           518     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           519     ;                                                                            ;
                           520     ;                                 HW9 Remote Mainloop Functions              ;
                           521     ;                                 EE51                                           ;
                           522     ;                                 Anjian Wu                                  ;
                           523     ;                                                                            ;
                           524     ;                                 TA: Pipe-Mazo                              ;
                           525     ;                                                                            ;
                           526     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           527     ;                                 What's in here?
                           528     ;
                           529     ;                                   Code Segment (* indicates PUBLIC)
                           530     ;
                           531     ;   Procedures
                           532     ;
                           533     ;   Remote_FSM_LOOP     -   Remote Main Loop
                           534     ;
                           535     ;   ParseRemoteWord     -   Parses four types of Events into respective functions
                           536     ;
                           537     ;   HandleKey           -   Loads tx_queue with command and updates display buff
                           538     ;   HandleSerErr        -   Updates display with error (Error_Buff_PTR)
                           539     ;   ParseRemoteChar     -   Parses chars from input serial (from Robot)
                           540     ;   HandleModem         -   Stub function for now, since no flow control
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           541     ;
                           542     ;   RemoteParseInit     -   Initializes all parsing variables and ToggleHandler
                           543     ;   ToggleHandler       -   Timer0 handler that actually Calls Display and cycles
                           544     ;                           between displaying statuses.
                           545     ;   GetTokenTypeVal     -   Grabs next token type and val
                           546     ;   RemoteParseReset    -   Resets state machine variables for ParseRemoteChar FSM
                           547     ;   SetError            -   Indicates RemoteFSM error, forces FSM reset
                           548     ;   AddDirChar          -   Concat the Direction Status String from Robot
                           549     ;   AddSpeedChar        -   Concat the Speed Status String from Robot
                           550     ;   AddRobotErrorChar   -   Concat the Robot Status String from Robot
                           551     ;
                           552     ;   Tables
                           553     ;
                           554     ;   Token Tables        -   Contains all tokens/token vals for Remote FSM
                           555     ;   Toggle_JMP_Table    -   Jump table inside Toggle handler, muxes what value displa
                                   y                    
                           556     ;   Toggle_Label_Table  -   Muxes which value label to display
                           557     ;   SerErrTable         -   Table of error strings for display
                           558     ;   KeyDisplayTable     -   Table of cmd strings for display
                           559     ;   KeyCmdTable         -   Table of strings cmds for Serial to Robot
                           560     ;
                           561     ;                              What's was last edit?
                           562     ;
                           563     ;                   Edits by Anjian Wu:
                           564     ;                               12-06-2013 -> Pseudo code 
                           565     ;                   12-10-2013 -> Added KeyDisplayError/KeyDisplayInit Table
                           566     ;                   12-13-2013 -> Added AddRobotErrorChar into FSM, removed no_op
                           567     ;                   12-13-2013 -> Working and updated documentation
                           568     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           569     CGROUP  GROUP   CODE
                           570     DGROUP  GROUP   STACK, DATA
                           571     
----                       572     CODE    SEGMENT PUBLIC 'CODE'
                           573     
                           574     
                           575             ASSUME  CS:CGROUP, DS:DGROUP
                           576             
                           577     ;external function declarations
                           578      
                           579     ;Init/Setup Functions 
                           580             EXTRN   InitUserInterfaceCS:NEAR    ; Initialize hardware ports for keypad an
                                   d display
                           581             EXTRN   EnqueueEventInit:NEAR       ; Initialize event queue
                           582             EXTRN   Timer0Init:NEAR             ; Setup and enable Timer0
                           583             EXTRN   Timer1Init:NEAR             ; Setup and enable Timer1
                           584             EXTRN   Timer2Init:NEAR             ; Setup and enable Timer2
                           585             EXTRN   ClrIRQVectors:NEAR          ; Clear interrupt vector table
                           586             EXTRN   KeyHandlerInit:NEAR         ; Initialize keypad variables
                           587             EXTRN   DisplayHandlerInit:NEAR     ; Initialize display variables
                           588             EXTRN   SerialInit:NEAR             ; Initialize serial variables
                           589             
                           590     ;Main Loop Functions
                           591             EXTRN   Display:NEAR                ; Displays string
                           592             EXTRN   DequeueEvent:NEAR           ; Enqueues event queue
                           593             EXTRN   EnqueueEvent:NEAR           ; Dequeues event queue
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           594             EXTRN   EventAvailable:NEAR         ; Checks if event queue is empty
                           595             EXTRN   SerialPutChar:NEAR          ; Serial output a char
                           596             EXTRN   no_op:NEAR                  ; Just returns         
                           597     
                           598                     
                           599     ; Name:             Remote Main Loop
                           600     ;
                           601     ; Description:      This is the remote main loop that does all initializations 
                           602     ;                   and then loops forever waiting for event-available.
                           603     ;
                           604     ; Operation:        *   Set up all initializations
                           605     ;                   *   Enter remote_fsm_loop
                           606     ;                   *   LOOP forever checking whether an event is available
                           607     ;                       , if so dequeue it and pass to ParseRemoteWord
                           608     ;
                           609     ; Input:            None.
                           610     ; Output:           None.
                           611     ;
                           612     ; User Interface:   Keypad -> user input
                           613     ;                   Display -> 14-seg display with 8 chars
                           614     ;
                           615     ; Error Handling:   None.
                           616     ;
                           617     ; Algorithms:       None.
                           618     ;
                           619     ; Data Structures:  None.
                           620     ;
                           621     ; Known Bugs:       None.
                           622     ; Limitations:      None.
                           623     ;
                           624     ; Revision History:
                           625     ;                   Edits by Anjian Wu:
                           626     ;                               Initial Version ->  12-05-2013 
                           627     ;                   WORKING! I think->  12-13-2013
                           628     ;------------------------------------------------------------------------------------
                                   ----               
0000                       629     START:
                           630     
0000                       631     MAIN:
0000 B8----         R      632             MOV     AX, DGROUP              ;initialize the stack pointer
0003 8ED0                  633             MOV     SS, AX
0005 BCE00190       R      634             MOV     SP, OFFSET(DGROUP:TopOfStack)
                           635     
0009 B8----         R      636             MOV     AX, DGROUP              ;initialize the data segment
000C 8ED8                  637             MOV     DS, AX
                           638             
000E E80000         E      639             CALL    ClrIRQVectors              ; Clear whole vector table with Illegal Fu
                                   nction
0011 E80000         E      640             CALL    InitUserInterfaceCS        ; Initialize All UI hardware (keypad, disp
                                   lay)
0014 E80000         E      641             CALL    Timer0Init                 ; Initialize timer 0 interrupt
0017 E80000         E      642             CALL    Timer1Init                 ; Initialize timer 1 interrupt
001A E80000         E      643             CALL    Timer2Init                 ; Initialize timer 2 interrupt
001D E80000         E      644             CALL    KeyHandlerInit             ; Initialize keypad function variables
0020 E80000         E      645             CALL    SerialInit                 ; Initialize serial function variables
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   10


LOC  OBJ                  LINE     SOURCE

0023 E80000         E      646             CALL    DisplayHandlerInit         ; Initialize display function variables
0026 E80000         E      647             CALL    EnqueueEventInit           ; Initialize the Event queue function vars
                           648                                                
0029 E83802                649             CALL    RemoteParseInit            ; Initialize remote parser FSM and handler
                           650             
002C FB                    651             STI                                ; Start interrupts
                           652             ;JMP     REMOTE_FSM_LOOP           ; Enter loop
                           653     
                           654         
002D                       655     REMOTE_FSM_LOOP:
                           656         
002D E80000         E      657             CALL    EventAvailable              ; Is there a pending event? 
0030 7406                  658             JZ      RemoteFSMIdle               ; Event queue is empty, thus stay idle
                           659             ;JNZ    RemoteFSMEvent              ; There was an event!
0032                       660     RemoteFSMEvent:
                           661     
0032 E80000         E      662             CALL    DequeueEvent                ; Grab that event into AX
0035 E80200                663             CALL    ParseRemoteWord             ; Pass to get event parsed
                           664             
0038                       665     RemoteFSMIdle:
                           666         
0038 EBF3                  667     JMP     REMOTE_FSM_LOOP                     ; Loop forever
                           668     
                           669     ; Name:             ParseRemoteWord
                           670     ;
                           671     ; Description:      Uses a call table to select the next function to call to handle
                           672     ;                   the event type. The event val is always passed to this 
                           673     ;                   function call. AH is the event key, and AL is the event val.
                           674     ;
                           675     ; Operation:        * Isolate event key into a 16-bit value.
                           676     ;                   * Adjust the event key value for WORD table lookup
                           677     ;                   * Isolate event value into 16-bit value.
                           678     ;                   * CALL Remote_Call_Table using the event key and passing
                           679     ;                     the event value.
                           680     ;                   
                           681     ;Arguments:             AH  -> Event Key
                           682     ;                   AL  -> Event Value
                           683     ;Return Values:         None.
                           684     ;Shared Variables:      None.
                           685     ;Local Variables:       BL  -> Copy of event value
                           686     ;                   AX  -> copy of event key
                           687     ;                   BX  -> pointer for CALL table look up
                           688     ;Global Variables:      None.                   
                           689     ;Input:                 None.
                           690     ;Output:                None.
                           691     ;Registers Used:        AX, BX
                           692     ;Stack Depth:           none.
                           693     ;Known Bugs:            None.
                           694     ;Data Structures:       None.
                           695     ;Error Handling:        If tx_queue is FULL, then stop and return.
                           696     ;Algorithms:            None.
                           697     ;Limitations:           None.
                           698     ;Author:                        Anjian Wu
                           699     ;
                           700     ; Revision History:
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   11


LOC  OBJ                  LINE     SOURCE

                           701     ;                   Edits by Anjian Wu:
                           702     ;                               12-05-2013 -> Initial Version
                           703     ;                   12-13-2013 -> Working and documentation
                           704     ;------------------------------------------------------------------------------------
                                   ----       
003A                       705     ParseRemoteWord     PROC    NEAR
                           706     
                           707     ; Arg: AX = [AH = key, AL = value]
                           708     
003A 8AD8                  709         MOV     BL, AL                      ; Save event value
003C 32FF                  710         XOR     BH, BH                      ; Isolate the Event val     
                           711         
003E 86E0                  712         XCHG    AH, AL                      ; Swap such that Event Type is LSNibble
0040 32E4                  713         XOR     AH, AH                      ; Isolate the Event Type      
                           714     
0042 D1E0                  715         SHL     AX, WORD_LOOKUP_ADJUST      ; Prepare for WORD table lookup
0044 93                    716         XCHG    BX, AX                      ; Copy to BX for pointer, and AX now has Even
                                   t val
0045 2EFF974B00     R      717         CALL    CS:Remote_Call_Table[BX]    ; Go to that FSM  function, passing Event val
                                    in AX
                           718         
004A C3                    719         RET
                           720         
                           721     ParseRemoteWord ENDP
                           722     
                           723     ; Name:             Remote_Call_Table
                           724     ;
                           725     ; Description:      Call table for ParseRemoteWord. The event key value is mapped
                           726     ;                   to the functions below.
                           727     ;                   
                           728     ;Limitations:           None.
                           729     ;Author:                        Anjian Wu
                           730     ;
                           731     ; Revision History:
                           732     ;                   Edits by Anjian Wu:
                           733     ;                               12-05-2013 -> Initial Version
                           734     ;                   12-13-2013 -> Working and documentation
                           735     ;------------------------------------------------------------------------------------
                                   ----       
004B                       736     Remote_Call_Table           LABEL       WORD
                           737                                         
004B 5300           R      738             DW              HandleKey               ;KEY_EVENT_KEY - An internal key pres
                                   s
004D FB01           R      739             DW              HandleSerErr        ;SER_ERR_KEY   - An internal serial CHIP 
                                   issue
004F 9303           R      740             DW      ParseRemoteChar     ;RX_ENQUEUED_KEY - External serial char stream
0051 6302           R      741             DW      HandleModem         ;MODEM_KEY - Internal serial chip modem issue
                           742     
                           743     
                           744     ;Procedure:                     HandleKey
                           745     ;
                           746     ;Description:           Send out appropriate command over serial to Robot and updates
                           747     ;                   display with what action was just sent.
                           748     ;
                           749     ;                   Maps the key pressed into the command string with fixed length.
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   12


LOC  OBJ                  LINE     SOURCE

                           750     ;                   Then all of the chars of that cmd string is push out to serial. 
                           751     ;                   Also displays the proper message to the user describing the comma
                                   nd.
                           752     ;                   Finally also forces Togglehandler to immediately display what
                           753     ;                   was just pressed, so that user doesn't have to wait for it to
                           754     ;                   come around.
                           755     ;
                           756     ;Operation:         * AL is the key value that is going to be mapped to the serial CM
                                   D
                           757     ;                   * BX = CMD_LENGTH*AL + OFFSET(KeyCmdTable) = CMD string offset
                           758     ;                   * For AL = 0 to CMD_LENGTH - 1, grab each char from KeyCmdTable
                           759     ;                     at CS:BX[AL]. Each char is pushed to serial with SerialPutChar.
                           760     ;                       * IF tx_queue in Serial is full, USER is told so and function
                                    returns
                           761     ;                   * BX = (Display_SIZE+1)*AL + OFFSET(KeyDisplayTable) = action str
                                   ing offset
                           762     ;                   * Store that offset into Action_Buff_PTR for Togglehandler.
                           763     ;                   * Also force ToggleHandler to display ACTION VAL next.
                           764     ;                
                           765     ;Arguments:             AL -> Event Val
                           766     ;Return Values:         None.
                           767     ;Shared Variables:      Action_Buff_PTR (WRITE)
                           768     ;                   ToggleCTR (WRITE)
                           769     ;Local Variables:       CL  -> copy of event val
                           770     ;                   BX  -> Table offset
                           771     ;                   AX  -> table ele pointer
                           772     ;Global Variables:      None.                   
                           773     ;Input:                 None.
                           774     ;Output:                None.
                           775     ;Registers Used:        AL, AH, AX, BX, CL
                           776     ;Stack Depth:           None.
                           777     ;Known Bugs:            None.
                           778     ;Data Structures:       None.
                           779     ;Error Handling:        If serial tx_queue is FULL, then stop, tell USER, and return.
                           780     ;Algorithms:            None.
                           781     ;Limitations:           None.
                           782     ;Author:                        Anjian Wu
                           783     ;Revision History:
                           784     ;                   Edits by Anjian Wu:
                           785     ;                   12-06-2013  -> Pseudo code
                           786     ;                   12-12-2013  -> Added forcing Toggle to show ACTION VAL
                           787     ;                   12-13-2013  -> Working and documentation
                           788     ;------------------------------------------------------------------------------
0053                       789     HandleKey       PROC    NEAR
                           790     
                           791     ; Arg: AL = value
                           792     
0053 8AC8                  793         MOV     CL, AL          ; Save a copy of AL
                           794         
                           795 +1      
0055 33DB                  796 +1      XOR     BX, BX                  ; Clear counter
0057 B307                  797 +2          MOV             BL, CMD_LENGTH      ; Let counter be CMD_LENGTH
0059 F6E3                  798 +1          MUL             BL                      ; Rel pinter = CMD_LENGTH * typeindex
005B 05BD0090       R      799 +2      ADD     AX, OFFSET( KeyCmdTable)  ;
                           800 +1  
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   13


LOC  OBJ                  LINE     SOURCE

                           801                                 ; Calc abs starting addr of the char string
                           802                                 ; AX = CMD_LENGTH*AL + OFFSET(KeyCmdTable)
                           803         
005F 8BD8                  804         MOV     BX, AX          ; Need the abs addr in BX for XLAT
                           805                                 
0061 32C0                  806         XOR     AL, AL          ; Clear counter
                           807         
                           808     ;-----------------------Loop enqueue the char string-----------------------------
0063                       809     HandleKeyEnqueue:
0063 3C07                  810         CMP     AL, CMD_LENGTH          ; Go from AL = 0 to CMD_LENGTH - 1
0065 7D0D                  811         JGE     HandleKeyEnqueueInternalOps    ; Yes, so exit loop
                           812         
0067 50                    813         PUSH    AX                      ; Save counter
0068 2ED7                  814         XLAT        CS:KeyCmdTable                  ; Get next char (at CS:BX[AL] -> AL b
                                   y design)      
006A E80000         E      815         CALL    SerialPutChar           ; Is TX_queue Full?
                           816         
006D 58                    817         POP     AX                      ; Restore counter
                           818     
006E 7220                  819         JC      HandleKeyError          ; Yes it is, tell user.
                           820                                         ; Cannot send this char, exit this function
                           821                                         ; immediately. Any partially sent string is unlik
                                   ely
                           822                                         ; to be valid string, thus ROBOT side will likely
                                    throw
                           823                                         ; a string error as well.
                           824         ;JNZ    HandleKeyEnqueueOk      ; It is ok to enqueue.
                           825         
0070                       826     HandleKeyEnqueueOk:
                           827         
0070 FEC0                  828         INC     AL                      ; Increment Counter
                           829         
0072 EBEF                  830         JMP     HandleKeyEnqueue
                           831         
0074                       832     HandleKeyEnqueueInternalOps:
                           833     ;-----------------------Now do any INTERNAL operations-------------------------
0074 33DB                  834         XOR     BX, BX                      ;
0076 8AD9                  835         MOV     BL, CL                      ;
0078 D1E3                  836         SHL     BX, WORD_LOOKUP_ADJUST      ; Prepare for WORD table lookup
007A 2EFF979D00     R      837         CALL    CS:Key_Call_Table[BX]       ; Go to that FSM  function, passing Event val
                                    in AX
                           838     ;-----------------------Now update display for USER-----------------------------
007F                       839     HandleKeyEnqueueDone:
007F 33C0                  840         XOR     AX, AX          ; 
0081 8AC1                  841         MOV     AL, CL          ; Restore the copy of event value
                           842 +1      
0083 33DB                  843 +1      XOR     BX, BX                  ; Clear counter
0085 B309                  844 +2          MOV             BL, Display_SIZE+1          ; Let counter be CMD_LENGTH
0087 F6E3                  845 +1          MUL             BL                      ; Rel pinter = CMD_LENGTH * typeindex
0089 05340190       R      846 +2      ADD     AX, OFFSET( KeyDisplayTables)  ;
                           847 +1  
                           848                                 ; Calc abs starting addr of the char string
                           849                                 ; AX = (Display_SIZE+1)*AL + OFFSET(KeyDisplayTable)
008D EB0490                850         JMP     HandleKeyDone
                           851         
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   14


LOC  OBJ                  LINE     SOURCE

0090                       852     HandleKeyError:
0090 B8D601         R      853         MOV     AX, OFFSET(KeyDisplayError) ; Send out the Error TX display
                           854         ;JMP     HandleKeyDone
0093                       855     HandleKeyDone:
                           856     
0093 A31E00         R      857         MOV     Action_Buff_PTR, AX     ;  Update the Action buffer pointer
0096 C70625000100   R      858         MOV     ToggleCTR, ACTION_VAL   ;  Force ToggleHandler to immediately show ACTION
                                    VAL
                           859         
009C C3                    860         RET     
                           861         
                           862     HandleKey   ENDP
                           863     
                           864     ; Name:             KeyCmdTable
                           865     ;
                           866     ; Description:      Jump table for INTERNAL functions to be used for a key press.
                           867     ;                   This table is design so any INTERNAL function can be executed
                           868     ;                   or added easily.
                           869     ;                   
                           870     ;Limitations:           Fixed length size.
                           871     ;Author:                        Anjian Wu
                           872     ;
                           873     ; Revision History:
                           874     ;                   Edits by Anjian Wu:
                           875     ;                               12-13-2013 -> Initial Version
                           876     ;                   12-13-2013 -> 
                           877     
009D                       878     Key_Call_Table      LABEL       WORD
                           879                                         
009D 0000           E      880             DW              no_op         ;0
009F 0000           E      881             DW              no_op         ;1
00A1 0000           E      882             DW      no_op         ;2
00A3 0000           E      883             DW      no_op         ;3
00A5 0000           E      884         DW      no_op         ;4
00A7 0000           E      885         DW      no_op         ;5
00A9 0000           E      886         DW      no_op         ;6
00AB 0000           E      887         DW      no_op         ;7
00AD DF01           R      888         DW      Inc_Bright    ;8
00AF 0000           E      889         DW      no_op         ;9
00B1 0000           E      890         DW      no_op         ;10
00B3 0000           E      891         DW      no_op         ;11
00B5 ED01           R      892         DW      Dec_Bright    ;12
00B7 0000           E      893         DW      no_op         ;13
00B9 0000           E      894         DW      no_op         ;14
00BB 0000           E      895         DW      no_op         ;15
                           896         
                           897     
                           898     ; Name:             KeyCmdTable
                           899     ;
                           900     ; Description:      String table containing fixed command lengths of chars that is
                           901     ;                   ouputted to serial to the Robot for parsing. Every string
                           902     ;                   must end with CAR_RETURN and be size CMD_LENGTH.
                           903     ;                   
                           904     ;Limitations:           Fixed length size.
                           905     ;Author:                        Anjian Wu
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   15


LOC  OBJ                  LINE     SOURCE

                           906     ;
                           907     ; Revision History:
                           908     ;                   Edits by Anjian Wu:
                           909     ;                               12-05-2013 -> Initial Version
                           910     ;                   12-13-2013 -> Working and documentation
                           911     ;------------------------------------------------------------------------------------
                                   ----       
                           912     ;                   The way KEYS are mapped physically is...
                           913     ;                   __________________________
                           914     ;                  | [0]  |  [1]  | [2] | [3] |  
                           915     ;                  |__________________________|
                           916     ;                  | [4]  |  [5]  | [6] | [7] |
                           917     ;  Keypad ------>  |__________________________|
                           918     ;                  | [8]  |  [9]  | [10]| [11]|    
                           919     ;                  |__________________________|
                           920     ;                  | [12] |  [13] | [14]| [15]|  
                           921     ;                  |_____ |_______|_____|_____|   
                           922     
00BD                       923     KeyCmdTable         LABEL       BYTE
                           924                                  
00BD 54                    925             DB              'T',        '+',   '0015',     CAR_RETURN ;Key 0
00BE 2B
00BF 30303135
00C3 0D
00C4 54                    926             DB              'T',        ' ',   '0000',     CAR_RETURN ;Key 1
00C5 20
00C6 30303030
00CA 0D
00CB 54                    927             DB      'T',        '-',   '0015',     CAR_RETURN ;Key 2
00CC 2D
00CD 30303135
00D1 0D
00D2 20                    928             DB      ' ',        ' ',   '    ',     CAR_RETURN ;Key 3
00D3 20
00D4 20202020
00D8 0D
00D9 20                    929             DB      ' ',        ' ',   '    ',     CAR_RETURN ;Key 4
00DA 20
00DB 20202020
00DF 0D
00E0 4F                    930             DB      'O',        ' ',   '    ',     CAR_RETURN ;Key 5
00E1 20
00E2 20202020
00E6 0D
00E7 53                    931             DB      'S',        ' ',   '0000',     CAR_RETURN ;Key 6
00E8 20
00E9 30303030
00ED 0D
00EE 46                    932             DB      'F',        ' ',   '    ',     CAR_RETURN ;Key 7
00EF 20
00F0 20202020
00F4 0D
00F5 20                    933             DB      ' ',        ' ',   '    ',     CAR_RETURN ;Key 8
00F6 20
00F7 20202020
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   16


LOC  OBJ                  LINE     SOURCE

00FB 0D
00FC 44                    934             DB      'D',        '+',   '0015',     CAR_RETURN ;Key 9
00FD 2B
00FE 30303135
0102 0D
0103 56                    935             DB      'V',        '+',   '4369',     CAR_RETURN ;Key 10
0104 2B
0105 34333639
0109 0D
010A 44                    936             DB      'D',        '-',   '0015',     CAR_RETURN ;Key 11
010B 2D
010C 30303135
0110 0D
0111 20                    937             DB      ' ',        ' ',   '    ',     CAR_RETURN ;Key 12
0112 20
0113 20202020
0117 0D
0118 44                    938             DB      'D',        '-',   '0090',     CAR_RETURN ;Key 13
0119 2D
011A 30303930
011E 0D
011F 56                    939             DB      'V',        '-',   '4369',     CAR_RETURN ;Key 14 
0120 2D
0121 34333639
0125 0D
0126 44                    940             DB      'D',        '+',   '0090',     CAR_RETURN ;Key 15
0127 2B
0128 30303930
012C 0D
012D 20                    941             DB      ' ',        ' ',   '    ',     CAR_RETURN ;Key Not assigned
012E 20
012F 20202020
0133 0D
                           942             
                           943     
                           944     ; Name:             KeyDisplayTables (KeyDisplayInit and KeyDisplayError)
                           945     ;
                           946     ; Description:      String table containing fixed command lengths of chars that is
                           947     ;                   outputted to display of Remote. Every string
                           948     ;                   must end with ASCII_NULL and be size Display_SIZE + 1.
                           949     ;                   
                           950     ;Limitations:           Fixed length size.
                           951     ;Author:                        Anjian Wu
                           952     ;
                           953     ; Revision History:
                           954     ;                   Edits by Anjian Wu:
                           955     ;                               12-05-2013 -> Initial Version
                           956     ;                   12-13-2013 -> Working and documentation
                           957     ;                   The way KEYS are mapped physically is...
                           958     ;                   __________________________
                           959     ;                  | [0]  |  [1]  | [2] | [3] |  
                           960     ;                  |__________________________|
                           961     ;                  | [4]  |  [5]  | [6] | [7] |
                           962     ;  Keypad ------>  |__________________________|
                           963     ;                  | [8]  |  [9]  | [10]| [11]|    
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   17


LOC  OBJ                  LINE     SOURCE

                           964     ;                  |__________________________|
                           965     ;                  | [12] |  [13] | [14]| [15]|  
                           966     ;                  |_____ |_______|_____|_____|     
                           967     ; The addition of KeyDisplayInit and KeyDisplayError Tables is for
                           968     ; easier coding and are NOT mapped ot any keys.
0134                       969     KeyDisplayTables            LABEL       BYTE
0134 5420414E472B20        970             DB              'T ANG+  ', ASCII_NULL      ;Key 0
     20
013C 00
013D 54205245534554        971             DB              'T RESET ', ASCII_NULL      ;Key 1
     20
0145 00
0146 5420414E472D20        972             DB              'T ANG-  ', ASCII_NULL      ;Key 2
     20
014E 00
014F 4E6F4E6F4E6F4E        973             DB              'NoNoNoNo', ASCII_NULL      ;Key 3      
     6F
0157 00
0158 4E6F4E6F4E6F4E        974             DB              'NoNoNoNo', ASCII_NULL      ;Key 4      
     6F
0160 00
0161 4C415A52204F46        975             DB              'LAZR OFF', ASCII_NULL      ;Key 5
     46
0169 00
016A 532054204F2050        976             DB              'S T O P ', ASCII_NULL      ;Key 6
     20
0172 00
0173 4C415A52204F4E        977             DB              'LAZR ON ', ASCII_NULL      ;Key 7
     20
017B 00
017C 42726967687420        978             DB              'Bright +', ASCII_NULL      ;Key 8      
     2B
0184 00
0185 444952202B3135        979             DB              'DIR +15 ', ASCII_NULL      ;Key 9
     20
018D 00
018E 53504545442B20        980             DB              'SPEED+  ', ASCII_NULL      ;Key 10
     20
0196 00
0197 444952202D3135        981             DB              'DIR -15 ', ASCII_NULL      ;Key 11
     20
019F 00
01A0 42726967687420        982             DB              'Bright -', ASCII_NULL      ;Key 12     
     2D
01A8 00
01A9 444952202D3930        983             DB              'DIR -90 ', ASCII_NULL      ;Key 13
     20
01B1 00
01B2 53504545442D20        984             DB              'SPEED-  ', ASCII_NULL      ;Key 14
     20
01BA 00
01BB 444952202B3930        985             DB              'DIR +90 ', ASCII_NULL      ;Key 15
     20
01C3 00
01C4 5370656369616C        986         DB      'Special!', ASCII_NULL      ;NOT KEY
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   18


LOC  OBJ                  LINE     SOURCE

     21
01CC 00
                           987         
01CD                       988     KeyDisplayInit     LABEL        BYTE
01CD 50726573734B65        989         DB      'PressKey', ASCII_NULL      ;Initial Message
     79
01D5 00
01D6                       990     KeyDisplayError     LABEL       BYTE
01D6 54582046554C4C        991         DB      'TX FULL ', ASCII_NULL      ;TX queue is Full Error
     20
01DE 00
                           992     
                           993     ;Procedure:                     Inc_Bright
                           994     ;
                           995     ;Description:           Determines which Serial error occurred at the chip,
                           996     ;                   and informs the user to the issue. Note this is
                           997     ;                   serial errors from Remote Serial Chip.
                           998     ;
                           999     ;Operation:         * Table offset = AX = Display_SIZE*AL + OFFSET(SerErrTable)
                          1000     ;                   * Just store that into Error_Buff_PTR.
                          1001     ;                
                          1002     ;Arguments:             AL  -> Event Val
                          1003     ;Return Values:         none.
                          1004     ;Shared Variables:      Error_Buff_PTR (WRITE).
                          1005     ;Local Variables:       AX  -> abs pointer address.
                          1006     ;Global Variables:      None.                   
                          1007     ;Input:                 None.
                          1008     ;Output:                None.
                          1009     ;Registers Used:        None.
                          1010     ;Stack Depth:           none.
                          1011     ;Known Bugs:            None.
                          1012     ;Data Structures:       None.
                          1013     ;Error Handling:        None.
                          1014     ;Algorithms:            None.
                          1015     ;Limitations:           Only displays error to user, does not fix the error.
                          1016     ;Author:                        Anjian Wu
                          1017     ;Revision History:
                          1018     ;                   Edits by Anjian Wu:
                          1019     ;                               12-06-2013 -> Initial Version
                          1020     ;                   12-13-2013 -> Working and documentation
                          1021     ;------------------------------------------------------------------------------
01DF                      1022     Inc_Bright    PROC    NEAR
                          1023     
01DF BA62FF               1024             MOV     DX, Tmr2MaxCnt      ;  setup max count at COUNT_FOR_30HZ
01E2 ED                   1025             IN      AX, DX              ;
01E3 05F401               1026             ADD     AX, DELTA_BRIGHT    ;
01E6 3D50C3               1027             CMP     AX, MAX_BRIGHT      ;
01E9 7E01                 1028             JLE     Inc_BrightDone      ;
                          1029             ;JG     Inc_BrightGoodToGo  ;
                          1030             
01EB                      1031     Inc_BrightGoodToGo:      
01EB EF                   1032             OUT     DX, AX              ;
                          1033             
01EC                      1034     Inc_BrightDone:
                          1035     
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   19


LOC  OBJ                  LINE     SOURCE

01EC C3                   1036         RET
                          1037         
                          1038     Inc_Bright    ENDP
                          1039     
                          1040     ;Procedure:                     Dec_Bright
                          1041     ;
                          1042     ;Description:           Determines which Serial error occurred at the chip,
                          1043     ;                   and informs the user to the issue. Note this is
                          1044     ;                   serial errors from Remote Serial Chip.
                          1045     ;
                          1046     ;Operation:         * Table offset = AX = Display_SIZE*AL + OFFSET(SerErrTable)
                          1047     ;                   * Just store that into Error_Buff_PTR.
                          1048     ;                
                          1049     ;Arguments:             AL  -> Event Val
                          1050     ;Return Values:         none.
                          1051     ;Shared Variables:      Error_Buff_PTR (WRITE).
                          1052     ;Local Variables:       AX  -> abs pointer address.
                          1053     ;Global Variables:      None.                   
                          1054     ;Input:                 None.
                          1055     ;Output:                None.
                          1056     ;Registers Used:        None.
                          1057     ;Stack Depth:           none.
                          1058     ;Known Bugs:            None.
                          1059     ;Data Structures:       None.
                          1060     ;Error Handling:        None.
                          1061     ;Algorithms:            None.
                          1062     ;Limitations:           Only displays error to user, does not fix the error.
                          1063     ;Author:                        Anjian Wu
                          1064     ;Revision History:
                          1065     ;                   Edits by Anjian Wu:
                          1066     ;                               12-06-2013 -> Initial Version
                          1067     ;                   12-13-2013 -> Working and documentation
                          1068     ;------------------------------------------------------------------------------
01ED                      1069     Dec_Bright    PROC    NEAR
                          1070     
01ED BA62FF               1071             MOV     DX, Tmr2MaxCnt      ;  setup max count at COUNT_FOR_30HZ
01F0 ED                   1072             IN      AX, DX              ;
01F1 2DF401               1073             SUB     AX, DELTA_BRIGHT    ;
01F4 3D6400               1074             CMP     AX, MIN_BRIGHT      ;
01F7 7E01                 1075             JLE     Dec_BrightDone      ;
                          1076             ;JL             Dec_BrightGoodToGo  ;
                          1077             
01F9                      1078     Dec_BrightGoodToGo:      
01F9 EF                   1079             OUT     DX, AX              ;
                          1080             
01FA                      1081     Dec_BrightDone:
                          1082     
01FA C3                   1083         RET
                          1084         
                          1085     Dec_Bright    ENDP
                          1086         
                          1087     ;Procedure:                     HandleSerErr
                          1088     ;
                          1089     ;Description:           Determines which Serial error occurred at the chip,
                          1090     ;                   and informs the user to the issue. Note this is
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   20


LOC  OBJ                  LINE     SOURCE

                          1091     ;                   serial errors from Remote Serial Chip.
                          1092     ;
                          1093     ;Operation:         * Table offset = AX = Display_SIZE*AL + OFFSET(SerErrTable)
                          1094     ;                   * Just store that into Error_Buff_PTR.
                          1095     ;                
                          1096     ;Arguments:             AL  -> Event Val
                          1097     ;Return Values:         none.
                          1098     ;Shared Variables:      Error_Buff_PTR (WRITE).
                          1099     ;Local Variables:       AX  -> abs pointer address.
                          1100     ;Global Variables:      None.                   
                          1101     ;Input:                 None.
                          1102     ;Output:                None.
                          1103     ;Registers Used:        None.
                          1104     ;Stack Depth:           none.
                          1105     ;Known Bugs:            None.
                          1106     ;Data Structures:       None.
                          1107     ;Error Handling:        None.
                          1108     ;Algorithms:            None.
                          1109     ;Limitations:           Only displays error to user, does not fix the error.
                          1110     ;Author:                        Anjian Wu
                          1111     ;Revision History:
                          1112     ;                   Edits by Anjian Wu:
                          1113     ;                               12-06-2013 -> Initial Version
                          1114     ;                   12-13-2013 -> Working and documentation
                          1115     ;------------------------------------------------------------------------------
01FB                      1116     HandleSerErr    PROC    NEAR
                          1117     
                          1118     
                          1119 +1      
01FB 33DB                 1120 +1      XOR     BX, BX                  ; Clear counter
01FD B309                 1121 +2          MOV             BL, Display_SIZE+1          ; Let counter be CMD_LENGTH
01FF F6E3                 1122 +1          MUL             BL                      ; Rel pinter = CMD_LENGTH * typeindex
0201 05090290       R     1123 +2      ADD     AX, OFFSET( SerErrTable)  ;
                          1124 +1  
                          1125                                 ; Calc abs starting addr of the char string
                          1126                                 ; AX = Display_SIZE*AL + OFFSET(SerErrTable)
                          1127                                 
0205 A32000         R     1128         MOV     Error_Buff_PTR, AX ;   
                          1129     
0208 C3                   1130         RET
                          1131         
                          1132     HandleSerErr    ENDP
                          1133     
                          1134     ; Name:             SerErrTable
                          1135     ;
                          1136     ; Description:      String table containing fixed command lengths of chars that is
                          1137     ;                   outputted to display of Remote. Every string
                          1138     ;                   must end with ASCII_NULL and be size Display_SIZE + 1.
                          1139     ;                   
                          1140     ;Limitations:           Fixed length size.
                          1141     ;Author:                        Anjian Wu
                          1142     ;
                          1143     ; Revision History:
                          1144     ;                   Edits by Anjian Wu:
                          1145     ;                               12-05-2013 -> Initial Version
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   21


LOC  OBJ                  LINE     SOURCE

                          1146     ;                   12-13-2013 -> Working and documentation
0209                      1147     SerErrTable     LABEL       BYTE
                          1148     
0209 4E4F204552524F       1149         DB     'NO ERROR', ASCII_NULL   ;
     52
0211 00
0212 4F56455252554E       1150         DB     'OVERRUN ', ASCII_NULL   ; Overrun serial error
     20
021A 00
021B 20202020202020       1151         DB     '        ', ASCII_NULL   ;
     20
0223 00
0224 50415249545920       1152         DB     'PARITY  ', ASCII_NULL   ; Parity serial error
     20
022C 00
022D 20202020202020       1153         DB     '        ', ASCII_NULL   ;
     20
0235 00
0236 4652414D452020       1154         DB     'FRAME   ', ASCII_NULL   ; Frame serial error
     20
023E 00
023F 20202020202020       1155         DB     '        ', ASCII_NULL   ;
     20
0247 00
0248 20202020202020       1156         DB     '        ', ASCII_NULL   ;
     20
0250 00
0251 20202020202020       1157         DB     '        ', ASCII_NULL   ;
     20
0259 00
025A 425245414B2020       1158         DB     'BREAK   ', ASCII_NULL   ; Break int
     20
0262 00
                          1159     
                          1160     
                          1161     ;Procedure:                     HandleModem
                          1162     ;
                          1163     ;Description:           Stub function for now.
                          1164     ;                
                          1165     ;Arguments:             None.
                          1166     ;Return Values:         none.
                          1167     ;Shared Variables:      None
                          1168     ;Local Variables:       None.
                          1169     ;Global Variables:      None.                   
                          1170     ;Input:                 None.
                          1171     ;Output:                None.
                          1172     ;Registers Used:        None.
                          1173     ;Stack Depth:           none.
                          1174     ;Known Bugs:            None.
                          1175     ;Data Structures:       None.
                          1176     ;Error Handling:        None.
                          1177     ;Algorithms:            None.
                          1178     ;Limitations:           None.
                          1179     ;Author:                        Anjian Wu
                          1180     ;Revision History:
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   22


LOC  OBJ                  LINE     SOURCE

                          1181     ;                   Edits by Anjian Wu:
                          1182     ;                   12-06-2013 -> Pseudo code
                          1183     ;                   12-13-2013 -> Working and documentation
                          1184     ;------------------------------------------------------------------------------
0263                      1185     HandleModem    PROC    NEAR
                          1186     
0263 C3                   1187         RET
                          1188         
                          1189     HandleModem    ENDP
                          1190     
                          1191     ;Function:                      RemoteParseInit
                          1192     ;Description:           Resets all Parser variables to initial state, zero magnitude,
                                    and pos sign     
                          1193     ;Operation:         * Set sign as POS, set FSM_state as ST_INITIAL, and set magnitude
                                    as zero         
                          1194     ;Arguments:             None.
                          1195     ;Return Values:         none.
                          1196     ;Shared Variables:      none.
                          1197     ;Local Variables:       None.
                          1198     ;Global Variables:      None.                   
                          1199     ;Input:                 None.
                          1200     ;Output:                None.
                          1201     ;Registers Used:        none.
                          1202     ;Stack Depth:           none.
                          1203     ;Known Bugs:            None.
                          1204     ;Data Structures:       None.
                          1205     ;Error Handling:        None
                          1206     ;Algorithms:            None.
                          1207     ;Limitations:           None.
                          1208     ;Author:                        Anjian Wu
                          1209     ;Author:                        Anjian Wu
                          1210     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1211     ;                   12-08-2013: Documentation - Anjian Wu
                          1212     ;------------------------------------------------------------------------------
0264                      1213     RemoteParseInit  PROC    NEAR
                          1214                 
0264 C60609000090   R     1215         MOV     Dir_PTR, zero               ; Reset Direction Buff ptr
026A C60613000090   R     1216         MOV     Spd_PTR, zero               ; Reset Speed Buff ptr
0270 C70625000000   R     1217         MOV     ToggleCTR, zero             ; Start with first Status to toggle
0276 C6061D000090   R     1218         MOV     Rbt_error_Ptr, zero         ; Reset Robot Buff ptr
027C C70627000000   R     1219         MOV     TogglePreScaler, zero       ; Reset Toggle Prescale counter
                          1220         
0282 C7061E00CD01   R     1221         MOV     Action_Buff_PTR, OFFSET(KeyDisplayInit) ; Display NO actions yet
0288 C70620000902   R     1222         MOV     Error_Buff_PTR, OFFSET(SerErrTable)     ; Display NO error yet
028E C60624000090   R     1223         MOV     FSM_state, ST_INITIAL                   ; Initialize FSM at start state
                          1224         
0294 33DB                 1225         XOR     BX, BX                      ; Clear Counter
                          1226             
0296                      1227     RemoteParseInitBufClear:
                          1228     
0296 83FB08               1229         CMP     BX, Display_SIZE             ; FROM BX = 0 to Display_SIZE...
0299 7F15                 1230         JG     RemoteParseInitBufClearDone   ; If each done, then leave loop
                          1231         
029B C68700000090   R     1232         MOV     Dir_Buffer[BX], ASCII_NULL  ; Clear direction displayed
02A1 C6870A000090   R     1233         MOV     Spd_Buffer[BX], ASCII_NULL  ; Clear speed displayed
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   23


LOC  OBJ                  LINE     SOURCE

02A7 C68714000090   R     1234         MOV     Rbt_error_Buff[BX], ASCII_NULL  ; Clear Robot status
                          1235     
02AD 43                   1236         INC     BX                          ; Increment buffer/counter index
02AE EBE6                 1237         JMP     RemoteParseInitBufClear     ; Loop until all entries are cleared
                          1238         
02B0                      1239     RemoteParseInitBufClearDone:
                          1240     
02B0 33C0                 1241         XOR     AX, AX          ;clear ES (interrupt vectors are in segment 0)
02B2 8EC0                 1242         MOV     ES, AX
                          1243                                 ;store the vector
02B4 26C7062000C302 R     1244         MOV     ES: WORD PTR (4 * Tmr0Vec), OFFSET(ToggleHandler)   ; Install ToggleHandl
                                   er
02BB 26C7062200---- R     1245         MOV     ES: WORD PTR (4 * Tmr0Vec + 2), SEG(ToggleHandler)
                          1246         
                          1247     
02C2 C3                   1248             RET
                          1249             
                          1250     RemoteParseInit  ENDP  
                          1251     
                          1252     ;Function:                      ToggleHandler
                          1253     ;Description:           This timer event actually outputs various display buffers to 
                                   be displayed.
                          1254     ;                   Based on the ToggleCTR, the display muxes the ACTION, SPEED, DIRE
                                   CTION, 
                          1255     ;                   INTERNAL SERIAL ERRORS, and ROBOT ERRORS vals, as well as their l
                                   abels.
                          1256     ;                   To enable toggling on magnitude of seconds, there is a prescale c
                                   ounter
                          1257     ;                   that effectively muxes what is displayed every PRESCALE interrupt
                                   s. Thus
                          1258     ;                   this is a nested counter
                          1259     ;
                          1260     ;Operation:         * Set sign as POS, set FSM_state as ST_INITIAL, and set magnitude
                                    as zero         
                          1261     ;Arguments:             None.
                          1262     ;Return Values:         none.
                          1263     ;Shared Variables:      none.
                          1264     ;Local Variables:       None.
                          1265     ;Global Variables:      None.                   
                          1266     ;Input:                 None.
                          1267     ;Output:                None.
                          1268     ;Registers Used:        none.
                          1269     ;Stack Depth:           none.
                          1270     ;Known Bugs:            None.
                          1271     ;Data Structures:       None.
                          1272     ;Error Handling:        None
                          1273     ;Algorithms:            None.
                          1274     ;Limitations:           None.
                          1275     ;Author:                        Anjian Wu
                          1276     ;Author:                        Anjian Wu
                          1277     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1278     ;                   12-08-2013: Documentation - Anjian Wu
                          1279     ;                   12-11-2013: Fixed bug with prescaler and args passing to display 
                                   - Anjian Wu
                          1280     ;------------------------------------------------------------------------------
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   24


LOC  OBJ                  LINE     SOURCE

02C3                      1281     ToggleHandler   PROC    NEAR
                          1282         
02C3 60                   1283         PUSHA                               ; Save all Regs
02C4                      1284     TogglePrescale:
02C4 FF062700       R     1285         INC     TogglePreScaler            ; Increase the prescale counter
02C8 813E2700E803   R     1286         CMP     TogglePreScaler, PRESCALE  ; Are we done prescaling?
02CE 7C79                 1287         JL      ToggleDone                 ; Not yet, just exit
                          1288         ;JGE     TogglePrescalePass        ; Yes! So change what is displayed
02D0                      1289     TogglePrescalePass:    
02D0 C70627000000   R     1290         MOV     TogglePreScaler, zero      ; Reset Prescale counter
                          1291     
02D6 833E25000A     R     1292         CMP     ToggleCTR, numOfStatus     ; Finished with all status?
02DB 7C06                 1293         JL      ToggleMux                  ; Not yet, grab next one
                          1294         ;JGE    ToggleMuxReset             ; yes so loop back
02DD                      1295     ToggleMuxReset:
02DD C70625000000   R     1296         MOV     ToggleCTR, zero             ; Reset Toggle index
                          1297         ;JMP    ToggleMux                   ; Go display initial message
02E3                      1298     ToggleMux:
02E3 8B1E2500       R     1299         MOV     BX, ToggleCTR               ; Use ToggleCTR for table look up
02E7 D1E3                 1300         SHL     BX, WORD_LOOKUP_ADJUST      ; Adjust for WORD table
02E9 2EFFA77F03     R     1301         JMP     CS:Toggle_JMP_Table[BX]     ; Call jump into properly mapped function
                          1302         
02EE                      1303     T_Action_Val:    
02EE A11E00         R     1304         MOV     AX, Action_Buff_PTR         ; Time to display Action msg
                          1305 +1      
02F1 8BF0                 1306 +2      MOV     SI, AX          ; Prepare for display at SI
02F3 8CC8                 1307 +2      MOV     AX, CS          ;
02F5 8EC0                 1308 +2      MOV     ES, AX          ; String is in code segment
                          1309 +1                 ; This is in CS
02F7 EB4990               1310         JMP     ToggleSet                   ; Display!
                          1311         
02FA                      1312     T_Speed_Val:    
02FA 8D060A00       R     1313         LEA     AX, Spd_Buffer              ; Time to display Speed buffer
                          1314 +1      
02FE 8BF0                 1315 +2      MOV     SI, AX          ; Prepare for display at SI
0300 8CD8                 1316 +2      MOV     AX, DS          ;
0302 8EC0                 1317 +2      MOV     ES, AX          ; String is in code segment
                          1318 +1                 ; This is in DS
0304 EB3C90               1319         JMP     ToggleSet                   ; Display!
                          1320         
0307                      1321     T_Angle_Val:        
0307 8D060000       R     1322         LEA     AX, Dir_Buffer              ; Time to display direction buffer
                          1323 +1      
030B 8BF0                 1324 +2      MOV     SI, AX          ; Prepare for display at SI
030D 8CD8                 1325 +2      MOV     AX, DS          ;
030F 8EC0                 1326 +2      MOV     ES, AX          ; String is in code segment
                          1327 +1                 ; This is in DS
0311 EB2F90               1328         JMP     ToggleSet                   ; Display!
                          1329         
0314                      1330     T_Error_Val:        
0314 A12000         R     1331         MOV     AX, Error_Buff_PTR          ; Time to display error msg
                          1332 +1      
0317 8BF0                 1333 +2      MOV     SI, AX          ; Prepare for display at SI
0319 8CC8                 1334 +2      MOV     AX, CS          ;
031B 8EC0                 1335 +2      MOV     ES, AX          ; String is in code segment
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   25


LOC  OBJ                  LINE     SOURCE

                          1336 +1                 ; This is in CS
031D EB2390               1337         JMP     ToggleSet                   ; Display!
                          1338         
0320                      1339     T_R_Error_Val:
0320 8D061400       R     1340         LEA     AX, Rbt_error_Buff           ; Time to display error msg
                          1341 +1      
0324 8BF0                 1342 +2      MOV     SI, AX          ; Prepare for display at SI
0326 8CD8                 1343 +2      MOV     AX, DS          ;
0328 8EC0                 1344 +2      MOV     ES, AX          ; String is in code segment
                          1345 +1                  ; This is in DS
032A EB1690               1346         JMP     ToggleSet                    ; Display!
                          1347         
032D                      1348     T_Label:
032D A12500         R     1349         MOV     AX, ToggleCTR               ; Display LABEL of that action
0330 D1E8                 1350         SHR     AX, bit_size                ; All 'labels' are EVEN indexed, thus we can
                          1351                                             ; map the JMP table offset to the string offs
                                   et
                          1352                                             ; with just a simple SHR 1.
                          1353 +1      
0332 33DB                 1354 +1      XOR     BX, BX                  ; Clear counter
0334 B309                 1355 +2          MOV             BL, Display_SIZE+1          ; Let counter be CMD_LENGTH
0336 F6E3                 1356 +1          MUL             BL                      ; Rel pinter = CMD_LENGTH * typeindex
0338 05520390       R     1357 +2      ADD     AX, OFFSET( Toggle_Label_Table)  ;
                          1358 +1  ; Calc ABS address into AX
                          1359         
                          1360 +1      
033C 8BF0                 1361 +2      MOV     SI, AX          ; Prepare for display at SI
033E 8CC8                 1362 +2      MOV     AX, CS          ;
0340 8EC0                 1363 +2      MOV     ES, AX          ; String is in code segment
                          1364 +1                 ; String in CS
                          1365         ;JMP     ToggleSet
                          1366         
0342                      1367     ToggleSet:
0342 E80000         E     1368         CALL    Display                     ; Pass ES:SI to be displayed, ASCII_NULL term
                                   inated
                          1369         
0345 FF062500       R     1370         INC     ToggleCTR                   ; Increment counter for next time
                          1371         
0349                      1372     ToggleDone:; Send out EOI as usual
                          1373     
0349 BA22FF               1374         MOV     DX, INTCtrlrEOI             ;All timers share same EOI
034C B80800               1375         MOV     AX, TimerEOI
034F EE                   1376         OUT     DX, AL                      ; Send out Timer EOI
                          1377         
                          1378         
0350 61                   1379         POPA                                ; Restore all Regs
                          1380         
0351 CF                   1381         IRET
                          1382         
                          1383     ToggleHandler   ENDP
                          1384     
                          1385     ; Name:             Toggle_Label_Table
                          1386     ;
                          1387     ; Description:      String table containing fixed command lengths of chars that is
                          1388     ;                   outputted to display of Remote and shows LABELS. This is because
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   26


LOC  OBJ                  LINE     SOURCE

                          1389     ;                   the actual values take up much of the 8 chars, so it is more
                          1390     ;                   effective to first display the label and then the val afterwards.
                          1391     ;                   Must end with ASCII_NULL and be size Display_SIZE + 1.
                          1392     ;                   
                          1393     ;Limitations:           Fixed length size.
                          1394     ;Author:                        Anjian Wu
                          1395     ;
                          1396     ; Revision History:
                          1397     ;                   Edits by Anjian Wu:
                          1398     ;                               12-05-2013 -> Initial Version
                          1399     ;                   12-13-2013 -> Working and documentation
0352                      1400     Toggle_Label_Table          LABEL       BYTE
                          1401     
                          1402                               
0352 416374696F6E3A       1403             DB              'Action:?', ASCII_NULL      ;0
     3F
035A 00
035B 53706565643A20       1404             DB              'Speed: ?', ASCII_NULL      ;1
     3F
0363 00
0364 416E676C653A20       1405             DB              'Angle: ?', ASCII_NULL      ;2
     3F
036C 00
036D 4572726F72733A       1406             DB              'Errors:?', ASCII_NULL      ;3
     3F
0375 00
0376 526F626F743A20       1407             DB              'Robot: ?', ASCII_NULL      ;4
     3F
037E 00
                          1408     
                          1409     ; Name:             Toggle_JMP_Table
                          1410     ;
                          1411     ; Description:      String table contains the jmp labels, which is mapped from
                          1412     ;                   the Toggle counter. Notice that T_Label occurs every OTHER
                          1413     ;                   EVEN value. This is convenient since Label values are FIXED
                          1414     ;                   any ways.
                          1415     ;                   
                          1416     ;Limitations:           None.
                          1417     ;Author:                        Anjian Wu
                          1418     ;
                          1419     ; Revision History:
                          1420     ;                   Edits by Anjian Wu:
                          1421     ;                               12-05-2013 -> Initial Version
                          1422     ;                   12-13-2013 -> Working and documentation
037F                      1423     Toggle_JMP_Table            LABEL       WORD
                          1424                                         
037F 2D03           R     1425             DW              T_Label             ;0 - Action Label
0381 EE02           R     1426             DW              T_Action_Val    ;1 - Action Val
0383 2D03           R     1427             DW              T_Label             ;2 - Speed Label
0385 FA02           R     1428             DW              T_Speed_Val     ;3 - Speed Val
0387 2D03           R     1429             DW              T_Label             ;4 - Angle Label
0389 0703           R     1430             DW              T_Angle_Val         ;5 - Angle Val
038B 2D03           R     1431             DW              T_Label             ;6 - Error Label
038D 1403           R     1432             DW              T_Error_Val         ;7 = Error Val
038F 2D03           R     1433             DW              T_Label             ;8 - Robot Error Label
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   27


LOC  OBJ                  LINE     SOURCE

0391 2003           R     1434             DW              T_R_Error_Val   ;9 - Robot Error Val   
                          1435         
                          1436     ;Procedure:                     ParseRemoteChar
                          1437     ;
                          1438     ;Description:           Used pass char in AX to grab NEXT token val and type, and use
                                   s
                          1439     ;                   that to calc the proper pointer to the function to be called
                          1440     ;                   by the state machine. The token TYPE is used to find the abs
                          1441     ;                   action function offset and the token TYPE is always passed as
                          1442     ;                   (AL) into the action function. The action function, however, may
                          1443     ;                   or may not use the passed token val. The next FSM state is also
                          1444     ;                   saved in a shared variable FSM_state for the next time.
                          1445     ;
                          1446     ;                   If the state machine returns to ST_INITIAL then it also resets 
                          1447     ;                   the parser variables. If there is an error detected after the act
                                   ion
                          1448     ;                   function is call, then the function will also reset the parser 
                          1449     ;                   variables.
                          1450     ;                   
                          1451     ;                   This function always returns error status in AX. See 'Error Handl
                                   ing'.
                          1452     ;
                          1453     ;Operation:         * Clear Errorflag, grab next token val and key using GetTokenType
                                   Val.
                          1454     ;                   * offset = (NUM_TOKEN_TYPES * FSM_State + token type)* SIZE TRANS
                                   ITION_ENTRY
                          1455     ;                   * Call Function (Action) using offset, passing token val in AL
                          1456     ;                   * If Errorflag is true, store FSM_state and FSM_ERROR bytes into 
                                   AX for return
                          1457     ;                       * Call ParseReset
                          1458     ;                   * Else, grab nextstate using offset, store the next state into FS
                                   M_state
                          1459     ;                       * If next state is ST_INITIAL, then Call ParseReset
                          1460     ;                   * Return Errorflag in AX 
                          1461     ;
                          1462     ;Arguments:             AL   -> The next char to be parsed
                          1463     ;
                          1464     ;Return Values:         AX - > The errorflag
                          1465     ;
                          1466     ;Shared Variables:      Errorflag (WRITE/READ)
                          1467     ;                   FSM_state (READ/WRITE)
                          1468     ;
                          1469     ;Local Variables:       AL      -   token val, char
                          1470     ;                   AH      -   token type
                          1471     ;                   AX      -   error, char
                          1472     ;                   BX      -   table offset
                          1473     ;                   DH      -   save token type
                          1474     ;                   CH      -   save token val
                          1475     ;                   
                          1476     ;                   
                          1477     ;Global Variables:      None.                                   
                          1478     ;Input:                 none.
                          1479     ;Output:                none.
                          1480     ;Registers Used:        AX, BX, CH, DH
                          1481     ;Stack Depth:           3 words
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   28


LOC  OBJ                  LINE     SOURCE

                          1482     ;Known Bugs:            None.
                          1483     ;Data Structures:       None.
                          1484     ;Error Handling:        Errors come in two ways:
                          1485     ;                   FSM TYPE 1. Symbol/Char error -> NEXTSTATE already is ST_INITIAL
                          1486     ;                   FSM TYPE 2. Value error  -> NEXTSTATE may or may not be ST_INITIA
                                   L
                          1487     ;                   These errors are treated the same in that the return value AX
                          1488     ;                   will contain the FSM_State in AL and the FSM_ERROR key in AH. The
                                    FSM
                          1489     ;                   will also RESET immediately if error is seen.
                          1490     ;
                          1491     ;Algorithms:        Call Table FSM look up. Table offset = NUM_TOKEN_TYPES * FSM_Stat
                                   e + token type
                          1492     ;Limitations:           None.
                          1493     ;Author:                        Anjian Wu
                          1494     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1495     ;                                       12-04-2013: Modified from Glen's floatptd.asm
                                    - Anjian Wu 
                          1496     ;                   12-08-2013: Working - Anjian Wu
                          1497     ;                   12-10-2013: Adapted for Remote - Anjian Wu
                          1498     ;------------------------------------------------------------------------------
                          1499     
0393                      1500     ParseRemoteChar         PROC    NEAR
                          1501     
0393                      1502     ParseSerialInit:
                          1503     
0393 52                   1504         PUSH        DX       ; Save all Regs
0394 53                   1505             PUSH    BX
0395 51                   1506             PUSH    CX              
                          1507             
0396 C70622000000   R     1508         MOV Errorflag, FALSE            ;Assume no errors
                          1509             
039C                      1510     ParseGrabTokens:        
039C E84600               1511             CALL    GetTokenTypeVal         ; Grab next token key and val
039F 8AF4                 1512             MOV             DH, AH                      ; Save token type
03A1 8AE8                 1513             MOV             CH, AL                      ; Save token val
                          1514             
03A3                      1515     ParseComputeTrans:                      ;figure out what transition to do
03A3 B006                 1516             MOV             AL, NUM_TOKEN_TYPES     ;find row in the table
03A5 F6262400       R     1517             MUL             FSM_State           ;Get to current FSM state
03A9 02C6                 1518             ADD             AL, DH                  ;Calc abs transition inside that stat
                                   e
03AB 80D400               1519             ADC             AH, zero                     ;propagate low byte carry into h
                                   igh byte
                          1520     
03AE 6BD80390             1521             IMUL    BX, AX, SIZE TRANSITION_ENTRY   ;now convert to table offset
                          1522     
03B2                      1523     ParseDoActions:                             ;do the actions (don't affect regs)
                          1524     
03B2 8AC5                 1525             MOV             AL, CH                      ;Pass Token Val (not always used 
                                   by ACTION)
03B4 2EFF977304     R     1526             CALL    CS:RemoteFSMTable[BX].ACTION    ;do the actions
                          1527     
03B9                      1528     ParseCheckError:
03B9 833E220001     R     1529         CMP     Errorflag, TRUE     ; Was there an error from the FSM action?
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   29


LOC  OBJ                  LINE     SOURCE

                          1530                                     ; Errors can come in two ways
                          1531                                     ; FSM TYPE 1. Symbol/Char error -> NEXTSTATE already 
                                   is ST_INITIAL
                          1532                                     ; FSM TYPE 2. Value error  -> NEXTSTATE may or may no
                                   t be ST_INITIAL
03BE 750B                 1533         JNE     ParseNextTransition ; Nope, so grab the next one
                          1534         ;JE     ParseRecordError    ; There was an error
                          1535         
03C0                      1536     ParseRecordError:
03C0 A02400         R     1537         MOV     AL, FSM_State       ; Store the current state before it is updated 
                          1538                                     ; since it where there that error was found
03C3 B404                 1539         MOV     AH, FSM_ERROR       ; Indicate that this was an FSM error (This
                          1540                                     ; differentiates a value of FALSE vs. error in FSM_St
                                   ate = 0)
                          1541                                     
03C5 A32200         R     1542         MOV     Errorflag, AX       ; Store that state as an error-type
03C8 EB1190               1543         JMP     ParseNeedReset      ; We just got error, thus immediately exit this cmd p
                                   ath
                          1544                                     ; and go back to ST_INITIAL to wait for VALID next cm
                                   d.
                          1545                                     ; * Notice this IS redundant for FSM TYPE 1 errors si
                                   nce nxt state
                          1546                                     ;   is already ST_INITIAL, however
                          1547                                     ;   we treat all errors the same to simplify code.
                          1548         
03CB                      1549     ParseNextTransition:                    ;now go to next state
                          1550     
03CB 2E8A8F7204     R     1551             MOV             CL, CS:RemoteFSMTable[BX].NEXTSTATE
03D0 880E2400       R     1552         MOV     FSM_state, CL   ; We need this nextstate stored for next time.
                          1553         
03D4 803E240000     R     1554             CMP             FSM_state, ST_INITIAL   ; Did the state machine restart?
03D9 7503                 1555             JNE             ParseDone           ; If not then just continue.
                          1556             ;JE             ParseNeedReset  ; Else we need to reset some parser variables
03DB                      1557     ParseNeedReset:
03DB E81A00               1558             CALL    RemoteParseReset; Reset parser variables (FSM_STATE, magnitude, sign)
                          1559         ;JMP    ParseDone       ;
03DE                      1560     ParseDone:
03DE A12200         R     1561         MOV     AX, Errorflag       ; Restore the error (if any) back into AX for return
                          1562                                     ; AH - whether or not error happened, AL - FSM_state 
                                   (if error)
                          1563         
03E1 59                   1564             POP  CX
03E2 5B                   1565             POP      BX
03E3 5A                   1566             POP  DX                     ; Restore used regs
                          1567             
                          1568         
03E4 C3                   1569         RET
                          1570         
                          1571     ParseRemoteChar ENDP
                          1572     
                          1573     ; GetTokenTypeVal
                          1574     ;
                          1575     ; Description:      This procedure returns the token class and token value for
                          1576     ;                   the passed character.  The character is truncated to
                          1577     ;                   7-bits because the table only has 127 ASCII chars inside.
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   30


LOC  OBJ                  LINE     SOURCE

                          1578     ;
                          1579     ; Operation:        Looks up the passed character in two tables, one for token
                          1580     ;                   types or classes, the other for token values.
                          1581     ;
                          1582     ; Arguments:        AL - character to look up.
                          1583     ; Return Value:     AL - token value for the character.
                          1584     ;                   AH - token type or class for the character.
                          1585     ;
                          1586     ; Local Variables:  BX - table pointer, points at lookup tables.
                          1587     ; Shared Variables: None.
                          1588     ; Global Variables: None.
                          1589     ;
                          1590     ; Input:            None.
                          1591     ; Output:           None.
                          1592     ;
                          1593     ; Error Handling:   None.
                          1594     ;
                          1595     ; Algorithms:       Table lookup.
                          1596     ; Data Structures:  Two tables, one containing token values and the other
                          1597     ;                   containing token types.
                          1598     ;
                          1599     ; Registers Used:   AX, BX.
                          1600     ; Stack Depth:      0 words.
                          1601     ;
                          1602     ; Author:           Anjian Wu
                          1603     ; Last Modified:    12-02-2013: Adapted from Glen's floatptd.asm - Anjian Wu :)
                          1604     ;                   12-08-2013: Add documentation to show understanding - Anjian Wu
                          1605     
                          1606     
03E5                      1607     GetTokenTypeVal PROC    NEAR
                          1608     
                          1609     
03E5                      1610     InitGetFPToken:                         ;setup for lookups
03E5 247F                 1611             AND     AL, TOKEN_MASK          ;strip unused bits (high bit) ONLY 127 CHARS 
                                   IN TABLE
03E7 8AE0                 1612             MOV     AH, AL                      ;and preserve value in AH
                          1613     
                          1614     ; TokenTypeTable and TokenValueTable's values are paired/mapped one to one
                          1615     
03E9                      1616     TokenTypeLookup:                        ;get the token type
03E9 BBBA0490       R     1617         MOV     BX, OFFSET(TokenTypeTable)  ;BX points at table
03ED 2ED7                 1618             XLAT    CS:TokenTypeTable               ;have token type in AL
03EF 86E0                 1619             XCHG    AH, AL                              ;token type in AH, character in A
                                   L
                          1620     
03F1                      1621     TokenValueLookup:                                    ;get the token value
03F1 BB3A0590       R     1622         MOV     BX, OFFSET(TokenValueTable)  ;BX points at table
03F5 2ED7                 1623             XLAT    CS:TokenValueTable               ;have token value in AL
                          1624     
                          1625     
03F7                      1626     EndGetFPToken:                               ;done looking up type and value
03F7 C3                   1627             RET
                          1628     
                          1629     
                          1630     GetTokenTypeVal ENDP
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   31


LOC  OBJ                  LINE     SOURCE

                          1631     
                          1632     
                          1633     ;Function:                      RemoteParseReset
                          1634     ;Description:           Resets all Parser variables to initial state and all display 
                                   buffer ptrs  
                          1635     ;                   Note that these are the ptrs for data segment buffers only since 
                                   they are
                          1636     ;                   the ones that get each char ele parsed and written.
                          1637     ;           
                          1638     ;Operation:         * Set FSM_state to initial, Dir_PTR, Spd_PTR, and Rbt_error_Ptr r
                                   eset.
                          1639     ;Arguments:             None.
                          1640     ;Return Values:         none.
                          1641     ;Shared Variables:      none.
                          1642     ;Local Variables:       None.
                          1643     ;Global Variables:      None.                   
                          1644     ;Input:                 None.
                          1645     ;Output:                None.
                          1646     ;Registers Used:        none.
                          1647     ;Stack Depth:           none.
                          1648     ;Known Bugs:            None.
                          1649     ;Data Structures:       None.
                          1650     ;Error Handling:        None
                          1651     ;Algorithms:            None.
                          1652     ;Limitations:           None.
                          1653     ;Author:                        Anjian Wu
                          1654     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1655     ;                                       12-10-2013: Created - Anjian Wu
                          1656     ;                   12-13-2013: Working - Anjian Wu
                          1657     ;                   12-14-2013: Documentation - Anjian Wu
                          1658     ;------------------------------------------------------------------------------
03F8                      1659     RemoteParseReset  PROC    NEAR
                          1660                 
03F8 C60609000090   R     1661         MOV     Dir_PTR, zero               ; Reset Direction Buffer
03FE C60613000090   R     1662         MOV     Spd_PTR, zero               ; Reset Speed Buffer
0404 C6061D000090   R     1663         MOV     Rbt_error_Ptr, zero         ; Reset Robot Status Buffer
040A C60624000090   R     1664         MOV     FSM_state, ST_INITIAL       ; Reset FSM
0410 C3                   1665             RET
                          1666             
                          1667     RemoteParseReset  ENDP                   
                          1668     
                          1669     ;Procedure:                     SetError
                          1670     ;
                          1671     ;Description:           An error has occurred, so set the error flag true.
                          1672     ;
                          1673     ;Operation:         * Errorflag = TRUE
                          1674     ;        
                          1675     ;Arguments:             None.
                          1676     ;Return Values:         none.
                          1677     ;Shared Variables:      Errorflag(write)
                          1678     ;Local Variables:       None.
                          1679     ;Global Variables:      None.                   
                          1680     ;Input:                 None.
                          1681     ;Output:                None.
                          1682     ;Registers Used:        AH, AL
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   32


LOC  OBJ                  LINE     SOURCE

                          1683     ;Stack Depth:           none.
                          1684     ;Known Bugs:            None.
                          1685     ;Data Structures:       None.
                          1686     ;Error Handling:        None
                          1687     ;Algorithms:            None.
                          1688     ;Limitations:           None.
                          1689     ;Author:                        Anjian Wu
                          1690     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1691     ;                   12-08-2013: Documentation - Anjian Wu
                          1692     ;------------------------------------------------------------------------------
0411                      1693     SetError        PROC    NEAR
                          1694     
0411 C70622000100   R     1695         MOV     Errorflag, TRUE     ; An error has occurred
                          1696     
0417 C3                   1697         RET
                          1698         
                          1699     SetError ENDP
                          1700     
                          1701     ;Procedure:                     AddRobotErrorChar
                          1702     ;
                          1703     ;Description:           Inserts the next parsed CHAR into the Robot status buffer
                          1704     ;                   which is the direct buffer passed to Display in TogleHandler.
                          1705     ;                   Function uses Rbt_error_Ptr to index which ele in buffer.
                          1706     ;
                          1707     ;Operation:         * Is the pointer > Dispaly_Size?
                          1708     ;                       * IF so, then there is an error, so set it and exit
                          1709     ;                   * Else put the pointer into BX and move Rbt_error_Buff[BX] 
                          1710     ;                     into AL.
                          1711     ;                   * Increment the pointer
                          1712     ;                
                          1713     ;Arguments:         AL - The char to be inserted
                          1714     ;Return Values:         None.
                          1715     ;Shared Variables:      Rbt_error_Ptr(WRITE/READ)
                          1716     ;Local Variables:       BX  -> Holds element index
                          1717     ;                   
                          1718     ;Global Variables:      None.                   
                          1719     ;Input:                 None.
                          1720     ;Output:                None.
                          1721     ;Registers Used:        BX, AL
                          1722     ;Stack Depth:           1 Word
                          1723     ;Known Bugs:            None.
                          1724     ;Data Structures:       None.
                          1725     ;Error Handling:        If the pointer exceeds the display size, then DO NOT insert
                          1726     ;                   the next char, instead call error. That way the FSM will auto
                          1727     ;                   reset.
                          1728     ;Algorithms:            None.
                          1729     ;Limitations:           Cannot display a robot status string longer than display.
                          1730     ;                   Instead it is truncated.
                          1731     ;Author:                        Anjian Wu
                          1732     ;History:                       12-12-2013: created - Anjian Wu
                          1733     ;                   12-13-2013: Documentation - Anjian Wu
                          1734     ;------------------------------------------------------------------------------
0418                      1735     AddRobotErrorChar    PROC    NEAR
                          1736     
0418 53                   1737         PUSH    BX                             ; Save used reg
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   33


LOC  OBJ                  LINE     SOURCE

                          1738     
0419 803E1D0008     R     1739         CMP     Rbt_error_Ptr, Display_SIZE    ; Is the pointer out of Display_Size?
                          1740         
041E 7F11                 1741         JG      AddRobotErrorCharNoNo          ; Yes, so set error to reset state machine
                                   .
                          1742         
0420 32FF                 1743         XOR     BH, BH                  ; 
0422 8A1E1D00       R     1744         MOV     BL, Rbt_error_Ptr       ; Convert Rbt_error_Ptr BYTE into WORD
                          1745      
0426 88871400       R     1746         MOV     Rbt_error_Buff[BX], AL  ; Insert the char arg
                          1747         
042A FE061D00       R     1748         INC     Rbt_error_Ptr           ; Update pointer 
                          1749         
042E EB0490               1750         JMP     AddRobotErrorCharDone   ; Done
0431                      1751     AddRobotErrorCharNoNo:
                          1752         
0431 E8DDFF               1753         CALL    SetError                ; Set the error to reset FSM
                          1754        
0434                      1755     AddRobotErrorCharDone:
0434 5B                   1756         POP     BX                      ; Restore used reg
                          1757     
0435 C3                   1758         RET                             ;
                          1759     
                          1760     AddRobotErrorChar    ENDP
                          1761     
                          1762     ;Procedure:                     AddDirChar
                          1763     ;
                          1764     ;Description:           Inserts the next parsed CHAR into the Direction status buffer
                          1765     ;                   which is the direct buffer passed to Display in TogleHandler.
                          1766     ;                   Function uses Dir_PTR to index which ele in buffer.
                          1767     ;
                          1768     ;Operation:         * Is the pointer > Dispaly_Size?
                          1769     ;                       * IF so, then there is an error, so set it and exit
                          1770     ;                   * Else put the pointer into BX and move Dir_Buffer[BX] 
                          1771     ;                     into AL.
                          1772     ;                   * Increment the pointer
                          1773     ;                
                          1774     ;Arguments:         AL - The char to be inserted
                          1775     ;Return Values:         None.
                          1776     ;Shared Variables:      Dir_PTR(WRITE/READ)
                          1777     ;Local Variables:       BX  -> Holds element index
                          1778     ;                   
                          1779     ;Global Variables:      None.                   
                          1780     ;Input:                 None.
                          1781     ;Output:                None.
                          1782     ;Registers Used:        BX, AL
                          1783     ;Stack Depth:           1 Word
                          1784     ;Known Bugs:            None.
                          1785     ;Data Structures:       None.
                          1786     ;Error Handling:        If the pointer exceeds the display size, then DO NOT insert
                          1787     ;                   the next char, instead call error. That way the FSM will auto
                          1788     ;                   reset.
                          1789     ;Algorithms:            None.
                          1790     ;Limitations:           Cannot display a robot status string longer than display.
                          1791     ;                   Instead it is truncated.
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   34


LOC  OBJ                  LINE     SOURCE

                          1792     ;Author:                        Anjian Wu
                          1793     ;History:                       12-11-2013: created/ worked - Anjian Wu
                          1794     ;                   12-13-2013: Documentation - Anjian Wu
                          1795     ;------------------------------------------------------------------------------
0436                      1796     AddDirChar    PROC    NEAR
                          1797     
0436 53                   1798         PUSH    BX                      ; Save used reg                      
                          1799         
0437 803E090008     R     1800         CMP     Dir_Ptr, Display_SIZE   ; Save used reg
                          1801         
043C 7F11                 1802         JG      AddDirCharNoNo          ;Is the pointer out of Display_Size?
                          1803         
043E 32FF                 1804         XOR     BH, BH                  ;Yes, so set error to reset state machine.
0440 8A1E0900       R     1805         MOV     BL, Dir_PTR             ;Convert pointer BYTE into WORD
                          1806      
0444 88870000       R     1807         MOV     Dir_Buffer[BX], AL      ;Insert the char arg
                          1808         
0448 FE060900       R     1809         INC     Dir_PTR                 ;Update pointer 
                          1810         
044C EB0490               1811         JMP     AddDirCharDone          ; Done
                          1812         
044F                      1813     AddDirCharNoNo:
                          1814         
044F E8BFFF               1815         CALL    SetError                ; Set the error to reset FSM   
                          1816         
0452                      1817     AddDirCharDone:
0452 5B                   1818         POP     BX                      ; Restore used reg
                          1819     
0453 C3                   1820         RET                             ;
                          1821     
                          1822     AddDirChar    ENDP
                          1823     
                          1824     ;Procedure:                     AddSpeedChar
                          1825     ;
                          1826     ;Description:           Inserts the next parsed CHAR into the Direction status buffer
                          1827     ;                   which is the direct buffer passed to Display in TogleHandler.
                          1828     ;                   Function uses Spd_Ptr to index which ele in buffer.
                          1829     ;
                          1830     ;Operation:         * Is the pointer > Dispaly_Size?
                          1831     ;                       * IF so, then there is an error, so set it and exit
                          1832     ;                   * Else put the pointer into BX and move Spd_Buffer[BX] 
                          1833     ;                     into AL.
                          1834     ;                   * Increment the pointer
                          1835     ;                
                          1836     ;Arguments:         AL - The char to be inserted
                          1837     ;Return Values:         None.
                          1838     ;Shared Variables:      Spd_Ptr(WRITE/READ)
                          1839     ;Local Variables:       BX  -> Holds element index
                          1840     ;                   
                          1841     ;Global Variables:      None.                   
                          1842     ;Input:                 None.
                          1843     ;Output:                None.
                          1844     ;Registers Used:        BX, AL
                          1845     ;Stack Depth:           1 Word
                          1846     ;Known Bugs:            None.
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   35


LOC  OBJ                  LINE     SOURCE

                          1847     ;Data Structures:       None.
                          1848     ;Error Handling:        If the pointer exceeds the display size, then DO NOT insert
                          1849     ;                   the next char, instead call error. That way the FSM will auto
                          1850     ;                   reset.
                          1851     ;Algorithms:            None.
                          1852     ;Limitations:           Cannot display a robot status string longer than display.
                          1853     ;                   Instead it is truncated.
                          1854     ;Author:                        Anjian Wu
                          1855     ;History:                       12-11-2013: created/ worked - Anjian Wu
                          1856     ;                   12-13-2013: Documentation - Anjian Wu
                          1857     ;------------------------------------------------------------------------------
0454                      1858     AddSpeedChar    PROC    NEAR
                          1859     
0454 53                   1860         PUSH    BX                         ; Save used reg
                          1861     
0455 803E130008     R     1862         CMP     Spd_Ptr, Display_SIZE     ; Is the pointer out of Display_Size?
                          1863         
045A 7F11                 1864         JG      AddSpeedCharNoNo          ; Yes, so set error to reset state machine.
                          1865         
045C 32FF                 1866         XOR     BH, BH                  ; 
045E 8A1E1300       R     1867         MOV     BL, Spd_Ptr             ; Convert Rbt_error_Ptr BYTE into WORD
                          1868      
0462 88870A00       R     1869         MOV     Spd_Buffer[BX], AL      ; Insert the char arg
                          1870         
0466 FE061300       R     1871         INC     Spd_Ptr                 ; Update pointer 
                          1872     
046A EB0490               1873         JMP     AddSpeedCharDone        ; Done
                          1874         
046D                      1875     AddSpeedCharNoNo:
                          1876         
046D E8A1FF               1877         CALL    SetError                ; Set the error to reset FSM 
                          1878      
0470                      1879     AddSpeedCharDone:
                          1880     
0470 5B                   1881         POP     BX                       ; Restore used reg
                          1882         
0471 C3                   1883         RET                    
                          1884     
                          1885     AddSpeedChar    ENDP
                          1886     
                          1887     ; RemoteFSMTable
                          1888     ;
                          1889     ; Description:      This is the state transition table for the remote side.
                          1890     ;                   Each entry consists of the next state and actions for that
                          1891     ;                   transition.  The rows are associated with the current
                          1892     ;                   state and the columns with the input type.
                          1893     ;
                          1894     ; Author:           Anjian Wu
                          1895     ; Last Modified:    12-11-2013: Adapted for Remote - Anjian Wu\
                          1896     ;                   12-13-2013: Documentation - Anjian Wu
                          1897     
                          1898     
----                      1899     TRANSITION_ENTRY        STRUC           ;structure used to define table
0000                      1900         NEXTSTATE   DB      ?               ;the next state for the transition
0001                      1901         ACTION      DW      ?               ;action for the transition
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   36


LOC  OBJ                  LINE     SOURCE

----                      1902     TRANSITION_ENTRY      ENDS
                          1903     
                          1904     
                          1905     ;define a macro to make table a little more readable
                          1906     ;macro just does an offset of the action routine entries to build the STRUC
                          1907     
                          1908     
                          1909     
0472                      1910     RemoteFSMTable  LABEL   TRANSITION_ENTRY
                          1911     
                          1912             ;Current State = ST_INITIAL: Waiting for a Serial Char...
                          1913                                                 ;Input Token Type
                          1914 +1          
0472 01             E     1915 +2      TRANSITION_ENTRY< ST_SPEED, OFFSET( no_op) >
0473 0000
                          1916 +1              ;TOKEN_S - Set Speed
                          1917 +1          
0475 02             E     1918 +2      TRANSITION_ENTRY< ST_DIR, OFFSET( no_op) >
0476 0000
                          1919 +1                  ;TOKEN_D - Set Dir
                          1920 +1          
0478 03             E     1921 +2      TRANSITION_ENTRY< ST_Robot, OFFSET( no_op) >
0479 0000
                          1922 +1              ;TOKEN_R - Robot Error
                          1923 +1          
047B 00             R     1924 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
047C 1104
                          1925 +1          ;TOKEN_NUM - A digit or ASCII_NULL
                          1926 +1          
047E 00             R     1927 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
047F 1104
                          1928 +1          ;TOKEN_END - C Return
                          1929 +1          
0481 00             R     1930 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0482 1104
                          1931 +1          ;TOKEN_OTHER    
                          1932             
                          1933             ;Current State = ST_SPEED: Garbing chars into Speed Buffer
                          1934                                                 ;Input Token Type
                          1935 +1          
0484 00             R     1936 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0485 1104
                          1937 +1          ;TOKEN_S - Set Speed
                          1938 +1          
0487 01             R     1939 +2      TRANSITION_ENTRY< ST_SPEED, OFFSET( AddSpeedChar) >
0488 5404
                          1940 +1          ;TOKEN_D - Set Dir
                          1941 +1          
048A 00             R     1942 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
048B 1104
                          1943 +1          ;TOKEN_R - Robot Error
                          1944 +1          
048D 01             R     1945 +2      TRANSITION_ENTRY< ST_SPEED, OFFSET( AddSpeedChar) >
048E 5404
                          1946 +1   ;TOKEN_NUM - A digit
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   37


LOC  OBJ                  LINE     SOURCE

                          1947 +1          
0490 00             E     1948 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( no_op) >
0491 0000
                          1949 +1              ;TOKEN_END - C Return
                          1950 +1          
0493 01             R     1951 +2      TRANSITION_ENTRY< ST_SPEED, OFFSET( AddSpeedChar) >
0494 5404
                          1952 +1          ;TOKEN_OTHER    
                          1953             
                          1954             ;Current State = ST_DIR: Garbing chars into Direction Buffer
                          1955                                                 ;Input Token Type
                          1956 +1          
0496 00             R     1957 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0497 1104
                          1958 +1          ;TOKEN_S - Set Speed
                          1959 +1          
0499 00             R     1960 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
049A 1104
                          1961 +1          ;TOKEN_D - Set Dir
                          1962 +1          
049C 00             R     1963 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
049D 1104
                          1964 +1          ;TOKEN_R - Robot Error
                          1965 +1          
049F 02             R     1966 +2      TRANSITION_ENTRY< ST_DIR, OFFSET( AddDirChar) >
04A0 3604
                          1967 +1              ;TOKEN_NUM - A digit or ASCII_NULL
                          1968 +1          
04A2 00             E     1969 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( no_op) >
04A3 0000
                          1970 +1                  ;TOKEN_END - C Return
                          1971 +1          
04A5 00             R     1972 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
04A6 1104
                          1973 +1          ;TOKEN_OTHER    
                          1974     
                          1975             ;Current State = ST_Robot: Garbing chars into Robot Status Buffer
                          1976                                                     ;Input Token Type
                          1977 +1          
04A8 03             R     1978 +2      TRANSITION_ENTRY< ST_Robot, OFFSET( AddRobotErrorChar) >
04A9 1804
                          1979 +1          ;TOKEN_S - Set Speed
                          1980 +1          
04AB 03             R     1981 +2      TRANSITION_ENTRY< ST_Robot, OFFSET( AddRobotErrorChar) >
04AC 1804
                          1982 +1          ;TOKEN_D - Set Dir
                          1983 +1          
04AE 03             R     1984 +2      TRANSITION_ENTRY< ST_Robot, OFFSET( AddRobotErrorChar) >
04AF 1804
                          1985 +1          ;TOKEN_R - Robot Error
                          1986 +1          
04B1 03             R     1987 +2      TRANSITION_ENTRY< ST_Robot, OFFSET( AddRobotErrorChar) >
04B2 1804
                          1988 +1      ;TOKEN_NUM - A digit or ASCII_NULL
                          1989 +1          
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   38


LOC  OBJ                  LINE     SOURCE

04B4 00             E     1990 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( no_op) >
04B5 0000
                          1991 +1                          ;TOKEN_END - C Return
                          1992 +1          
04B7 03             R     1993 +2      TRANSITION_ENTRY< ST_Robot, OFFSET( AddRobotErrorChar) >
04B8 1804
                          1994 +1          ;TOKEN_OTHER    
                          1995             
                          1996     ; Token Tables
                          1997     ;
                          1998     ; Description:      This creates the tables of token types and token values.
                          1999     ;                   Each entry corresponds to the token type and the token
                          2000     ;                   value for a character.  Macros are used to actually build
                          2001     ;                   two separate tables - TokenTypeTable for token types and
                          2002     ;                   TokenValueTable for token values.
                          2003     ;
                          2004     ; Author:           Anjian Wu
                          2005     ; Last Modified:    12-05-2013: Just made Laser tokens return True/False - Anjian Wu
                          2006     ;                   12-11-2013: Adapted for Remote - Anjian Wu
                          2007     ;                   12-13-2013: Documentation - Anjian Wu
                          2008     
                          2009     
                          2010     ; token type table - uses first byte of macro table entry
                          2011     
                          2012     
04BA                      2013     TokenTypeTable  LABEL   BYTE
                          2014 +1          
                          2015 +2          
04BA 03                   2016 +3          DB      TOKEN_NUM
                          2017 +2          ;<null>  (end of string)
                          2018 +2          
04BB 05                   2019 +3          DB      TOKEN_OTHER
                          2020 +2                  ;SOH
                          2021 +2          
04BC 05                   2022 +3          DB      TOKEN_OTHER
                          2023 +2                  ;STX
                          2024 +2          
04BD 05                   2025 +3          DB      TOKEN_OTHER
                          2026 +2                  ;ETX
                          2027 +2          
04BE 05                   2028 +3          DB      TOKEN_OTHER
                          2029 +2                  ;EOT
                          2030 +2          
04BF 05                   2031 +3          DB      TOKEN_OTHER
                          2032 +2                  ;ENQ
                          2033 +2          
04C0 05                   2034 +3          DB      TOKEN_OTHER
                          2035 +2                  ;ACK
                          2036 +2          
04C1 05                   2037 +3          DB      TOKEN_OTHER
                          2038 +2                  ;BEL
                          2039 +2          
04C2 05                   2040 +3          DB      TOKEN_OTHER
                          2041 +2                  ;backspace
                          2042 +2          
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   39


LOC  OBJ                  LINE     SOURCE

04C3 05                   2043 +3          DB      TOKEN_OTHER
                          2044 +2       ;TAB
                          2045 +2          
04C4 05                   2046 +3          DB      TOKEN_OTHER
                          2047 +2          ;new line
                          2048 +2          
04C5 05                   2049 +3          DB      TOKEN_OTHER
                          2050 +2          ;vertical tab
                          2051 +2          
04C6 05                   2052 +3          DB      TOKEN_OTHER
                          2053 +2          ;form feed
                          2054 +2          
04C7 04                   2055 +3          DB      TOKEN_END
                          2056 +2              ;carriage return
                          2057 +2          
04C8 05                   2058 +3          DB      TOKEN_OTHER
                          2059 +2          ;SO
                          2060 +2          
04C9 05                   2061 +3          DB      TOKEN_OTHER
                          2062 +2          ;SI
                          2063 +2          
04CA 05                   2064 +3          DB      TOKEN_OTHER
                          2065 +2          ;DLE
                          2066 +2          
04CB 05                   2067 +3          DB      TOKEN_OTHER
                          2068 +2          ;DC1
                          2069 +2          
04CC 05                   2070 +3          DB      TOKEN_OTHER
                          2071 +2          ;DC2
                          2072 +2          
04CD 05                   2073 +3          DB      TOKEN_OTHER
                          2074 +2          ;DC3
                          2075 +2          
04CE 05                   2076 +3          DB      TOKEN_OTHER
                          2077 +2          ;DC4
                          2078 +2          
04CF 05                   2079 +3          DB      TOKEN_OTHER
                          2080 +2          ;NAK
                          2081 +2          
04D0 05                   2082 +3          DB      TOKEN_OTHER
                          2083 +2          ;SYN
                          2084 +2          
04D1 05                   2085 +3          DB      TOKEN_OTHER
                          2086 +2          ;ETB
                          2087 +2          
04D2 05                   2088 +3          DB      TOKEN_OTHER
                          2089 +2          ;CAN
                          2090 +2          
04D3 05                   2091 +3          DB      TOKEN_OTHER
                          2092 +2          ;EM
                          2093 +2          
04D4 05                   2094 +3          DB      TOKEN_OTHER
                          2095 +2          ;SUB
                          2096 +2          
04D5 05                   2097 +3          DB      TOKEN_OTHER
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   40


LOC  OBJ                  LINE     SOURCE

                          2098 +2          ;escape
                          2099 +2          
04D6 05                   2100 +3          DB      TOKEN_OTHER
                          2101 +2          ;FS
                          2102 +2          
04D7 05                   2103 +3          DB      TOKEN_OTHER
                          2104 +2          ;GS
                          2105 +2          
04D8 05                   2106 +3          DB      TOKEN_OTHER
                          2107 +2          ;AS
                          2108 +2          
04D9 05                   2109 +3          DB      TOKEN_OTHER
                          2110 +2          ;US
                          2111 +2          
04DA 05                   2112 +3          DB      TOKEN_OTHER
                          2113 +2          ;space
                          2114 +2          
04DB 05                   2115 +3          DB      TOKEN_OTHER
                          2116 +2          ;!
                          2117 +2          
04DC 05                   2118 +3          DB      TOKEN_OTHER
                          2119 +2          ;"
                          2120 +2          
04DD 05                   2121 +3          DB      TOKEN_OTHER
                          2122 +2          ;#
                          2123 +2          
04DE 05                   2124 +3          DB      TOKEN_OTHER
                          2125 +2          ;$
                          2126 +2          
04DF 05                   2127 +3          DB      TOKEN_OTHER
                          2128 +2          ;percent
                          2129 +2          
04E0 05                   2130 +3          DB      TOKEN_OTHER
                          2131 +2          ;&
                          2132 +2          
04E1 05                   2133 +3          DB      TOKEN_OTHER
                          2134 +2          ;'
                          2135 +2          
04E2 05                   2136 +3          DB      TOKEN_OTHER
                          2137 +2          ;open paren
                          2138 +2          
04E3 05                   2139 +3          DB      TOKEN_OTHER
                          2140 +2          ;close paren
                          2141 +2          
04E4 05                   2142 +3          DB      TOKEN_OTHER
                          2143 +2          ;*
                          2144 +2          
04E5 05                   2145 +3          DB      TOKEN_OTHER
                          2146 +2                  ;+  (positive sign)
                          2147 +2          
04E6 05                   2148 +3          DB      TOKEN_OTHER
                          2149 +2          ;,
                          2150 +2          
04E7 05                   2151 +3          DB      TOKEN_OTHER
                          2152 +2                  ;-  (negative sign)
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   41


LOC  OBJ                  LINE     SOURCE

                          2153 +2          
04E8 05                   2154 +3          DB      TOKEN_OTHER
                          2155 +2                  ;.  (decimal point)
                          2156 +2          
04E9 05                   2157 +3          DB      TOKEN_OTHER
                          2158 +2          ;/
                          2159 +2          
04EA 03                   2160 +3          DB      TOKEN_NUM
                          2161 +2              ;0  (digit)
                          2162 +2          
04EB 03                   2163 +3          DB      TOKEN_NUM
                          2164 +2                  ;1  (digit)
                          2165 +2          
04EC 03                   2166 +3          DB      TOKEN_NUM
                          2167 +2                  ;2  (digit)
                          2168 +2          
04ED 03                   2169 +3          DB      TOKEN_NUM
                          2170 +2                  ;3  (digit)
                          2171 +2          
04EE 03                   2172 +3          DB      TOKEN_NUM
                          2173 +2                  ;4  (digit)
                          2174 +2          
04EF 03                   2175 +3          DB      TOKEN_NUM
                          2176 +2                  ;5  (digit)
                          2177 +2          
04F0 03                   2178 +3          DB      TOKEN_NUM
                          2179 +2                  ;6  (digit)
                          2180 +2          
04F1 03                   2181 +3          DB      TOKEN_NUM
                          2182 +2                  ;7  (digit)
                          2183 +2          
04F2 03                   2184 +3          DB      TOKEN_NUM
                          2185 +2                  ;8  (digit)
                          2186 +2          
04F3 03                   2187 +3          DB      TOKEN_NUM
                          2188 +2                  ;9  (digit)
                          2189 +2          
04F4 05                   2190 +3          DB      TOKEN_OTHER
                          2191 +2          ;:
                          2192 +2          
04F5 05                   2193 +3          DB      TOKEN_OTHER
                          2194 +2          ;;
                          2195 +2          
04F6 05                   2196 +3          DB      TOKEN_OTHER
                          2197 +2          ;<
                          2198 +2          
04F7 05                   2199 +3          DB      TOKEN_OTHER
                          2200 +2          ;=
                          2201 +2          
04F8 05                   2202 +3          DB      TOKEN_OTHER
                          2203 +2          ;>
                          2204 +2          
04F9 05                   2205 +3          DB      TOKEN_OTHER
                          2206 +2          ;?
                          2207 +2          
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   42


LOC  OBJ                  LINE     SOURCE

04FA 05                   2208 +3          DB      TOKEN_OTHER
                          2209 +2          ;@
                          2210 +2          
04FB 05                   2211 +3          DB      TOKEN_OTHER
                          2212 +2          ;A
                          2213 +2          
04FC 05                   2214 +3          DB      TOKEN_OTHER
                          2215 +2          ;B
                          2216 +2          
04FD 05                   2217 +3          DB      TOKEN_OTHER
                          2218 +2          ;C
                          2219 +2          
04FE 01                   2220 +3          DB      TOKEN_D     
                          2221 +2          ;D
                          2222 +2          
04FF 05                   2223 +3          DB      TOKEN_OTHER     
                          2224 +2    ;E 
                          2225 +2          
0500 05                   2226 +3          DB      TOKEN_OTHER     
                          2227 +2          ;F
                          2228 +2          
0501 05                   2229 +3          DB      TOKEN_OTHER
                          2230 +2          ;G
                          2231 +2          
0502 05                   2232 +3          DB      TOKEN_OTHER
                          2233 +2          ;H
                          2234 +2          
0503 05                   2235 +3          DB      TOKEN_OTHER
                          2236 +2          ;I
                          2237 +2          
0504 05                   2238 +3          DB      TOKEN_OTHER
                          2239 +2          ;J
                          2240 +2          
0505 05                   2241 +3          DB      TOKEN_OTHER
                          2242 +2          ;K
                          2243 +2          
0506 05                   2244 +3          DB      TOKEN_OTHER
                          2245 +2          ;L
                          2246 +2          
0507 05                   2247 +3          DB      TOKEN_OTHER
                          2248 +2          ;M
                          2249 +2          
0508 05                   2250 +3          DB      TOKEN_OTHER
                          2251 +2          ;N
                          2252 +2          
0509 05                   2253 +3          DB      TOKEN_OTHER 
                          2254 +2          ;O
                          2255 +2          
050A 05                   2256 +3          DB      TOKEN_OTHER
                          2257 +2          ;P
                          2258 +2          
050B 05                   2259 +3          DB      TOKEN_OTHER
                          2260 +2          ;Q
                          2261 +2          
050C 02                   2262 +3          DB      TOKEN_R
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   43


LOC  OBJ                  LINE     SOURCE

                          2263 +2          ;R
                          2264 +2          
050D 00                   2265 +3          DB      TOKEN_S     
                          2266 +2          ;S
                          2267 +2          
050E 05                   2268 +3          DB      TOKEN_OTHER
                          2269 +2          ;T
                          2270 +2          
050F 05                   2271 +3          DB      TOKEN_OTHER
                          2272 +2          ;U
                          2273 +2          
0510 05                   2274 +3          DB      TOKEN_OTHER
                          2275 +2              ;V
                          2276 +2          
0511 05                   2277 +3          DB      TOKEN_OTHER
                          2278 +2          ;W
                          2279 +2          
0512 05                   2280 +3          DB      TOKEN_OTHER
                          2281 +2          ;X
                          2282 +2          
0513 05                   2283 +3          DB      TOKEN_OTHER
                          2284 +2          ;Y
                          2285 +2          
0514 05                   2286 +3          DB      TOKEN_OTHER
                          2287 +2          ;Z
                          2288 +2          
0515 05                   2289 +3          DB      TOKEN_OTHER
                          2290 +2          ;[
                          2291 +2          
0516 05                   2292 +3          DB      TOKEN_OTHER
                          2293 +2          ;\
                          2294 +2          
0517 05                   2295 +3          DB      TOKEN_OTHER
                          2296 +2          ;]
                          2297 +2          
0518 05                   2298 +3          DB      TOKEN_OTHER
                          2299 +2          ;^
                          2300 +2          
0519 05                   2301 +3          DB      TOKEN_OTHER
                          2302 +2          ;_
                          2303 +2          
051A 05                   2304 +3          DB      TOKEN_OTHER
                          2305 +2          ;`
                          2306 +2          
051B 05                   2307 +3          DB      TOKEN_OTHER
                          2308 +2          ;a
                          2309 +2          
051C 05                   2310 +3          DB      TOKEN_OTHER
                          2311 +2          ;b
                          2312 +2          
051D 05                   2313 +3          DB      TOKEN_OTHER
                          2314 +2          ;c
                          2315 +2          
051E 01                   2316 +3          DB      TOKEN_D     
                          2317 +2          ;d
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   44


LOC  OBJ                  LINE     SOURCE

                          2318 +2          
051F 05                   2319 +3          DB      TOKEN_OTHER     
                          2320 +2          ;e  
                          2321 +2          
0520 05                   2322 +3          DB      TOKEN_OTHER     
                          2323 +2          ;f
                          2324 +2          
0521 05                   2325 +3          DB      TOKEN_OTHER 
                          2326 +2          ;g
                          2327 +2          
0522 05                   2328 +3          DB      TOKEN_OTHER 
                          2329 +2          ;h
                          2330 +2          
0523 05                   2331 +3          DB      TOKEN_OTHER 
                          2332 +2          ;i
                          2333 +2          
0524 05                   2334 +3          DB      TOKEN_OTHER 
                          2335 +2          ;j
                          2336 +2          
0525 05                   2337 +3          DB      TOKEN_OTHER 
                          2338 +2          ;k
                          2339 +2          
0526 05                   2340 +3          DB      TOKEN_OTHER 
                          2341 +2          ;l
                          2342 +2          
0527 05                   2343 +3          DB      TOKEN_OTHER 
                          2344 +2          ;m
                          2345 +2          
0528 05                   2346 +3          DB      TOKEN_OTHER 
                          2347 +2          ;n
                          2348 +2          
0529 05                   2349 +3          DB      TOKEN_OTHER     
                          2350 +2          ;o
                          2351 +2          
052A 05                   2352 +3          DB      TOKEN_OTHER 
                          2353 +2          ;p
                          2354 +2          
052B 05                   2355 +3          DB      TOKEN_OTHER 
                          2356 +2          ;q
                          2357 +2          
052C 02                   2358 +3          DB      TOKEN_R 
                          2359 +2          ;r
                          2360 +2          
052D 00                   2361 +3          DB      TOKEN_S     
                          2362 +2          ;s
                          2363 +2          
052E 05                   2364 +3          DB      TOKEN_OTHER 
                          2365 +2          ;t
                          2366 +2          
052F 05                   2367 +3          DB      TOKEN_OTHER 
                          2368 +2          ;u
                          2369 +2          
0530 05                   2370 +3          DB      TOKEN_OTHER     
                          2371 +2          ;v
                          2372 +2          
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   45


LOC  OBJ                  LINE     SOURCE

0531 05                   2373 +3          DB      TOKEN_OTHER 
                          2374 +2          ;w
                          2375 +2          
0532 05                   2376 +3          DB      TOKEN_OTHER 
                          2377 +2          ;x
                          2378 +2          
0533 05                   2379 +3          DB      TOKEN_OTHER 
                          2380 +2          ;y
                          2381 +2          
0534 05                   2382 +3          DB      TOKEN_OTHER 
                          2383 +2          ;z
                          2384 +2          
0535 05                   2385 +3          DB      TOKEN_OTHER 
                          2386 +2          ;{
                          2387 +2          
0536 05                   2388 +3          DB      TOKEN_OTHER 
                          2389 +2          ;|
                          2390 +2          
0537 05                   2391 +3          DB      TOKEN_OTHER 
                          2392 +2          ;}
                          2393 +2          
0538 05                   2394 +3          DB      TOKEN_OTHER 
                          2395 +2          ;~
                          2396 +2          
0539 05                   2397 +3          DB      TOKEN_OTHER 
                          2398 +2          ;rubout
                          2399 +1  
                          2400     
                          2401     
                          2402     ; token value table - uses second byte of macro table entry
                          2403     
                          2404     
053A                      2405     TokenValueTable LABEL       BYTE
                          2406 +1          
                          2407 +2          
053A 00                   2408 +3          DB       0
                          2409 +2          ;<null>  (end of string)
                          2410 +2          
053B 01                   2411 +3          DB       1
                          2412 +2                  ;SOH
                          2413 +2          
053C 02                   2414 +3          DB       2
                          2415 +2                  ;STX
                          2416 +2          
053D 03                   2417 +3          DB       3
                          2418 +2                  ;ETX
                          2419 +2          
053E 04                   2420 +3          DB       4
                          2421 +2                  ;EOT
                          2422 +2          
053F 05                   2423 +3          DB       5
                          2424 +2                  ;ENQ
                          2425 +2          
0540 06                   2426 +3          DB       6
                          2427 +2                  ;ACK
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   46


LOC  OBJ                  LINE     SOURCE

                          2428 +2          
0541 07                   2429 +3          DB       7
                          2430 +2                  ;BEL
                          2431 +2          
0542 08                   2432 +3          DB       8
                          2433 +2                  ;backspace
                          2434 +2          
0543 09                   2435 +3          DB       9
                          2436 +2       ;TAB
                          2437 +2          
0544 0A                   2438 +3          DB       10
                          2439 +2          ;new line
                          2440 +2          
0545 0B                   2441 +3          DB       11
                          2442 +2          ;vertical tab
                          2443 +2          
0546 0C                   2444 +3          DB       12
                          2445 +2          ;form feed
                          2446 +2          
0547 0D                   2447 +3          DB       13
                          2448 +2              ;carriage return
                          2449 +2          
0548 0E                   2450 +3          DB       14
                          2451 +2          ;SO
                          2452 +2          
0549 0F                   2453 +3          DB       15
                          2454 +2          ;SI
                          2455 +2          
054A 10                   2456 +3          DB       16
                          2457 +2          ;DLE
                          2458 +2          
054B 11                   2459 +3          DB       17
                          2460 +2          ;DC1
                          2461 +2          
054C 12                   2462 +3          DB       18
                          2463 +2          ;DC2
                          2464 +2          
054D 13                   2465 +3          DB       19
                          2466 +2          ;DC3
                          2467 +2          
054E 14                   2468 +3          DB       20
                          2469 +2          ;DC4
                          2470 +2          
054F 15                   2471 +3          DB       21
                          2472 +2          ;NAK
                          2473 +2          
0550 16                   2474 +3          DB       22
                          2475 +2          ;SYN
                          2476 +2          
0551 17                   2477 +3          DB       23
                          2478 +2          ;ETB
                          2479 +2          
0552 18                   2480 +3          DB       24
                          2481 +2          ;CAN
                          2482 +2          
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   47


LOC  OBJ                  LINE     SOURCE

0553 19                   2483 +3          DB       25
                          2484 +2          ;EM
                          2485 +2          
0554 1A                   2486 +3          DB       26
                          2487 +2          ;SUB
                          2488 +2          
0555 1B                   2489 +3          DB       27
                          2490 +2          ;escape
                          2491 +2          
0556 1C                   2492 +3          DB       28
                          2493 +2          ;FS
                          2494 +2          
0557 1D                   2495 +3          DB       29
                          2496 +2          ;GS
                          2497 +2          
0558 1E                   2498 +3          DB       30
                          2499 +2          ;AS
                          2500 +2          
0559 1F                   2501 +3          DB       31
                          2502 +2          ;US
                          2503 +2          
055A 20                   2504 +3          DB       ' '
                          2505 +2          ;space
                          2506 +2          
055B 21                   2507 +3          DB       '!'
                          2508 +2          ;!
                          2509 +2          
055C 22                   2510 +3          DB       '"'
                          2511 +2          ;"
                          2512 +2          
055D 23                   2513 +3          DB       '#'
                          2514 +2          ;#
                          2515 +2          
055E 24                   2516 +3          DB       '$'
                          2517 +2          ;$
                          2518 +2          
055F 25                   2519 +3          DB       37
                          2520 +2          ;percent
                          2521 +2          
0560 26                   2522 +3          DB       '&'
                          2523 +2          ;&
                          2524 +2          
0561 27                   2525 +3          DB       39
                          2526 +2          ;'
                          2527 +2          
0562 28                   2528 +3          DB       40
                          2529 +2          ;open paren
                          2530 +2          
0563 29                   2531 +3          DB       41
                          2532 +2          ;close paren
                          2533 +2          
0564 2A                   2534 +3          DB       '*'
                          2535 +2          ;*
                          2536 +2          
0565 01                   2537 +3          DB       1
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   48


LOC  OBJ                  LINE     SOURCE

                          2538 +2                  ;+  (positive sign)
                          2539 +2          
0566 2C                   2540 +3          DB       44
                          2541 +2          ;,
                          2542 +2          
0567 FF                   2543 +3          DB       -1
                          2544 +2                  ;-  (negative sign)
                          2545 +2          
0568 00                   2546 +3          DB       0
                          2547 +2                  ;.  (decimal point)
                          2548 +2          
0569 2F                   2549 +3          DB       '/'
                          2550 +2          ;/
                          2551 +2          
056A 30                   2552 +3          DB       '0'
                          2553 +2              ;0  (digit)
                          2554 +2          
056B 31                   2555 +3          DB       '1'
                          2556 +2                  ;1  (digit)
                          2557 +2          
056C 32                   2558 +3          DB       '2'
                          2559 +2                  ;2  (digit)
                          2560 +2          
056D 33                   2561 +3          DB       '3'
                          2562 +2                  ;3  (digit)
                          2563 +2          
056E 34                   2564 +3          DB       '4'
                          2565 +2                  ;4  (digit)
                          2566 +2          
056F 35                   2567 +3          DB       '5'
                          2568 +2                  ;5  (digit)
                          2569 +2          
0570 36                   2570 +3          DB       '6'
                          2571 +2                  ;6  (digit)
                          2572 +2          
0571 37                   2573 +3          DB       '7'
                          2574 +2                  ;7  (digit)
                          2575 +2          
0572 38                   2576 +3          DB       '8'
                          2577 +2                  ;8  (digit)
                          2578 +2          
0573 39                   2579 +3          DB       '9'
                          2580 +2                  ;9  (digit)
                          2581 +2          
0574 3A                   2582 +3          DB       ':'
                          2583 +2          ;:
                          2584 +2          
0575 3B                   2585 +3          DB       ';'
                          2586 +2          ;;
                          2587 +2          
0576 3C                   2588 +3          DB       '<'
                          2589 +2          ;<
                          2590 +2          
0577 3D                   2591 +3          DB       '='
                          2592 +2          ;=
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   49


LOC  OBJ                  LINE     SOURCE

                          2593 +2          
0578 3E                   2594 +3          DB       '>'
                          2595 +2          ;>
                          2596 +2          
0579 3F                   2597 +3          DB       '?'
                          2598 +2          ;?
                          2599 +2          
057A 40                   2600 +3          DB       '@'
                          2601 +2          ;@
                          2602 +2          
057B 41                   2603 +3          DB       'A'
                          2604 +2          ;A
                          2605 +2          
057C 42                   2606 +3          DB       'B'
                          2607 +2          ;B
                          2608 +2          
057D 43                   2609 +3          DB       'C'
                          2610 +2          ;C
                          2611 +2          
057E 44                   2612 +3          DB       'D'
                          2613 +2          ;D
                          2614 +2          
057F 45                   2615 +3          DB       'E'
                          2616 +2    ;E 
                          2617 +2          
0580 46                   2618 +3          DB       'F'
                          2619 +2          ;F
                          2620 +2          
0581 47                   2621 +3          DB       'G'
                          2622 +2          ;G
                          2623 +2          
0582 48                   2624 +3          DB       'H'
                          2625 +2          ;H
                          2626 +2          
0583 49                   2627 +3          DB       'I'
                          2628 +2          ;I
                          2629 +2          
0584 4A                   2630 +3          DB       'J'
                          2631 +2          ;J
                          2632 +2          
0585 4B                   2633 +3          DB       'K'
                          2634 +2          ;K
                          2635 +2          
0586 4C                   2636 +3          DB       'L'
                          2637 +2          ;L
                          2638 +2          
0587 4D                   2639 +3          DB       'M'
                          2640 +2          ;M
                          2641 +2          
0588 4E                   2642 +3          DB       'N'
                          2643 +2          ;N
                          2644 +2          
0589 4F                   2645 +3          DB       'O'
                          2646 +2          ;O
                          2647 +2          
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   50


LOC  OBJ                  LINE     SOURCE

058A 50                   2648 +3          DB       'P'
                          2649 +2          ;P
                          2650 +2          
058B 51                   2651 +3          DB       'Q'
                          2652 +2          ;Q
                          2653 +2          
058C 52                   2654 +3          DB       'R'
                          2655 +2          ;R
                          2656 +2          
058D 53                   2657 +3          DB       'S'
                          2658 +2          ;S
                          2659 +2          
058E 54                   2660 +3          DB       'T'
                          2661 +2          ;T
                          2662 +2          
058F 55                   2663 +3          DB       'U'
                          2664 +2          ;U
                          2665 +2          
0590 56                   2666 +3          DB       'V'
                          2667 +2              ;V
                          2668 +2          
0591 57                   2669 +3          DB       'W'
                          2670 +2          ;W
                          2671 +2          
0592 58                   2672 +3          DB       'X'
                          2673 +2          ;X
                          2674 +2          
0593 59                   2675 +3          DB       'Y'
                          2676 +2          ;Y
                          2677 +2          
0594 5A                   2678 +3          DB       'Z'
                          2679 +2          ;Z
                          2680 +2          
0595 5B                   2681 +3          DB       '['
                          2682 +2          ;[
                          2683 +2          
0596 5C                   2684 +3          DB       '\'
                          2685 +2          ;\
                          2686 +2          
0597 5D                   2687 +3          DB       ']'
                          2688 +2          ;]
                          2689 +2          
0598 5E                   2690 +3          DB       '^'
                          2691 +2          ;^
                          2692 +2          
0599 5F                   2693 +3          DB       '_'
                          2694 +2          ;_
                          2695 +2          
059A 60                   2696 +3          DB       '`'
                          2697 +2          ;`
                          2698 +2          
059B 61                   2699 +3          DB       'a'
                          2700 +2          ;a
                          2701 +2          
059C 62                   2702 +3          DB       'b'
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   51


LOC  OBJ                  LINE     SOURCE

                          2703 +2          ;b
                          2704 +2          
059D 63                   2705 +3          DB       'c'
                          2706 +2          ;c
                          2707 +2          
059E 64                   2708 +3          DB       'd'
                          2709 +2          ;d
                          2710 +2          
059F 65                   2711 +3          DB       'e'
                          2712 +2          ;e  
                          2713 +2          
05A0 66                   2714 +3          DB       'f'
                          2715 +2          ;f
                          2716 +2          
05A1 67                   2717 +3          DB       'g'
                          2718 +2          ;g
                          2719 +2          
05A2 68                   2720 +3          DB       'h'
                          2721 +2          ;h
                          2722 +2          
05A3 69                   2723 +3          DB       'i'
                          2724 +2          ;i
                          2725 +2          
05A4 6A                   2726 +3          DB       'j'
                          2727 +2          ;j
                          2728 +2          
05A5 6B                   2729 +3          DB       'k'
                          2730 +2          ;k
                          2731 +2          
05A6 6C                   2732 +3          DB       'l'
                          2733 +2          ;l
                          2734 +2          
05A7 6D                   2735 +3          DB       'm'
                          2736 +2          ;m
                          2737 +2          
05A8 6E                   2738 +3          DB       'n'
                          2739 +2          ;n
                          2740 +2          
05A9 6F                   2741 +3          DB       'o'
                          2742 +2          ;o
                          2743 +2          
05AA 70                   2744 +3          DB       'p'
                          2745 +2          ;p
                          2746 +2          
05AB 71                   2747 +3          DB       'q'
                          2748 +2          ;q
                          2749 +2          
05AC 72                   2750 +3          DB       'r'
                          2751 +2          ;r
                          2752 +2          
05AD 73                   2753 +3          DB       's'
                          2754 +2          ;s
                          2755 +2          
05AE 74                   2756 +3          DB       't'
                          2757 +2          ;t
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   52


LOC  OBJ                  LINE     SOURCE

                          2758 +2          
05AF 75                   2759 +3          DB       'u'
                          2760 +2          ;u
                          2761 +2          
05B0 76                   2762 +3          DB       'v'
                          2763 +2          ;v
                          2764 +2          
05B1 77                   2765 +3          DB       'w'
                          2766 +2          ;w
                          2767 +2          
05B2 78                   2768 +3          DB       'x'
                          2769 +2          ;x
                          2770 +2          
05B3 79                   2771 +3          DB       'y'
                          2772 +2          ;y
                          2773 +2          
05B4 7A                   2774 +3          DB       'z'
                          2775 +2          ;z
                          2776 +2          
05B5 7B                   2777 +3          DB       '{'
                          2778 +2          ;{
                          2779 +2          
05B6 7C                   2780 +3          DB       '|'
                          2781 +2          ;|
                          2782 +2          
05B7 7D                   2783 +3          DB       '}'
                          2784 +2          ;}
                          2785 +2          
05B8 7E                   2786 +3          DB       '~'
                          2787 +2          ;~
                          2788 +2          
05B9 7F                   2789 +3          DB       127
                          2790 +2          ;rubout
                          2791 +1          
                          2792             
                          2793     
                          2794     
----                      2795     CODE    ENDS
                          2796         
                          2797     ;the data segment
                          2798     
----                      2799     DATA    SEGMENT PUBLIC  'DATA'
                          2800     
0000 (9                   2801     Dir_Buffer      DB  Display_SIZE+1      DUP     (?)   ; The buffer containing Directi
                                   on meant for Display
     ??
     )
0009 ??                   2802     Dir_PTR         DB  ?                         ; The ele index for Direction buff, use
                                   d when inserting
                          2803                                                   ; each char.
                          2804     
000A (9                   2805     Spd_Buffer      DB  Display_SIZE+1      DUP     (?)   ; The buffer containing Speed m
                                   eant for Display
     ??
     )
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   53


LOC  OBJ                  LINE     SOURCE

0013 ??                   2806     Spd_PTR         DB  ?                         ; The ele index for Speed buff, used wh
                                   en inserting
                          2807                                                   ; each char.
                          2808     
0014 (9                   2809     Rbt_error_Buff  DB  Display_SIZE+1      DUP     (?)   ; The buffer containing Robot s
                                   tatus meant for Display
     ??
     )
001D ??                   2810     Rbt_error_Ptr   DB  ?                         ; The ele index for Robot status buff, 
                                   used when inserting
                          2811                                                   ; each char. This buffer has whatever t
                                   he robot sends back
                          2812                                                   ; so long as it began with TOKEN_R's ch
                                   ar.
                          2813     
001E ????                 2814     Action_Buff_PTR DW  ?                         ; Pointer into String table for ACTION 
                                   string for Display
                          2815                                                   ; ACTIONS are the the string displayed 
                                   to user to describe
                          2816                                                   ; what button they just pressed.
                          2817     
0020 ????                 2818     Error_Buff_PTR  DW  ?                         ; Pointer into String table for ERROR s
                                   tring for Display
                          2819                                                   ; ERROR are the the string displayed to
                                    user to describe
                          2820                                                   ; what internal serial error occurred.
                          2821     
0022 ????                 2822     Errorflag       DW      ?                     ; Holds error type
                          2823     
0024 ??                   2824     FSM_state       DB      ?                     ; Holds the current state of FSM
                          2825     
0025 ????                 2826     ToggleCTR       DW      ?                     ; Counter for ToggleHanler's next buffe
                                   r/string to display
                          2827     
0027 ????                 2828     TogglePreScaler DW      ?                     ; Effectively a pre-scaler to slow down
                                    toggling in ToggleHandler
                          2829                                                   ; to basically arbitrary rates. 
                          2830     
                          2831     
----                      2832     DATA    ENDS
                          2833     
                          2834     ;the stack
                          2835     
----                      2836     STACK   SEGMENT STACK  'STACK'
                          2837     
0000 (80                  2838                     DB      80 DUP ('Stack ')       ;240 words
     537461636B20
     )
                          2839     
01E0                      2840     TopOfStack      LABEL   WORD
                          2841     
----                      2842     STACK   ENDS
                          2843     
                          2844     
                          2845     
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:25:23  12/13/;3  PAGE   54


LOC  OBJ                  LINE     SOURCE

                          2846             END     START

ASSEMBLY COMPLETE, NO ERRORS FOUND
