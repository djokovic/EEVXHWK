8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE REMOTE
OBJECT MODULE PLACED IN REMOTE.OBJ
ASSEMBLER INVOKED BY:  C:\5XTOOLS\ASM86.EXE REMOTE.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1     NAME        Remote
                             2     
                             3 +1  $INCLUDE(remote.inc);
                      =1     4     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1     5     ;                                                                               ;
                      =1     6     ;                                  Remote.INC                                   ;
                      =1     7     ;                               Remote Constants                            ;
                      =1     8     ;                                 Include File                              ;
                      =1     9     ;                                                                           ;
                      =1    10     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    11     
                      =1    12     ; This file contains robot constants
                      =1    13     ;
                      =1    14     ; Revision History:
                      =1    15     ;    11/10/2013                 Created - Anjian Wu
                      =1    16     ;    12/11/2013                 Added PRESCALE - Anjian Wu
                      =1    17     ;    12/12/2013                 Updated numOfStatus - Anjian Wu
                      =1    18     
                      =1    19     ; General Constants
                      =1    20     
  07D0                =1    21     PRESCALE            EQU    2000    ; How many Millisec per change in display
                      =1    22                                         ; status?
  0000                =1    23     ACTION_LABEL       EQU     0       ;
  0001                =1    24     ACTION_VAL                 EQU     1       ;
  0002                =1    25     SPEED_LABEL        EQU     2       ;
  0004                =1    26     ANGLE_LABEL        EQU     4       ;
  0006                =1    27     ERROR_LABEL        EQU     6       ;
                      =1    28     
                      =1    29     
                      =1    30     ; Key Commands  
                      =1    31     
                      =1    32     
  0007                =1    33     CMD_LENGTH          EQU     7       ; Standard FIXED CMD length
                      =1    34     
                      =1    35     ; Displaying Constants
                      =1    36     
  000A                =1    37     numOfStatus         EQU     10       ;
                      =1    38     
                      =1    39     
                      =1    40     ;FSM States Definitions
                      =1    41     
  0000                =1    42     ST_INITIAL          EQU     0   ;Start state
  0001                =1    43     ST_SPEED        EQU     1   ;Set Abs Speed: wait for digit or '+'
  0002                =1    44     ST_DIR          EQU     2   ;Set Abs Speed: wait for digit
  0003                =1    45     ST_ROBOT        EQU     3   ; Grab Robot Error string
                      =1    46     
                      =1    47     ;Token offsets
  0000                =1    48     TOKEN_S         EQU     0; - Set Speed
  0001                =1    49     TOKEN_D         EQU     1;- Set Dir
  0002                =1    50     TOKEN_R         EQU     2;- Set Robot Error
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE    2


LOC  OBJ                  LINE     SOURCE

  0003                =1    51     TOKEN_NUM       EQU     3;- A digit
  0004                =1    52     TOKEN_END       EQU     4; - Return
  0005                =1    53     TOKEN_OTHER     EQU     5; Bad char
                      =1    54     
  0006                =1    55     NUM_TOKEN_TYPES EQU     TOKEN_OTHER + 1; TOKEN_OTHER is always the last Token
                      =1    56     
                      =1    57     ; TOken Masks
                      =1    58     
  007F                =1    59     TOKEN_MASK      EQU     01111111B       ;mask high bit of token
                            60 +1  $INCLUDE(general.inc); Include files
                      =1    61     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    62     ;                                                                               ;
                      =1    63     ;                                  General.INC                                  ;
                      =1    64     ;                               General Constants                           ;
                      =1    65     ;                                 Include File                              ;
                      =1    66     ;                                                                           ;
                      =1    67     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    68     
                      =1    69     ; This file contains general operations
                      =1    70     ;
                      =1    71     ; Revision History:
                      =1    72     ;    11/02/2013                 Created - Anjian Wu
                      =1    73     ;    11/23/2013                 Added WORD_LOOKUP_ADJUST - Anjian Wu
                      =1    74     ;    12/05/2014         Added FMS_ERROR key, ZERO, changed other keys to 
                      =1    75     ;                       ASCII based - Anjian
                      =1    76     
                      =1    77     
                      =1    78     ; General Constants
  000D                =1    79     CAR_RETURN              EQU             13                      ;
  0000                =1    80     ASCII_NULL      EQU     0           ;
  0001                =1    81     bit_size        EQU     1           ;
  0004                =1    82     nibble_size     EQU     4           ;
  0008                =1    83     BYTE_size       EQU     8           ;
  0010                =1    84     WORD_size       EQU     16          ;
  0000                =1    85     ArrayEmpty      EQU     0               ; Empty is set at 0 index
                      =1    86     
  0001                =1    87     TRUE            EQU     1           ;
  0000                =1    88     FALSE           EQU     0           ;
                      =1    89     
  0000                =1    90     RESET           EQU     0           ; General Value for Resetting something
                      =1    91     
  0000                =1    92     CLEAR           EQU     0           ;
                      =1    93     
  0000                =1    94     ZERO            EQU     0           ;
                      =1    95     
  000A                =1    96     DIGIT           EQU     10          ; A digit in base 10 
                      =1    97     
  0001                =1    98     WORD_LOOKUP_ADJUST  EQU    1           ; Two bytes in one word -> SHL by 1
                      =1    99     
                      =1   100     ; General Definitions for Main Loops
                      =1   101     
  0001                =1   102     FIRST_RESERVED_VEC      EQU     1           ;reserve vectors 1-3
  0003                =1   103     LAST_RESERVED_VEC       EQU     3       ;
  0100                =1   104     NUM_IRQ_VECTORS     EQU 256     ;number of interrupt vectors
                      =1   105     
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   106     ; MainLoop Key Codes
                      =1   107     
  0000                =1   108     KEY_EVENT_KEY       EQU     0   ; Event code indicating key pressed
  0001                =1   109     SER_ERR_KEY         EQU     1   ; Event code indicating serial error
  0002                =1   110     RX_ENQUEUED_KEY     EQU     2   ; Event code indicating new rx value gotten
  0003                =1   111     MODEM_KEY           EQU     3   ; Event code indicating modem event
  0004                =1   112     FSM_ERROR           EQU     4   ; Error key showing FSM error
                      =1   113     
                      =1   114     ; General Addresses
                      =1   115     
  FF22                =1   116     INTCtrlReg          EQU     0FF22H  ;EOI interrupt controller       
                           117 +1  $INCLUDE(display.inc);
                      =1   118     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   119     ;                                                                               ;
                      =1   120     ;                                  Display.INC                                  ;
                      =1   121     ;                               Display Constants                           ;
                      =1   122     ;                                 Include File                              ;
                      =1   123     ;                                                                           ;
                      =1   124     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   125     
                      =1   126     ; This file contains the definitions for the display functions
                      =1   127     ;
                      =1   128     ; Revision History:
                      =1   129     ;    11/02/2013                 Created - Anjian Wu
                      =1   130     ;    12/13/2013         Added Brightness constants - Anjian Wu
                      =1   131     
                      =1   132     
                      =1   133     
                      =1   134     ; General Definitions
                      =1   135     
  0008                =1   136     Display_SIZE    EQU     8               ; Size of chars that can fit in display
  0000                =1   137     SEGMENT_NULL    EQU     0               ; Byte value for Sseg pattern of ASCII_NULL
  0001                =1   138     SegPTRAdjust    EQU     1               ; Since we want WORD, we need to adjust 
                      =1   139      
                      =1   140     
                      =1   141     ; Display Addresses
                      =1   142     
  0000                =1   143     LEDDisplay      EQU     0               ; Display is hardware mapped to 0 - 7H
  0008                =1   144     LEDDisplay2     EQU     8               ; 14- seg also hardware mapped to 8h - 0DH
                      =1   145     
                      =1   146     
----                  =1   147     DISPLAYSTRUC     STRUC                      ;structure containing all display buffers
0000                  =1   148         buffer              DB          Display_SIZE        DUP     (?) ;pointer to the f
                                   unction to get switch 
----                  =1   149     DISPLAYSTRUC      ENDS
                      =1   150     
                      =1   151     ; Brightness Values
  000A                =1   152     DELTA_BRIGHT        EQU     10      ;
  0064                =1   153     MIN_BRIGHT          EQU     100     ;
  0000                =1   154     MAX_BRIGHT          EQU     0       ;
                      =1   155     
                      =1   156     ; Scroll Values
                      =1   157     
  02EE                =1   158     SCROLLRATE          EQU     750    ;
                           159 +1  $INCLUDE(chips.inc);
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE    4


LOC  OBJ                  LINE     SOURCE

                      =1   160     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   161     ;                                                                               ;
                      =1   162     ;                                  Chips.INC                                    ;
                      =1   163     ;                           Chip Select Constants                           ;
                      =1   164     ;                                 Include File                              ;
                      =1   165     ;                                                                           ;
                      =1   166     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   167     
                      =1   168     ; This file contains the definitions for chip select values
                      =1   169     ;
                      =1   170     ; Revision History:
                      =1   171     ;    11/23/2013                 Created - Anjian Wu
                      =1   172     
                      =1   173     
                      =1   174     
                      =1   175     ; Chip Select Register Values
  0003                =1   176     PACSval         EQU     00003H          ;PCS base at 0, 3 wait states
                      =1   177                                             ;0000000000------  starts at address 0
                      =1   178                                             ;----------000---  reserved
                      =1   179                                             ;-------------0--  wait for RDY inputs
                      =1   180                                             ;--------------11  3 wait states
  0183                =1   181     MPCSval         EQU     00183H          ;PCS in I/O space, use PCS5/6, 3 wait states
                      =1   182                                             ;0---------000---  reserved
                      =1   183                                             ;-0000001--------  MCS is 8KB
                      =1   184                                             ;--------1-------  output PCS5/PCS6
                      =1   185                                             ;---------0------  PCS in I/O space
                      =1   186                                             ;-------------0--  wait for RDY inputs
                      =1   187                                             ;--------------11  3 wait states
                      =1   188                                             
  FFA4                =1   189     PACSreg         EQU     0FFA4H          ;address of PACS register
  FFA8                =1   190     MPCSreg         EQU     0FFA8H          ;address of MPCS register
                           191 +1  $INCLUDE(macros.inc);
                      =1   192 +1  $NOLIST
                           357 +1  $INCLUDE(queue.inc);
                      =1   358     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   359     ;                                                                               ;
                      =1   360     ;                                  Queues.INC                                   ;
                      =1   361     ;                           Queue Conversion Constants                          ;
                      =1   362     ;                                 Include File                              ;
                      =1   363     ;                                                                           ;
                      =1   364     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   365     
                      =1   366     ; This file contains the definitions for the queue functions
                      =1   367     ;
                      =1   368     ; Revision History:
                      =1   369     ;    10/29/2013                 Created - Anjian Wu
                      =1   370     ;    11/01/2013   Debugged,Documented, and working - Anjian Wu
                      =1   371     ;
                      =1   372     ;Structure for Queue allocation, information, and storage
                      =1   373     
                      =1   374     
                      =1   375     ; General Definitions
                      =1   376     
                      =1   377     
  0000                =1   378     BYTE_QUEUE      EQU     0             ; QueueInit Key for Byte queue.
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE    5


LOC  OBJ                  LINE     SOURCE

  0001                =1   379     WORD_QUEUE      EQU     1             ; QueueInit Key for Word queue.
                      =1   380     
  0001                =1   381     ByteQ           EQU     1             ; Byte norm factor for indexing
  0002                =1   382     WordQ           EQU     2             ; Word norm factor for indexing
  0400                =1   383     ARRAY_SIZE      EQU     1024          ; Size of queue array (fits 512-1 words, 
                      =1   384                                           ;or 1023 bytes)
                      =1   385     
  0200                =1   386     MAX_Q_LENG          EQU     512          ;Maxlength allowed for byte or word queue
                      =1   387     
----                  =1   388     QUEUESTRUC      STRUC                   ;structure containing all queue info
0000                  =1   389         head            DW      ?           ;counter for debouncing the switch
0002                  =1   390         tail            DW      ?           ;time until change repeat rates
0004                  =1   391         qsize           DW      ?           ;rate at which to repeat the switch
0006                  =1   392         leng            DW      ?           ;rate at which to repeat the switch
0008                  =1   393         array               DB          ARRAY_SIZE  DUP     (?) ;pointer to the function 
                                   to get switch status
----                  =1   394     QUEUESTRUC      ENDS
                      =1   395     
                      =1   396     ;Structure for storing Queue return values or args
                      =1   397     
----                  =1   398     QUEUEVARS      STRUC                ;structure containing all queue info
0000                  =1   399         dequeued    DW      ?               ;counter for debouncing the switch
----                  =1   400     QUEUEVARS      ENDS
                      =1   401     
                      =1   402     
                      =1   403     
                           404 +1  $INCLUDE(vectors.inc);
                      =1   405     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   406     ;                                                                               ;
                      =1   407     ;                                  Vector.INC                                   ;
                      =1   408     ;                              IVector Constants                            ;
                      =1   409     ;                                 Include File                              ;
                      =1   410     ;                                                                           ;
                      =1   411     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   412     
                      =1   413     ; This file contains the definitions for timers and their interupts
                      =1   414     ;
                      =1   415     ; Revision History:
                      =1   416     ;    11/23/2013                 Created - Anjian Wu
                      =1   417     ;    12/10/2013         Added Timer 2 info - Anjian Wu
                      =1   418     
                      =1   419                                             ; IVector Definitions
                      =1   420     
                      =1   421     ; Interrupt Vectors and their control values
  0008                =1   422     Tmr0Vec         EQU     8               ;interrupt vector for Timer 0
  0012                =1   423     Tmr1Vec         EQU     18              ;interrupt vector for Timer 1
  0013                =1   424     Tmr2Vec         EQU     19              ;interrupt vector for Timer 2
                      =1   425     
  FF32                =1   426     INTCtrlrCtrl    EQU     0FF32H          ;address of interrupt controller for timer
  FF22                =1   427     INTCtrlrEOI     EQU     0FF22H          ;address of interrupt controller EOI register
                      =1   428     
  0001                =1   429     INTCtrlrCVal    EQU     00001H          ;set priority for timers to 1 and enable
                      =1   430                                             ;000000000000----  reserved
                      =1   431                                             ;------------0---  enable timer interrupt
                      =1   432                                             ;-------------001  timer priority
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           433 +1  $INCLUDE(timer.inc);
                      =1   434     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   435     ;                                                                               ;
                      =1   436     ;                                  Timer.INC                                    ;
                      =1   437     ;                              Timer Constants                              ;
                      =1   438     ;                                 Include File                              ;
                      =1   439     ;                                                                           ;
                      =1   440     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   441     
                      =1   442     ; This file contains the definitions for timers and their interupts
                      =1   443     ;
                      =1   444     ; Revision History:
                      =1   445     ;    11/23/2013                 Created - Anjian Wu
                      =1   446     ;    12/10/2013         Added Timer2 vals - Anjian Wu
                      =1   447     
                      =1   448     
                      =1   449                                             ; Timer Definitions
                      =1   450     
                      =1   451     ; Addresses
  FF56                =1   452     Tmr0Ctrl        EQU     0FF56H          ;address of Timer 0 Control Register
  FF52                =1   453     Tmr0MaxCntA     EQU     0FF52H          ;address of Timer 0 Max Count A Register
  FF50                =1   454     Tmr0Count       EQU     0FF50H          ;address of Timer 0 Count Register
                      =1   455     
  FF5E                =1   456     Tmr1Ctrl        EQU     0FF5EH          ;address of Timer 1 Control Register
  FF5A                =1   457     Tmr1MaxCntA     EQU     0FF5AH          ;address of Timer 1 Max Count A Register
  FF58                =1   458     Tmr1Count       EQU     0FF58H          ;address of Timer 1 Count Register
                      =1   459     
                      =1   460     
  FF66                =1   461     Tmr2Ctrl        EQU     0FF66H          ;address of Timer 2 Control Register
  FF62                =1   462     Tmr2MaxCnt      EQU     0FF62H          ;address of Timer 2 Max Count A Register
  FF60                =1   463     Tmr2Count       EQU     0FF60H          ;address of Timer 2 Count Register
                      =1   464     
                      =1   465     ; Control Register Values
  E001                =1   466     Tmr0CtrlVal     EQU     0E001H          ;value to write to Timer 0 Control Register
                      =1   467                                             ;1---------------  enable timer
                      =1   468                                             ;-1--------------  write to control
                      =1   469                                             ;--1-------------  enable interrupts
                      =1   470                                             ;----000000------  reserved
                      =1   471                                             ;---0------0-----  read only
                      =1   472                                             ;-----------0----  Retrigger
                      =1   473                                             ;------------0---  Prescaler
                      =1   474                                             ;-------------0--  external clock
                      =1   475                                             ;--------------0-  single counter mode
                      =1   476                                             ;---------------1  continuous mode
                      =1   477                                             
  E001                =1   478     Tmr1CtrlVal     EQU     0E001H          ;value to write to Timer 1 Control Register
                      =1   479                                             ;1---------------  enable timer
                      =1   480                                             ;-1--------------  write to control
                      =1   481                                             ;--1-------------  enable interrupts
                      =1   482                                             ;----000000------  reserved
                      =1   483                                             ;---0------0-----  read only
                      =1   484                                             ;-----------0----  Retrigger
                      =1   485                                             ;------------0---  Prescaler
                      =1   486                                             ;-------------0--  external clock
                      =1   487                                             ;--------------0-  single counter mode
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE    7


LOC  OBJ                  LINE     SOURCE

                      =1   488                                             ;---------------1  continuous mode
                      =1   489     
  E001                =1   490     Tmr2CtrlVal     EQU     0E001H          ;value to write to Timer 2 Control Register
                      =1   491                                             ;1---------------  enable timer
                      =1   492                                             ;-1--------------  write to control
                      =1   493                                             ;--1-------------  enable interrupts
                      =1   494                                             ;----0000000-----  reserved
                      =1   495                                             ;-----------0----  MaxCount
                      =1   496                                             ;------------000-  reserved
                      =1   497                                             ;---------------1  continuous mode
                      =1   498     ; Control Register Values
                      =1   499                                           
                      =1   500                                             ; Control Register Values
  08CA                =1   501     CTS_PER_MILSEC  EQU     2250            ; 18MHZ/(8 * 1KHz) ~ 2250 counts per MS
                      =1   502     
  07D0                =1   503     PRESCALE_2SEC   EQU     2000            ; 2 seconds = CTS_PER_MILSEC * 2000
                      =1   504     
  0008                =1   505     TimerEOI        EQU     00008H          ;Timer EOI command (same for all timers)
  8000                =1   506     NonSpecEOI      EQU     08000H          ;Non-specific EOI command
                      =1   507     
                      =1   508     
  0258                =1   509     COUNT_FOR_30HZ  EQU     600             ; 18,000,000 HZ/(8 * 30 Hz * PWM_WIDTH_MAX) 
                      =1   510                                             ; ~ 600 counts for 30 HZ of PWM
                      =1   511                                             
  00B1                =1   512     COUNT_FOR_100HZ EQU     177             ; 18,000,000 HZ/(8 * 100 Hz * PWM_WIDTH_MAX) 
                      =1   513                                             ; ~ 177 counts for 100 HZ of PWM             
                                                             
                      =1   514                                             
                      =1   515                                             ; NOTE THIS IS APPROXIMATE, Clock is actually
                                    a bit faster
                      =1   516                                             ; than 18 MHZ
                      =1   517     
                      =1   518     
                           519     
                           520     
                           521     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           522     ;                                                                            ;
                           523     ;                                 HW9 Remote Mainloop Functions              ;
                           524     ;                                 EE51                                           ;
                           525     ;                                 Anjian Wu                                  ;
                           526     ;                                                                            ;
                           527     ;                                 TA: Pipe-Mazo                              ;
                           528     ;                                                                            ;
                           529     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           530     ;                                 What's in here?
                           531     ;
                           532     ;                                   Code Segment (* indicates PUBLIC)
                           533     ;
                           534     ;   Procedures
                           535     ;
                           536     ;   Remote_FSM_LOOP     -   Remote Main Loop
                           537     ;
                           538     ;   ParseRemoteWord     -   Parses four types of Events into respective functions
                           539     ;
                           540     ;   HandleKey           -   Loads tx_queue with command and updates display buff
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           541     ;   HandleSerErr        -   Updates display with error (Error_Buff_PTR)
                           542     ;   ParseRemoteChar     -   Parses chars from input serial (from Robot)
                           543     ;   HandleModem         -   Stub function for now, since no flow control
                           544     ;
                           545     ;   RemoteParseInit     -   Initializes all parsing variables and ToggleHandler
                           546     ;   ToggleHandler       -   Timer0 handler that actually Calls Display and cycles
                           547     ;                           between displaying statuses.
                           548     ;   GetTokenTypeVal     -   Grabs next token type and val
                           549     ;   RemoteParseReset    -   Resets state machine variables for ParseRemoteChar FSM
                           550     ;   SetError            -   Indicates RemoteFSM error, forces FSM reset
                           551     ;   AddDirChar          -   Concat the Direction Status String from Robot
                           552     ;   AddSpeedChar        -   Concat the Speed Status String from Robot
                           553     ;   AddRobotErrorChar   -   Concat the Robot Status String from Robot
                           554     ;
                           555     ;   Tables
                           556     ;
                           557     ;   Token Tables        -   Contains all tokens/token vals for Remote FSM
                           558     ;   Toggle_JMP_Table    -   Jump table inside Toggle handler, muxes what value displa
                                   y                    
                           559     ;   Toggle_Label_Table  -   Muxes which value label to display
                           560     ;   SerErrTable         -   Table of error strings for display
                           561     ;   KeyDisplayTable     -   Table of cmd strings for display
                           562     ;   KeyCmdTable         -   Table of strings cmds for Serial to Robot
                           563     ;
                           564     ;                              What's was last edit?
                           565     ;
                           566     ;                   Edits by Anjian Wu:
                           567     ;                               12-06-2013 -> Pseudo code 
                           568     ;                   12-10-2013 -> Added KeyDisplayError/KeyDisplayInit Table
                           569     ;                   12-13-2013 -> Added AddRobotErrorChar into FSM, removed no_op
                           570     ;                   12-13-2013 -> Working and updated documentation
                           571     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           572     CGROUP  GROUP   CODE
                           573     DGROUP  GROUP   STACK, DATA
                           574     
----                       575     CODE    SEGMENT PUBLIC 'CODE'
                           576     
                           577     
                           578             ASSUME  CS:CGROUP, DS:DGROUP
                           579             
                           580     ;external function declarations
                           581      
                           582     ;Init/Setup Functions 
                           583             EXTRN   InitUserInterfaceCS:NEAR    ; Initialize hardware ports for keypad an
                                   d display
                           584             EXTRN   EnqueueEventInit:NEAR       ; Initialize event queue
                           585             EXTRN   Timer0Init:NEAR             ; Setup and enable Timer0
                           586             EXTRN   Timer1Init:NEAR             ; Setup and enable Timer1
                           587             EXTRN   Timer2Init:NEAR             ; Setup and enable Timer2
                           588             EXTRN   ClrIRQVectors:NEAR          ; Clear interrupt vector table
                           589             EXTRN   KeyHandlerInit:NEAR         ; Initialize keypad variables
                           590             EXTRN   DisplayHandlerInit:NEAR     ; Initialize display variables
                           591             EXTRN   SerialInit:NEAR             ; Initialize serial variables
                           592             
                           593     ;Main Loop Functions
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           594             EXTRN   Display:NEAR                ; Displays string
                           595             EXTRN   DequeueEvent:NEAR           ; Enqueues event queue
                           596             EXTRN   EnqueueEvent:NEAR           ; Dequeues event queue
                           597             EXTRN   EventAvailable:NEAR         ; Checks if event queue is empty
                           598             EXTRN   SerialPutChar:NEAR          ; Serial output a char
                           599             EXTRN   no_op:NEAR                  ; Just returns         
                           600             EXTRN   Inc_Bright:NEAR             ; Increases Brightness of Display
                           601             EXTRN   Dec_Bright:NEAR             ; Decreases Brightness of Display
                           602             EXTRN   ScrollControl:NEAR
                           603                     
                           604     ; Name:             Remote Main Loop
                           605     ;
                           606     ; Description:      This is the remote main loop that does all initializations 
                           607     ;                   and then loops forever waiting for event-available.
                           608     ;
                           609     ; Operation:        *   Set up all initializations
                           610     ;                   *   Enter remote_fsm_loop
                           611     ;                   *   LOOP forever checking whether an event is available
                           612     ;                       , if so dequeue it and pass to ParseRemoteWord
                           613     ;
                           614     ; Input:            None.
                           615     ; Output:           None.
                           616     ;
                           617     ; User Interface:   Keypad -> user input
                           618     ;                   Display -> 14-seg display with 8 chars
                           619     ;
                           620     ; Error Handling:   None.
                           621     ;
                           622     ; Algorithms:       None.
                           623     ;
                           624     ; Data Structures:  None.
                           625     ;
                           626     ; Known Bugs:       None.
                           627     ; Limitations:      None.
                           628     ;
                           629     ; Revision History:
                           630     ;                   Edits by Anjian Wu:
                           631     ;                               Initial Version ->  12-05-2013 
                           632     ;                   WORKING! I think->  12-13-2013
                           633     ;------------------------------------------------------------------------------------
                                   ----               
0000                       634     START:
                           635     
0000                       636     MAIN:
0000 B8----         R      637             MOV     AX, DGROUP              ;initialize the stack pointer
0003 8ED0                  638             MOV     SS, AX
0005 BCE00190       R      639             MOV     SP, OFFSET(DGROUP:TopOfStack)
                           640     
0009 B8----         R      641             MOV     AX, DGROUP              ;initialize the data segment
000C 8ED8                  642             MOV     DS, AX
                           643             
000E E80000         E      644             CALL    ClrIRQVectors              ; Clear whole vector table with Illegal Fu
                                   nction
0011 E80000         E      645             CALL    InitUserInterfaceCS        ; Initialize All UI hardware (keypad, disp
                                   lay)
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   10


LOC  OBJ                  LINE     SOURCE

0014 E80000         E      646             CALL    Timer0Init                 ; Initialize timer 0 interrupt
0017 E80000         E      647             CALL    Timer1Init                 ; Initialize timer 1 interrupt
001A E80000         E      648             CALL    Timer2Init                 ; Initialize timer 2 interrupt
001D E80000         E      649             CALL    KeyHandlerInit             ; Initialize keypad function variables
0020 E80000         E      650             CALL    SerialInit                 ; Initialize serial function variables
0023 E80000         E      651             CALL    DisplayHandlerInit         ; Initialize display function variables
0026 E80000         E      652             CALL    EnqueueEventInit           ; Initialize the Event queue function vars
                           653                                                
0029 E82502                654             CALL    RemoteParseInit            ; Initialize remote parser FSM and handler
                           655             
002C FB                    656             STI                                ; Start interrupts
                           657             ;JMP     REMOTE_FSM_LOOP           ; Enter loop
                           658     
                           659         
002D                       660     REMOTE_FSM_LOOP:
                           661         
002D E80000         E      662             CALL    EventAvailable              ; Is there a pending event? 
0030 7406                  663             JZ      RemoteFSMIdle               ; Event queue is empty, thus stay idle
                           664             ;JNZ    RemoteFSMEvent              ; There was an event!
0032                       665     RemoteFSMEvent:
                           666     
0032 E80000         E      667             CALL    DequeueEvent                ; Grab that event into AX
0035 E80200                668             CALL    ParseRemoteWord             ; Pass to get event parsed
                           669             
0038                       670     RemoteFSMIdle:
                           671         
0038 EBF3                  672     JMP     REMOTE_FSM_LOOP                     ; Loop forever
                           673     
                           674     ; Name:             ParseRemoteWord
                           675     ;
                           676     ; Description:      Uses a call table to select the next function to call to handle
                           677     ;                   the event type. The event val is always passed to this 
                           678     ;                   function call. AH is the event key, and AL is the event val.
                           679     ;
                           680     ; Operation:        * Isolate event key into a 16-bit value.
                           681     ;                   * Adjust the event key value for WORD table lookup
                           682     ;                   * Isolate event value into 16-bit value.
                           683     ;                   * CALL Remote_Call_Table using the event key and passing
                           684     ;                     the event value.
                           685     ;                   
                           686     ;Arguments:             AH  -> Event Key
                           687     ;                   AL  -> Event Value
                           688     ;Return Values:         None.
                           689     ;Shared Variables:      None.
                           690     ;Local Variables:       BL  -> Copy of event value
                           691     ;                   AX  -> copy of event key
                           692     ;                   BX  -> pointer for CALL table look up
                           693     ;Global Variables:      None.                   
                           694     ;Input:                 None.
                           695     ;Output:                None.
                           696     ;Registers Used:        AX, BX
                           697     ;Stack Depth:           none.
                           698     ;Known Bugs:            None.
                           699     ;Data Structures:       None.
                           700     ;Error Handling:        If tx_queue is FULL, then stop and return.
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   11


LOC  OBJ                  LINE     SOURCE

                           701     ;Algorithms:            None.
                           702     ;Limitations:           None.
                           703     ;Author:                        Anjian Wu
                           704     ;
                           705     ; Revision History:
                           706     ;                   Edits by Anjian Wu:
                           707     ;                               12-05-2013 -> Initial Version
                           708     ;                   12-13-2013 -> Working and documentation
                           709     ;------------------------------------------------------------------------------------
                                   ----       
003A                       710     ParseRemoteWord     PROC    NEAR
                           711     
                           712     ; Arg: AX = [AH = key, AL = value]
                           713     
003A 8AD8                  714         MOV     BL, AL                      ; Save event value
003C 32FF                  715         XOR     BH, BH                      ; Isolate the Event val     
                           716         
003E 86E0                  717         XCHG    AH, AL                      ; Swap such that Event Type is LSNibble
0040 32E4                  718         XOR     AH, AH                      ; Isolate the Event Type      
                           719     
0042 D1E0                  720         SHL     AX, WORD_LOOKUP_ADJUST      ; Prepare for WORD table lookup
0044 93                    721         XCHG    BX, AX                      ; Copy to BX for pointer, and AX now has Even
                                   t val
0045 2EFF974B00     R      722         CALL    CS:Remote_Call_Table[BX]    ; Go to that FSM  function, passing Event val
                                    in AX
                           723         
004A C3                    724         RET
                           725         
                           726     ParseRemoteWord ENDP
                           727     
                           728     ; Name:             Remote_Call_Table
                           729     ;
                           730     ; Description:      Call table for ParseRemoteWord. The event key value is mapped
                           731     ;                   to the functions below.
                           732     ;                   
                           733     ;Limitations:           None.
                           734     ;Author:                        Anjian Wu
                           735     ;
                           736     ; Revision History:
                           737     ;                   Edits by Anjian Wu:
                           738     ;                               12-05-2013 -> Initial Version
                           739     ;                   12-13-2013 -> Working and documentation
                           740     ;------------------------------------------------------------------------------------
                                   ----       
004B                       741     Remote_Call_Table           LABEL       WORD
                           742                                         
004B 5300           R      743             DW              HandleKey               ;KEY_EVENT_KEY - An internal key pres
                                   s
004D E801           R      744             DW              HandleSerErr        ;SER_ERR_KEY   - An internal serial CHIP 
                                   issue
004F 9603           R      745             DW      ParseRemoteChar     ;RX_ENQUEUED_KEY - External serial char stream
0051 5002           R      746             DW      HandleModem         ;MODEM_KEY - Internal serial chip modem issue
                           747     
                           748     
                           749     ;Procedure:                     HandleKey
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   12


LOC  OBJ                  LINE     SOURCE

                           750     ;
                           751     ;Description:           Send out appropriate command over serial to Robot and updates
                           752     ;                   display with what action was just sent.
                           753     ;
                           754     ;                   Maps the key pressed into the command string with fixed length.
                           755     ;                   Then all of the chars of that cmd string is push out to serial. 
                           756     ;                   Also displays the proper message to the user describing the comma
                                   nd.
                           757     ;                   Finally also forces Togglehandler to immediately display what
                           758     ;                   was just pressed, so that user doesn't have to wait for it to
                           759     ;                   come around.
                           760     ;
                           761     ;Operation:         * AL is the key value that is going to be mapped to the serial CM
                                   D
                           762     ;                   * BX = CMD_LENGTH*AL + OFFSET(KeyCmdTable) = CMD string offset
                           763     ;                   * For AL = 0 to CMD_LENGTH - 1, grab each char from KeyCmdTable
                           764     ;                     at CS:BX[AL]. Each char is pushed to serial with SerialPutChar.
                           765     ;                       * IF tx_queue in Serial is full, USER is told so and function
                                    returns
                           766     ;                   * BX = (Display_SIZE+1)*AL + OFFSET(KeyDisplayTable) = action str
                                   ing offset
                           767     ;                   * Store that offset into Action_Buff_PTR for Togglehandler.
                           768     ;                   * Also force ToggleHandler to display ACTION VAL next.
                           769     ;                
                           770     ;Arguments:             AL -> Event Val
                           771     ;Return Values:         None.
                           772     ;Shared Variables:      Action_Buff_PTR (WRITE)
                           773     ;                   ToggleCTR (WRITE)
                           774     ;Local Variables:       CL  -> copy of event val
                           775     ;                   BX  -> Table offset
                           776     ;                   AX  -> table ele pointer
                           777     ;Global Variables:      None.                   
                           778     ;Input:                 None.
                           779     ;Output:                None.
                           780     ;Registers Used:        AL, AH, AX, BX, CL
                           781     ;Stack Depth:           None.
                           782     ;Known Bugs:            None.
                           783     ;Data Structures:       None.
                           784     ;Error Handling:        If serial tx_queue is FULL, then stop, tell USER, and return.
                           785     ;Algorithms:            None.
                           786     ;Limitations:           None.
                           787     ;Author:                        Anjian Wu
                           788     ;Revision History:
                           789     ;                   Edits by Anjian Wu:
                           790     ;                   12-06-2013  -> Pseudo code
                           791     ;                   12-12-2013  -> Added forcing Toggle to show ACTION VAL
                           792     ;                   12-13-2013  -> Working and documentation
                           793     ;------------------------------------------------------------------------------
0053                       794     HandleKey       PROC    NEAR
                           795     
                           796     ; Arg: AL = value
                           797     
0053 8AC8                  798         MOV     CL, AL          ; Save a copy of AL
                           799         
                           800 +1      
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   13


LOC  OBJ                  LINE     SOURCE

0055 33DB                  801 +1      XOR     BX, BX                  ; Clear counter
0057 B307                  802 +2          MOV             BL, CMD_LENGTH      ; Let counter be CMD_LENGTH
0059 F6E3                  803 +1          MUL             BL                      ; Rel pinter = CMD_LENGTH * typeindex
005B 05BD0090       R      804 +2      ADD     AX, OFFSET( KeyCmdTable)  ;
                           805 +1  
                           806                                 ; Calc abs starting addr of the char string
                           807                                 ; AX = CMD_LENGTH*AL + OFFSET(KeyCmdTable)
                           808         
005F 8BD8                  809         MOV     BX, AX          ; Need the abs addr in BX for XLAT
                           810                                 
0061 32C0                  811         XOR     AL, AL          ; Clear counter
                           812         
                           813     ;-----------------------Loop enqueue the char string-----------------------------
0063                       814     HandleKeyEnqueue:
0063 3C07                  815         CMP     AL, CMD_LENGTH          ; Go from AL = 0 to CMD_LENGTH - 1
0065 7D0D                  816         JGE     HandleKeyEnqueueInternalOps    ; Yes, so exit loop
                           817         
0067 50                    818         PUSH    AX                      ; Save counter
0068 2ED7                  819         XLAT        CS:KeyCmdTable                  ; Get next char (at CS:BX[AL] -> AL b
                                   y design)      
006A E80000         E      820         CALL    SerialPutChar           ; Is TX_queue Full?
                           821         
006D 58                    822         POP     AX                      ; Restore counter
                           823     
006E 7220                  824         JC      HandleKeyError          ; Yes it is, tell user.
                           825                                         ; Cannot send this char, exit this function
                           826                                         ; immediately. Any partially sent string is unlik
                                   ely
                           827                                         ; to be valid string, thus ROBOT side will likely
                                    throw
                           828                                         ; a string error as well.
                           829         ;JNZ    HandleKeyEnqueueOk      ; It is ok to enqueue.
                           830         
0070                       831     HandleKeyEnqueueOk:
                           832         
0070 FEC0                  833         INC     AL                      ; Increment Counter
                           834         
0072 EBEF                  835         JMP     HandleKeyEnqueue
                           836         
0074                       837     HandleKeyEnqueueInternalOps:
                           838     ;-----------------------Now do any INTERNAL operations-------------------------
0074 33DB                  839         XOR     BX, BX                      ;
0076 8AD9                  840         MOV     BL, CL                      ;
0078 D1E3                  841         SHL     BX, WORD_LOOKUP_ADJUST      ; Prepare for WORD table lookup
007A 2EFF979D00     R      842         CALL    CS:Key_Call_Table[BX]       ; Go to that FSM  function, passing Event val
                                    in AX
                           843     ;-----------------------Now update display for USER-----------------------------
007F                       844     HandleKeyEnqueueDone:
007F 33C0                  845         XOR     AX, AX          ; 
0081 8AC1                  846         MOV     AL, CL          ; Restore the copy of event value
                           847 +1      
0083 33DB                  848 +1      XOR     BX, BX                  ; Clear counter
0085 B309                  849 +2          MOV             BL, Display_SIZE+1          ; Let counter be CMD_LENGTH
0087 F6E3                  850 +1          MUL             BL                      ; Rel pinter = CMD_LENGTH * typeindex
0089 05340190       R      851 +2      ADD     AX, OFFSET( KeyDisplayTables)  ;
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   14


LOC  OBJ                  LINE     SOURCE

                           852 +1  
                           853                                 ; Calc abs starting addr of the char string
                           854                                 ; AX = (Display_SIZE+1)*AL + OFFSET(KeyDisplayTable)
008D EB0490                855         JMP     HandleKeyDone
                           856         
0090                       857     HandleKeyError:
0090 B8D601         R      858         MOV     AX, OFFSET(KeyDisplayError) ; Send out the Error TX display
                           859         ;JMP     HandleKeyDone
0093                       860     HandleKeyDone:
                           861     
0093 A32900         R      862         MOV     Action_Buff_PTR, AX     ;  Update the Action buffer pointer
0096 C70630000100   R      863         MOV     ToggleCTR, ACTION_VAL   ;  Force ToggleHandler to immediately show ACTION
                                    VAL
                           864         
009C C3                    865         RET     
                           866         
                           867     HandleKey   ENDP
                           868     
                           869     ; Name:             KeyCmdTable
                           870     ;
                           871     ; Description:      Sometimes the designer might want to have INTERNAL functions
                           872     ;                   be called for a key press (not just only serial strings).
                           873     ;                   This CALL table is for just that!
                           874     ;                   This table is design so any INTERNAL function can be executed
                           875     ;                   or added easily to be called after a keypress.
                           876     ;                   
                           877     ;Limitations:           Fixed length size.
                           878     ;Author:                        Anjian Wu
                           879     ;
                           880     ; Revision History:
                           881     ;                   Edits by Anjian Wu:
                           882     ;                               12-13-2013 -> Initial Version
                           883     ;                   12-13-2013 -> 
                           884     
009D                       885     Key_Call_Table      LABEL       WORD
                           886                                         
009D 0000           E      887             DW              no_op         ;0
009F 0000           E      888             DW              no_op         ;1
00A1 0000           E      889             DW      no_op         ;2
00A3 5B04           R      890             DW      SerialDebug   ;3
00A5 0000           E      891         DW      ScrollControl;4
00A7 0000           E      892         DW      no_op         ;5
00A9 0000           E      893         DW      no_op         ;6
00AB 0000           E      894         DW      no_op         ;7
00AD 0000           E      895         DW      Inc_Bright    ;8
00AF 0000           E      896         DW      no_op         ;9
00B1 0000           E      897         DW      no_op         ;10
00B3 0000           E      898         DW      no_op         ;11
00B5 0000           E      899         DW      Dec_Bright    ;12
00B7 0000           E      900         DW      no_op         ;13
00B9 0000           E      901         DW      no_op         ;14
00BB 0000           E      902         DW      no_op         ;15
                           903         
                           904     
                           905     ; Name:             KeyCmdTable
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   15


LOC  OBJ                  LINE     SOURCE

                           906     ;
                           907     ; Description:      String table containing fixed command lengths of chars that is
                           908     ;                   ouputted to serial to the Robot for parsing. Every string
                           909     ;                   must end with CAR_RETURN and be size CMD_LENGTH.
                           910     ;                   
                           911     ;Limitations:           Fixed length size.
                           912     ;Author:                        Anjian Wu
                           913     ;
                           914     ; Revision History:
                           915     ;                   Edits by Anjian Wu:
                           916     ;                               12-05-2013 -> Initial Version
                           917     ;                   12-13-2013 -> Working and documentation
                           918     ;------------------------------------------------------------------------------------
                                   ----       
                           919     ;                   The way KEYS are mapped physically is...
                           920     ;                   __________________________
                           921     ;                  | [0]  |  [1]  | [2] | [3] |  
                           922     ;                  |__________________________|
                           923     ;                  | [4]  |  [5]  | [6] | [7] |
                           924     ;  Keypad ------>  |__________________________|
                           925     ;                  | [8]  |  [9]  | [10]| [11]|    
                           926     ;                  |__________________________|
                           927     ;                  | [12] |  [13] | [14]| [15]|  
                           928     ;                  |_____ |_______|_____|_____|   
                           929     
00BD                       930     KeyCmdTable         LABEL       BYTE
                           931                                  
00BD 54                    932             DB              'T',        '+',   '0015',     CAR_RETURN ;Key 0
00BE 2B
00BF 30303135
00C3 0D
00C4 54                    933             DB              'T',        ' ',   '0000',     CAR_RETURN ;Key 1
00C5 20
00C6 30303030
00CA 0D
00CB 54                    934             DB      'T',        '-',   '0015',     CAR_RETURN ;Key 2
00CC 2D
00CD 30303135
00D1 0D
00D2 20                    935             DB      ' ',        ' ',   '    ',     CAR_RETURN ;Key 3
00D3 20
00D4 20202020
00D8 0D
00D9 20                    936             DB      ' ',        ' ',   '    ',     CAR_RETURN ;Key 4
00DA 20
00DB 20202020
00DF 0D
00E0 4F                    937             DB      'O',        ' ',   '    ',     CAR_RETURN ;Key 5
00E1 20
00E2 20202020
00E6 0D
00E7 53                    938             DB      'S',        ' ',   '0000',     CAR_RETURN ;Key 6
00E8 20
00E9 30303030
00ED 0D
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   16


LOC  OBJ                  LINE     SOURCE

00EE 46                    939             DB      'F',        ' ',   '    ',     CAR_RETURN ;Key 7
00EF 20
00F0 20202020
00F4 0D
00F5 20                    940             DB      ' ',        ' ',   '    ',     CAR_RETURN ;Key 8
00F6 20
00F7 20202020
00FB 0D
00FC 44                    941             DB      'D',        '+',   '0015',     CAR_RETURN ;Key 9
00FD 2B
00FE 30303135
0102 0D
0103 56                    942             DB      'V',        '+',   '4369',     CAR_RETURN ;Key 10
0104 2B
0105 34333639
0109 0D
010A 44                    943             DB      'D',        '-',   '0015',     CAR_RETURN ;Key 11
010B 2D
010C 30303135
0110 0D
0111 20                    944             DB      ' ',        ' ',   '    ',     CAR_RETURN ;Key 12
0112 20
0113 20202020
0117 0D
0118 44                    945             DB      'D',        '-',   '0090',     CAR_RETURN ;Key 13
0119 2D
011A 30303930
011E 0D
011F 56                    946             DB      'V',        '-',   '4369',     CAR_RETURN ;Key 14 
0120 2D
0121 34333639
0125 0D
0126 44                    947             DB      'D',        '+',   '0090',     CAR_RETURN ;Key 15
0127 2B
0128 30303930
012C 0D
012D 20                    948             DB      ' ',        ' ',   '    ',     CAR_RETURN ;Key Not assigned
012E 20
012F 20202020
0133 0D
                           949             
                           950     
                           951     ; Name:             KeyDisplayTables (KeyDisplayInit and KeyDisplayError)
                           952     ;
                           953     ; Description:      String table containing fixed command lengths of chars that is
                           954     ;                   outputted to display of Remote. Every string
                           955     ;                   must end with ASCII_NULL and be size Display_SIZE + 1.
                           956     ;                   
                           957     ;Limitations:           Fixed length size.
                           958     ;Author:                        Anjian Wu
                           959     ;
                           960     ; Revision History:
                           961     ;                   Edits by Anjian Wu:
                           962     ;                               12-05-2013 -> Initial Version
                           963     ;                   12-13-2013 -> Working and documentation
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   17


LOC  OBJ                  LINE     SOURCE

                           964     ;                   The way KEYS are mapped physically is...
                           965     ;                   __________________________
                           966     ;                  | [0]  |  [1]  | [2] | [3] |  
                           967     ;                  |__________________________|
                           968     ;                  | [4]  |  [5]  | [6] | [7] |
                           969     ;  Keypad ------>  |__________________________|
                           970     ;                  | [8]  |  [9]  | [10]| [11]|    
                           971     ;                  |__________________________|
                           972     ;                  | [12] |  [13] | [14]| [15]|  
                           973     ;                  |_____ |_______|_____|_____|     
                           974     ; The addition of KeyDisplayInit and KeyDisplayError Tables is for
                           975     ; easier coding and are NOT mapped ot any keys.
0134                       976     KeyDisplayTables            LABEL       BYTE
0134 5420414E472B20        977             DB              'T ANG+  ', ASCII_NULL      ;Key 0
     20
013C 00
013D 54205245534554        978             DB              'T RESET ', ASCII_NULL      ;Key 1
     20
0145 00
0146 5420414E472D20        979             DB              'T ANG-  ', ASCII_NULL      ;Key 2
     20
014E 00
014F 44656275674F46        980             DB              'DebugOFF', ASCII_NULL      ;Key 3 <- The only time user sees
                                    this
     46
0157 00
                           981                                             ;         is when they turn off Serial
                           982                                             ;         Debug mode.
0158 2D5343524F4C4C        983             DB              '-SCROLL-', ASCII_NULL      ;Key 4      
     2D
0160 00
0161 4C415A52204F46        984             DB              'LAZR OFF', ASCII_NULL      ;Key 5
     46
0169 00
016A 532054204F2050        985             DB              'S T O P ', ASCII_NULL      ;Key 6
     20
0172 00
0173 4C415A52204F4E        986             DB              'LAZR ON ', ASCII_NULL      ;Key 7
     20
017B 00
017C 42726967687420        987             DB              'Bright +', ASCII_NULL      ;Key 8      
     2B
0184 00
0185 444952202B3135        988             DB              'DIR +15 ', ASCII_NULL      ;Key 9
     20
018D 00
018E 53504545442B20        989             DB              'SPEED+  ', ASCII_NULL      ;Key 10
     20
0196 00
0197 444952202D3135        990             DB              'DIR -15 ', ASCII_NULL      ;Key 11
     20
019F 00
01A0 42726967687420        991             DB              'Bright -', ASCII_NULL      ;Key 12     
     2D
01A8 00
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   18


LOC  OBJ                  LINE     SOURCE

01A9 444952202D3930        992             DB              'DIR -90 ', ASCII_NULL      ;Key 13
     20
01B1 00
01B2 53504545442D20        993             DB              'SPEED-  ', ASCII_NULL      ;Key 14
     20
01BA 00
01BB 444952202B3930        994             DB              'DIR +90 ', ASCII_NULL      ;Key 15
     20
01C3 00
01C4 5370656369616C        995         DB      'Special!', ASCII_NULL      ;NOT KEY
     21
01CC 00
                           996         
01CD                       997     KeyDisplayInit     LABEL        BYTE
01CD 50726573734B65        998         DB      'PressKey', ASCII_NULL      ;Initial Message
     79
01D5 00
01D6                       999     KeyDisplayError     LABEL       BYTE
01D6 54582046554C4C       1000         DB      'TX FULL ', ASCII_NULL      ;TX queue is Full Error
     20
01DE 00
01DF                      1001     DisplayClear            LABEL   BYTE
01DF 20202020202020       1002         DB      '        ', ASCII_NULL      ;TX queue is Full Error
     20
01E7 00
                          1003     
                          1004         
                          1005     ;Procedure:                     HandleSerErr
                          1006     ;
                          1007     ;Description:           Determines which Serial error occurred at the chip,
                          1008     ;                   and informs the user to the issue. Note this is
                          1009     ;                   serial errors from Remote Serial Chip.
                          1010     ;
                          1011     ;Operation:         * Table offset = AX = Display_SIZE*AL + OFFSET(SerErrTable)
                          1012     ;                   * Just store that into Error_Buff_PTR.
                          1013     ;                
                          1014     ;Arguments:             AL  -> Event Val
                          1015     ;Return Values:         none.
                          1016     ;Shared Variables:      Error_Buff_PTR (WRITE).
                          1017     ;Local Variables:       AX  -> abs pointer address.
                          1018     ;Global Variables:      None.                   
                          1019     ;Input:                 None.
                          1020     ;Output:                None.
                          1021     ;Registers Used:        None.
                          1022     ;Stack Depth:           none.
                          1023     ;Known Bugs:            None.
                          1024     ;Data Structures:       None.
                          1025     ;Error Handling:        None.
                          1026     ;Algorithms:            None.
                          1027     ;Limitations:           Only displays error to user, does not fix the error.
                          1028     ;Author:                        Anjian Wu
                          1029     ;Revision History:
                          1030     ;                   Edits by Anjian Wu:
                          1031     ;                               12-06-2013 -> Initial Version
                          1032     ;                   12-13-2013 -> Working and documentation
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   19


LOC  OBJ                  LINE     SOURCE

                          1033     ;------------------------------------------------------------------------------
01E8                      1034     HandleSerErr    PROC    NEAR
                          1035     
                          1036     
                          1037 +1      
01E8 33DB                 1038 +1      XOR     BX, BX                  ; Clear counter
01EA B309                 1039 +2          MOV             BL, Display_SIZE+1          ; Let counter be CMD_LENGTH
01EC F6E3                 1040 +1          MUL             BL                      ; Rel pinter = CMD_LENGTH * typeindex
01EE 05F60190       R     1041 +2      ADD     AX, OFFSET( SerErrTable)  ;
                          1042 +1  
                          1043                                 ; Calc abs starting addr of the char string
                          1044                                 ; AX = Display_SIZE*AL + OFFSET(SerErrTable)
                          1045                                 
01F2 A32B00         R     1046         MOV     Error_Buff_PTR, AX ;   
                          1047     
01F5 C3                   1048         RET
                          1049         
                          1050     HandleSerErr    ENDP
                          1051     
                          1052     ; Name:             SerErrTable
                          1053     ;
                          1054     ; Description:      String table containing fixed command lengths of chars that is
                          1055     ;                   outputted to display of Remote. Every string
                          1056     ;                   must end with ASCII_NULL and be size Display_SIZE + 1.
                          1057     ;                   
                          1058     ;Limitations:           Fixed length size.
                          1059     ;Author:                        Anjian Wu
                          1060     ;
                          1061     ; Revision History:
                          1062     ;                   Edits by Anjian Wu:
                          1063     ;                               12-05-2013 -> Initial Version
                          1064     ;                   12-13-2013 -> Working and documentation
01F6                      1065     SerErrTable     LABEL       BYTE
                          1066     
01F6 4E4F204552524F       1067         DB     'NO ERROR', ASCII_NULL   ;
     52
01FE 00
01FF 4F56455252554E       1068         DB     'OVERRUN ', ASCII_NULL   ; Overrun serial error
     20
0207 00
0208 20202020202020       1069         DB     '        ', ASCII_NULL   ;
     20
0210 00
0211 50415249545920       1070         DB     'PARITY  ', ASCII_NULL   ; Parity serial error
     20
0219 00
021A 20202020202020       1071         DB     '        ', ASCII_NULL   ;
     20
0222 00
0223 4652414D452020       1072         DB     'FRAME   ', ASCII_NULL   ; Frame serial error
     20
022B 00
022C 20202020202020       1073         DB     '        ', ASCII_NULL   ;
     20
0234 00
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   20


LOC  OBJ                  LINE     SOURCE

0235 20202020202020       1074         DB     '        ', ASCII_NULL   ;
     20
023D 00
023E 20202020202020       1075         DB     '        ', ASCII_NULL   ;
     20
0246 00
0247 425245414B2020       1076         DB     'BREAK   ', ASCII_NULL   ; Break int
     20
024F 00
                          1077     
                          1078     
                          1079     ;Procedure:                     HandleModem
                          1080     ;
                          1081     ;Description:           Stub function for now.
                          1082     ;                
                          1083     ;Arguments:             None.
                          1084     ;Return Values:         none.
                          1085     ;Shared Variables:      None
                          1086     ;Local Variables:       None.
                          1087     ;Global Variables:      None.                   
                          1088     ;Input:                 None.
                          1089     ;Output:                None.
                          1090     ;Registers Used:        None.
                          1091     ;Stack Depth:           none.
                          1092     ;Known Bugs:            None.
                          1093     ;Data Structures:       None.
                          1094     ;Error Handling:        None.
                          1095     ;Algorithms:            None.
                          1096     ;Limitations:           None.
                          1097     ;Author:                        Anjian Wu
                          1098     ;Revision History:
                          1099     ;                   Edits by Anjian Wu:
                          1100     ;                   12-06-2013 -> Pseudo code
                          1101     ;                   12-13-2013 -> Working and documentation
                          1102     ;------------------------------------------------------------------------------
0250                      1103     HandleModem    PROC    NEAR
                          1104     
0250 C3                   1105         RET
                          1106         
                          1107     HandleModem    ENDP
                          1108     
                          1109     ;Function:                      RemoteParseInit
                          1110     ;Description:           Resets all Parser variables to initial state, zero magnitude,
                                    and pos sign     
                          1111     ;Operation:         * Set sign as POS, set FSM_state as ST_INITIAL, and set magnitude
                                    as zero         
                          1112     ;Arguments:             None.
                          1113     ;Return Values:         none.
                          1114     ;Shared Variables:      none.
                          1115     ;Local Variables:       None.
                          1116     ;Global Variables:      None.                   
                          1117     ;Input:                 None.
                          1118     ;Output:                None.
                          1119     ;Registers Used:        none.
                          1120     ;Stack Depth:           none.
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   21


LOC  OBJ                  LINE     SOURCE

                          1121     ;Known Bugs:            None.
                          1122     ;Data Structures:       None.
                          1123     ;Error Handling:        None
                          1124     ;Algorithms:            None.
                          1125     ;Limitations:           None.
                          1126     ;Author:                        Anjian Wu
                          1127     ;Author:                        Anjian Wu
                          1128     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1129     ;                   12-08-2013: Documentation - Anjian Wu
                          1130     ;------------------------------------------------------------------------------
0251                      1131     RemoteParseInit  PROC    NEAR
                          1132                 
0251 C60614000090   R     1133         MOV     Dir_PTR, zero               ; Reset Direction Buff ptr
0257 C6061E000090   R     1134         MOV     Spd_PTR, zero               ; Reset Speed Buff ptr
025D C70630000000   R     1135         MOV     ToggleCTR, zero             ; Start with first Status to toggle
0263 C60628000090   R     1136         MOV     Rbt_error_Ptr, zero         ; Reset Robot Buff ptr
0269 C70632000000   R     1137         MOV     TogglePreScaler, zero       ; Reset Toggle Prescale counter
026F C6060A000090   R     1138         MOV     SerialDebugFlag, FALSE      ; Start NOT in Debug Mode
                          1139         
0275 C7062900CD01   R     1140         MOV     Action_Buff_PTR, OFFSET(KeyDisplayInit) ; Display NO actions yet
027B C7062B00F601   R     1141         MOV     Error_Buff_PTR, OFFSET(SerErrTable)     ; Display NO error yet
0281 C6062F000090   R     1142         MOV     FSM_state, ST_INITIAL                   ; Initialize FSM at start state
                          1143         
0287 33DB                 1144         XOR     BX, BX                      ; Clear Counter
                          1145             
0289                      1146     RemoteParseInitBufClear:
                          1147     
0289 83FB08               1148         CMP     BX, Display_SIZE             ; FROM BX = 0 to Display_SIZE...
028C 7F1B                 1149         JG     RemoteParseInitBufClearDone   ; If each done, then leave loop
                          1150         
028E C6870B000090   R     1151         MOV     Dir_Buffer[BX], ASCII_NULL  ; Clear direction displayed
0294 C68715000090   R     1152         MOV     Spd_Buffer[BX], ASCII_NULL  ; Clear speed displayed
029A C6871F000090   R     1153         MOV     Rbt_error_Buff[BX], ASCII_NULL  ; Clear Robot status
02A0 C68700000090   R     1154         MOV     Serial_D_Buff[BX], ASCII_NULL ; Clear Serial Debug Buffer
                          1155     
02A6 43                   1156         INC     BX                          ; Increment buffer/counter index
02A7 EBE0                 1157         JMP     RemoteParseInitBufClear     ; Loop until all entries are cleared
                          1158         
02A9                      1159     RemoteParseInitBufClearDone:
                          1160     
02A9 33C0                 1161         XOR     AX, AX          ;clear ES (interrupt vectors are in segment 0)
02AB 8EC0                 1162         MOV     ES, AX
                          1163                                 ;store the vector
02AD 26C7062000BC02 R     1164         MOV     ES: WORD PTR (4 * Tmr0Vec), OFFSET(ToggleHandler)   ; Install ToggleHandl
                                   er
02B4 26C7062200---- R     1165         MOV     ES: WORD PTR (4 * Tmr0Vec + 2), SEG(ToggleHandler)
                          1166         
                          1167     
02BB C3                   1168             RET
                          1169             
                          1170     RemoteParseInit  ENDP  
                          1171     
                          1172     ;Function:                      ToggleHandler
                          1173     ;Description:           This timer event actually outputs various display buffers to 
                                   be displayed.
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   22


LOC  OBJ                  LINE     SOURCE

                          1174     ;                   Based on the ToggleCTR, the display muxes the ACTION, SPEED, DIRE
                                   CTION, 
                          1175     ;                   INTERNAL SERIAL ERRORS, and ROBOT ERRORS vals, as well as their l
                                   abels.
                          1176     ;                   To enable toggling on magnitude of seconds, there is a prescale c
                                   ounter
                          1177     ;                   that effectively muxes what is displayed every PRESCALE interrupt
                                   s. Thus
                          1178     ;                   this is a nested counter
                          1179     ;
                          1180     ;Operation:         * Set sign as POS, set FSM_state as ST_INITIAL, and set magnitude
                                    as zero         
                          1181     ;Arguments:             None.
                          1182     ;Return Values:         none.
                          1183     ;Shared Variables:      none.
                          1184     ;Local Variables:       None.
                          1185     ;Global Variables:      None.                   
                          1186     ;Input:                 None.
                          1187     ;Output:                None.
                          1188     ;Registers Used:        none.
                          1189     ;Stack Depth:           none.
                          1190     ;Known Bugs:            None.
                          1191     ;Data Structures:       None.
                          1192     ;Error Handling:        None
                          1193     ;Algorithms:            None.
                          1194     ;Limitations:           None.
                          1195     ;Author:                        Anjian Wu
                          1196     ;Author:                        Anjian Wu
                          1197     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1198     ;                   12-08-2013: Documentation - Anjian Wu
                          1199     ;                   12-11-2013: Fixed bug with prescaler and args passing to display 
                                   - Anjian Wu
                          1200     ;------------------------------------------------------------------------------
02BC                      1201     ToggleHandler   PROC    NEAR
                          1202         
02BC 60                   1203         PUSHA                               ; Save all Regs
                          1204         
02BD                      1205     ToggleCheckDebugMode:
02BD 803E0A0001     R     1206         CMP     SerialDebugFlag, TRUE      ; Are we in debug mode?
                          1207     
02C2 7436                 1208         JE     T_Jump_Helper               ; Yes we are, leave display alone
                          1209         ;JE    TogglePrescale              ; NOt in debug mode, so continue normal
                          1210                                            ; toggling.
02C4                      1211     TogglePrescale:
02C4 FF063200       R     1212         INC     TogglePreScaler            ; Increase the prescale counter
02C8 813E3200D007   R     1213         CMP     TogglePreScaler, PRESCALE  ; Are we done prescaling?
02CE 7C7C                 1214         JL      ToggleDone                 ; Not yet, just exit
                          1215         ;JGE     TogglePrescalePass        ; Yes! So change what is displayed
02D0                      1216     TogglePrescalePass:    
02D0 C70632000000   R     1217         MOV     TogglePreScaler, zero      ; Reset Prescale counter
                          1218     
02D6 833E30000A     R     1219         CMP     ToggleCTR, numOfStatus     ; Finished with all status?
02DB 7C06                 1220         JL      ToggleMux                  ; Not yet, grab next one
                          1221         ;JGE    ToggleMuxReset             ; yes so loop back
02DD                      1222     ToggleMuxReset:
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   23


LOC  OBJ                  LINE     SOURCE

02DD C70630000000   R     1223         MOV     ToggleCTR, zero             ; Reset Toggle index
                          1224         ;JMP    ToggleMux                   ; Go display initial message
02E3                      1225     ToggleMux:
02E3 8B1E3000       R     1226         MOV     BX, ToggleCTR               ; Use ToggleCTR for table look up
02E7 D1E3                 1227         SHL     BX, WORD_LOOKUP_ADJUST      ; Adjust for WORD table
02E9 2EFFA78203     R     1228         JMP     CS:Toggle_JMP_Table[BX]     ; Call jump into properly mapped function
                          1229         
02EE                      1230     T_Action_Val:    
02EE A12900         R     1231         MOV     AX, Action_Buff_PTR         ; Time to display Action msg
                          1232 +1      
02F1 8BF0                 1233 +2      MOV     SI, AX          ; Prepare for display at SI
02F3 8CC8                 1234 +2      MOV     AX, CS          ;
02F5 8EC0                 1235 +2      MOV     ES, AX          ; String is in code segment
                          1236 +1                 ; This is in CS
02F7 EB4C90               1237         JMP     ToggleSet                   ; Display!
                          1238         
02FA                      1239     T_Jump_Helper:
02FA EB5090               1240         JMP     ToggleDone                  ; Procedure too long to jump immediately
                          1241                                             ; thus this helper label makes that
                          1242                                             ; possible!
                          1243         
02FD                      1244     T_Speed_Val:    
02FD 8D061500       R     1245         LEA     AX, Spd_Buffer              ; Time to display Speed buffer
                          1246 +1      
0301 8BF0                 1247 +2      MOV     SI, AX          ; Prepare for display at SI
0303 8CD8                 1248 +2      MOV     AX, DS          ;
0305 8EC0                 1249 +2      MOV     ES, AX          ; String is in code segment
                          1250 +1                 ; This is in DS
0307 EB3C90               1251         JMP     ToggleSet                   ; Display!
                          1252         
030A                      1253     T_Angle_Val:        
030A 8D060B00       R     1254         LEA     AX, Dir_Buffer              ; Time to display direction buffer
                          1255 +1      
030E 8BF0                 1256 +2      MOV     SI, AX          ; Prepare for display at SI
0310 8CD8                 1257 +2      MOV     AX, DS          ;
0312 8EC0                 1258 +2      MOV     ES, AX          ; String is in code segment
                          1259 +1                 ; This is in DS
0314 EB2F90               1260         JMP     ToggleSet                   ; Display!
                          1261         
0317                      1262     T_Error_Val:        
0317 A12B00         R     1263         MOV     AX, Error_Buff_PTR          ; Time to display error msg
                          1264 +1      
031A 8BF0                 1265 +2      MOV     SI, AX          ; Prepare for display at SI
031C 8CC8                 1266 +2      MOV     AX, CS          ;
031E 8EC0                 1267 +2      MOV     ES, AX          ; String is in code segment
                          1268 +1                 ; This is in CS
0320 EB2390               1269         JMP     ToggleSet                   ; Display!
                          1270         
0323                      1271     T_R_Error_Val:
0323 8D061F00       R     1272         LEA     AX, Rbt_error_Buff           ; Time to display robot msg
                          1273 +1      
0327 8BF0                 1274 +2      MOV     SI, AX          ; Prepare for display at SI
0329 8CD8                 1275 +2      MOV     AX, DS          ;
032B 8EC0                 1276 +2      MOV     ES, AX          ; String is in code segment
                          1277 +1                  ; This is in DS
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   24


LOC  OBJ                  LINE     SOURCE

032D EB1690               1278         JMP     ToggleSet                    ; Display!
                          1279         
0330                      1280     T_Label:
0330 A13000         R     1281         MOV     AX, ToggleCTR               ; Display LABEL of that action
0333 D1E8                 1282         SHR     AX, bit_size                ; All 'labels' are EVEN indexed, thus we can
                          1283                                             ; map the JMP table offset to the string offs
                                   et
                          1284                                             ; with just a simple SHR 1.
                          1285 +1      
0335 33DB                 1286 +1      XOR     BX, BX                  ; Clear counter
0337 B309                 1287 +2          MOV             BL, Display_SIZE+1          ; Let counter be CMD_LENGTH
0339 F6E3                 1288 +1          MUL             BL                      ; Rel pinter = CMD_LENGTH * typeindex
033B 05550390       R     1289 +2      ADD     AX, OFFSET( Toggle_Label_Table)  ;
                          1290 +1  ; Calc ABS address into AX
                          1291         
                          1292 +1      
033F 8BF0                 1293 +2      MOV     SI, AX          ; Prepare for display at SI
0341 8CC8                 1294 +2      MOV     AX, CS          ;
0343 8EC0                 1295 +2      MOV     ES, AX          ; String is in code segment
                          1296 +1                 ; String in CS
                          1297         ;JMP     ToggleSet
                          1298         
0345                      1299     ToggleSet:
0345 E80000         E     1300         CALL    Display                     ; Pass ES:SI to be displayed, ASCII_NULL term
                                   inated
                          1301         
0348 FF063000       R     1302         INC     ToggleCTR                   ; Increment counter for next time
                          1303         
034C                      1304     ToggleDone:; Send out EOI as usual
                          1305     
034C BA22FF               1306         MOV     DX, INTCtrlrEOI             ;All timers share same EOI
034F B80800               1307         MOV     AX, TimerEOI
0352 EE                   1308         OUT     DX, AL                      ; Send out Timer EOI
                          1309         
                          1310         
0353 61                   1311         POPA                                ; Restore all Regs
                          1312         
0354 CF                   1313         IRET
                          1314         
                          1315     ToggleHandler   ENDP
                          1316     
                          1317     ; Name:             Toggle_Label_Table
                          1318     ;
                          1319     ; Description:      String table containing fixed command lengths of chars that is
                          1320     ;                   outputted to display of Remote and shows LABELS. This is because
                          1321     ;                   the actual values take up much of the 8 chars, so it is more
                          1322     ;                   effective to first display the label and then the val afterwards.
                          1323     ;                   Must end with ASCII_NULL and be size Display_SIZE + 1.
                          1324     ;                   
                          1325     ;Limitations:           Fixed length size.
                          1326     ;Author:                        Anjian Wu
                          1327     ;
                          1328     ; Revision History:
                          1329     ;                   Edits by Anjian Wu:
                          1330     ;                               12-05-2013 -> Initial Version
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   25


LOC  OBJ                  LINE     SOURCE

                          1331     ;                   12-13-2013 -> Working and documentation
0355                      1332     Toggle_Label_Table          LABEL       BYTE
                          1333     
                          1334                               
0355 416374696F6E3A       1335             DB              'Action:?', ASCII_NULL      ;0
     3F
035D 00
035E 53706565643A20       1336             DB              'Speed: ?', ASCII_NULL      ;1
     3F
0366 00
0367 416E676C653A20       1337             DB              'Angle: ?', ASCII_NULL      ;2
     3F
036F 00
0370 4572726F72733A       1338             DB              'Errors:?', ASCII_NULL      ;3
     3F
0378 00
0379 526F626F743A20       1339             DB              'Robot: ?', ASCII_NULL      ;4
     3F
0381 00
                          1340     
                          1341     ; Name:             Toggle_JMP_Table
                          1342     ;
                          1343     ; Description:      String table contains the jmp labels, which is mapped from
                          1344     ;                   the Toggle counter. Notice that T_Label occurs every OTHER
                          1345     ;                   EVEN value. This is convenient since Label values are FIXED
                          1346     ;                   any ways.
                          1347     ;                   
                          1348     ;Limitations:           None.
                          1349     ;Author:                        Anjian Wu
                          1350     ;
                          1351     ; Revision History:
                          1352     ;                   Edits by Anjian Wu:
                          1353     ;                               12-05-2013 -> Initial Version
                          1354     ;                   12-13-2013 -> Working and documentation
0382                      1355     Toggle_JMP_Table            LABEL       WORD
                          1356                                         
0382 3003           R     1357             DW              T_Label             ;0 - Action Label
0384 EE02           R     1358             DW              T_Action_Val    ;1 - Action Val
0386 3003           R     1359             DW              T_Label             ;2 - Speed Label
0388 FD02           R     1360             DW              T_Speed_Val     ;3 - Speed Val
038A 3003           R     1361             DW              T_Label             ;4 - Angle Label
038C 0A03           R     1362             DW              T_Angle_Val         ;5 - Angle Val
038E 3003           R     1363             DW              T_Label             ;6 - Error Label
0390 1703           R     1364             DW              T_Error_Val         ;7 = Error Val
0392 3003           R     1365             DW              T_Label             ;8 - Robot Error Label
0394 2303           R     1366             DW              T_R_Error_Val   ;9 - Robot Error Val   
                          1367         
                          1368     ;Procedure:                     ParseRemoteChar
                          1369     ;
                          1370     ;Description:           Used pass char in AX to grab NEXT token val and type, and use
                                   s
                          1371     ;                   that to calc the proper pointer to the function to be called
                          1372     ;                   by the state machine. The token TYPE is used to find the abs
                          1373     ;                   action function offset and the token TYPE is always passed as
                          1374     ;                   (AL) into the action function. The action function, however, may
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   26


LOC  OBJ                  LINE     SOURCE

                          1375     ;                   or may not use the passed token val. The next FSM state is also
                          1376     ;                   saved in a shared variable FSM_state for the next time.
                          1377     ;
                          1378     ;                   If the state machine returns to ST_INITIAL then it also resets 
                          1379     ;                   the parser variables. If there is an error detected after the act
                                   ion
                          1380     ;                   function is call, then the function will also reset the parser 
                          1381     ;                   variables.
                          1382     ;                   
                          1383     ;                   This function always returns error status in AX. See 'Error Handl
                                   ing'.
                          1384     ;
                          1385     ;Operation:         * Clear Errorflag, grab next token val and key using GetTokenType
                                   Val.
                          1386     ;                   * offset = (NUM_TOKEN_TYPES * FSM_State + token type)* SIZE TRANS
                                   ITION_ENTRY
                          1387     ;                   * Call Function (Action) using offset, passing token val in AL
                          1388     ;                   * If Errorflag is true, store FSM_state and FSM_ERROR bytes into 
                                   AX for return
                          1389     ;                       * Call ParseReset
                          1390     ;                   * Else, grab nextstate using offset, store the next state into FS
                                   M_state
                          1391     ;                       * If next state is ST_INITIAL, then Call ParseReset
                          1392     ;                   * Return Errorflag in AX 
                          1393     ;
                          1394     ;Arguments:             AL   -> The next char to be parsed
                          1395     ;
                          1396     ;Return Values:         AX - > The errorflag
                          1397     ;
                          1398     ;Shared Variables:      Errorflag (WRITE/READ)
                          1399     ;                   FSM_state (READ/WRITE)
                          1400     ;
                          1401     ;Local Variables:       AL      -   token val, char
                          1402     ;                   AH      -   token type
                          1403     ;                   AX      -   error, char
                          1404     ;                   BX      -   table offset
                          1405     ;                   DH      -   save token type
                          1406     ;                   CH      -   save token val
                          1407     ;                   
                          1408     ;                   
                          1409     ;Global Variables:      None.                                   
                          1410     ;Input:                 none.
                          1411     ;Output:                none.
                          1412     ;Registers Used:        AX, BX, CH, DH
                          1413     ;Stack Depth:           3 words
                          1414     ;Known Bugs:            None.
                          1415     ;Data Structures:       None.
                          1416     ;Error Handling:        Errors come in two ways:
                          1417     ;                   FSM TYPE 1. Symbol/Char error -> NEXTSTATE already is ST_INITIAL
                          1418     ;                   FSM TYPE 2. Value error  -> NEXTSTATE may or may not be ST_INITIA
                                   L
                          1419     ;                   These errors are treated the same in that the return value AX
                          1420     ;                   will contain the FSM_State in AL and the FSM_ERROR key in AH. The
                                    FSM
                          1421     ;                   will also RESET immediately if error is seen.
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   27


LOC  OBJ                  LINE     SOURCE

                          1422     ;
                          1423     ;Algorithms:        Call Table FSM look up. Table offset = NUM_TOKEN_TYPES * FSM_Stat
                                   e + token type
                          1424     ;Limitations:           None.
                          1425     ;Author:                        Anjian Wu
                          1426     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1427     ;                                       12-04-2013: Modified from Glen's floatptd.asm
                                    - Anjian Wu 
                          1428     ;                   12-08-2013: Working - Anjian Wu
                          1429     ;                   12-10-2013: Adapted for Remote - Anjian Wu
                          1430     ;------------------------------------------------------------------------------
                          1431     
0396                      1432     ParseRemoteChar         PROC    NEAR
                          1433     
0396                      1434     ParseSerialInit:
                          1435     
0396 52                   1436         PUSH        DX       ; Save all Regs
0397 53                   1437             PUSH    BX
0398 51                   1438             PUSH    CX              
                          1439             
0399 C7062D000000   R     1440         MOV Errorflag, FALSE            ;Assume no errors
                          1441             
039F                      1442     ParseGrabTokens:
039F E85C00               1443         CALL    SerialDebugRecord   ; Always record the char in SerialDebugBuffer
                          1444             
03A2 E84600               1445             CALL    GetTokenTypeVal     ; Grab next token key and val
03A5 8AF4                 1446             MOV             DH, AH                      ; Save token type
03A7 8AE8                 1447             MOV             CH, AL                      ; Save token val
                          1448             
03A9                      1449     ParseComputeTrans:                      ;figure out what transition to do
03A9 B006                 1450             MOV             AL, NUM_TOKEN_TYPES     ;find row in the table
03AB F6262F00       R     1451             MUL             FSM_State           ;Get to current FSM state
03AF 02C6                 1452             ADD             AL, DH                  ;Calc abs transition inside that stat
                                   e
03B1 80D400               1453             ADC             AH, zero                     ;propagate low byte carry into h
                                   igh byte
                          1454     
03B4 6BD80390             1455             IMUL    BX, AX, SIZE TRANSITION_ENTRY   ;now convert to table offset
                          1456     
03B8                      1457     ParseDoActions:                             ;do the actions (don't affect regs)
                          1458     
03B8 8AC5                 1459             MOV             AL, CH                      ;Pass Token Val (not always used 
                                   by ACTION)
03BA 2EFF97FA04     R     1460             CALL    CS:RemoteFSMTable[BX].ACTION    ;do the actions
                          1461     
03BF                      1462     ParseCheckError:
03BF 833E2D0001     R     1463         CMP     Errorflag, TRUE     ; Was there an error from the FSM action?
                          1464                                     ; Errors can come in two ways
                          1465                                     ; FSM TYPE 1. Symbol/Char error -> NEXTSTATE already 
                                   is ST_INITIAL
                          1466                                     ; FSM TYPE 2. Value error  -> NEXTSTATE may or may no
                                   t be ST_INITIAL
03C4 750B                 1467         JNE     ParseNextTransition ; Nope, so grab the next one
                          1468         ;JE     ParseRecordError    ; There was an error
                          1469         
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   28


LOC  OBJ                  LINE     SOURCE

03C6                      1470     ParseRecordError:
03C6 A02F00         R     1471         MOV     AL, FSM_State       ; Store the current state before it is updated 
                          1472                                     ; since it where there that error was found
03C9 B404                 1473         MOV     AH, FSM_ERROR       ; Indicate that this was an FSM error (This
                          1474                                     ; differentiates a value of FALSE vs. error in FSM_St
                                   ate = 0)
                          1475                                     
03CB A32D00         R     1476         MOV     Errorflag, AX       ; Store that state as an error-type
03CE EB1190               1477         JMP     ParseNeedReset      ; We just got error, thus immediately exit this cmd p
                                   ath
                          1478                                     ; and go back to ST_INITIAL to wait for VALID next cm
                                   d.
                          1479                                     ; * Notice this IS redundant for FSM TYPE 1 errors si
                                   nce nxt state
                          1480                                     ;   is already ST_INITIAL, however
                          1481                                     ;   we treat all errors the same to simplify code.
                          1482         
03D1                      1483     ParseNextTransition:                    ;now go to next state
                          1484     
03D1 2E8A8FF904     R     1485             MOV             CL, CS:RemoteFSMTable[BX].NEXTSTATE
03D6 880E2F00       R     1486         MOV     FSM_state, CL   ; We need this nextstate stored for next time.
                          1487         
03DA 803E2F0000     R     1488             CMP             FSM_state, ST_INITIAL   ; Did the state machine restart?
03DF 7503                 1489             JNE             ParseDone           ; If not then just continue.
                          1490             ;JE             ParseNeedReset  ; Else we need to reset some parser variables
03E1                      1491     ParseNeedReset:
03E1 E89B00               1492             CALL    RemoteParseReset; Reset parser variables (FSM_STATE, magnitude, sign)
                          1493         ;JMP    ParseDone       ;
03E4                      1494     ParseDone:
03E4 A12D00         R     1495         MOV     AX, Errorflag       ; Restore the error (if any) back into AX for return
                          1496                                     ; AH - whether or not error happened, AL - FSM_state 
                                   (if error)
                          1497         
03E7 59                   1498             POP  CX
03E8 5B                   1499             POP      BX
03E9 5A                   1500             POP  DX                     ; Restore used regs
                          1501             
                          1502         
03EA C3                   1503         RET
                          1504         
                          1505     ParseRemoteChar ENDP
                          1506     
                          1507     ; GetTokenTypeVal
                          1508     ;
                          1509     ; Description:      This procedure returns the token class and token value for
                          1510     ;                   the passed character.  The character is truncated to
                          1511     ;                   7-bits because the table only has 127 ASCII chars inside.
                          1512     ;
                          1513     ; Operation:        Looks up the passed character in two tables, one for token
                          1514     ;                   types or classes, the other for token values.
                          1515     ;
                          1516     ; Arguments:        AL - character to look up.
                          1517     ; Return Value:     AL - token value for the character.
                          1518     ;                   AH - token type or class for the character.
                          1519     ;
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   29


LOC  OBJ                  LINE     SOURCE

                          1520     ; Local Variables:  BX - table pointer, points at lookup tables.
                          1521     ; Shared Variables: None.
                          1522     ; Global Variables: None.
                          1523     ;
                          1524     ; Input:            None.
                          1525     ; Output:           None.
                          1526     ;
                          1527     ; Error Handling:   None.
                          1528     ;
                          1529     ; Algorithms:       Table lookup.
                          1530     ; Data Structures:  Two tables, one containing token values and the other
                          1531     ;                   containing token types.
                          1532     ;
                          1533     ; Registers Used:   AX, BX.
                          1534     ; Stack Depth:      0 words.
                          1535     ;
                          1536     ; Author:           Anjian Wu
                          1537     ; Last Modified:    12-02-2013: Adapted from Glen's floatptd.asm - Anjian Wu :)
                          1538     ;                   12-08-2013: Add documentation to show understanding - Anjian Wu
                          1539     
                          1540     
03EB                      1541     GetTokenTypeVal PROC    NEAR
                          1542     
                          1543     
03EB                      1544     InitGetFPToken:                         ;setup for lookups
03EB 247F                 1545             AND     AL, TOKEN_MASK          ;strip unused bits (high bit) ONLY 127 CHARS 
                                   IN TABLE
03ED 8AE0                 1546             MOV     AH, AL                      ;and preserve value in AH
                          1547     
                          1548     ; TokenTypeTable and TokenValueTable's values are paired/mapped one to one
                          1549     
03EF                      1550     TokenTypeLookup:                        ;get the token type
03EF BB410590       R     1551         MOV     BX, OFFSET(TokenTypeTable)  ;BX points at table
03F3 2ED7                 1552             XLAT    CS:TokenTypeTable               ;have token type in AL
03F5 86E0                 1553             XCHG    AH, AL                              ;token type in AH, character in A
                                   L
                          1554     
03F7                      1555     TokenValueLookup:                                    ;get the token value
03F7 BBC10590       R     1556         MOV     BX, OFFSET(TokenValueTable)  ;BX points at table
03FB 2ED7                 1557             XLAT    CS:TokenValueTable               ;have token value in AL
                          1558     
                          1559     
03FD                      1560     EndGetFPToken:                               ;done looking up type and value
03FD C3                   1561             RET
                          1562     
                          1563     
                          1564     GetTokenTypeVal ENDP
                          1565     
                          1566     
                          1567     ;Function:                      SerialDebugRecord
                          1568     ;Description:           Resets all Parser variables to initial state and all display 
                                   buffer ptrs  
                          1569     ;                   Note that these are the ptrs for data segment buffers only since 
                                   they are
                          1570     ;                   the ones that get each char ele parsed and written.
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   30


LOC  OBJ                  LINE     SOURCE

                          1571     ;           
                          1572     ;Operation:         * Set FSM_state to initial, Dir_PTR, Spd_PTR, and Rbt_error_Ptr r
                                   eset.
                          1573     ;Arguments:             None.
                          1574     ;Return Values:         none.
                          1575     ;Shared Variables:      none.
                          1576     ;Local Variables:       None.
                          1577     ;Global Variables:      None.                   
                          1578     ;Input:                 None.
                          1579     ;Output:                None.
                          1580     ;Registers Used:        none.
                          1581     ;Stack Depth:           none.
                          1582     ;Known Bugs:            None.
                          1583     ;Data Structures:       None.
                          1584     ;Error Handling:        None
                          1585     ;Algorithms:            None.
                          1586     ;Limitations:           None.
                          1587     ;Author:                        Anjian Wu
                          1588     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1589     ;                                       12-10-2013: Created - Anjian Wu
                          1590     ;                   12-13-2013: Working - Anjian Wu
                          1591     ;                   12-14-2013: Documentation - Anjian Wu
                          1592     ;------------------------------------------------------------------------------
03FE                      1593     SerialDebugRecord  PROC    NEAR
03FE 50                   1594         PUSH    AX
03FF 53                   1595         PUSH    BX                      ; Save used reg
                          1596     
0400 803E0A0001     R     1597         CMP     SerialDebugFlag, TRUE   ;
0405 754B                 1598         JNE     SerialDebugReset        ;
                          1599         ;JE     SerialDebugRecordACTIVE ;
                          1600         
0407                      1601     SerialDebugRecordACTIVE:
0407 3C0D                 1602             CMP             AL, CAR_RETURN                  ;
0409 7409                 1603             JE              SerialDebugCReturn      ;
040B 803E090008     R     1604         CMP     Debug_PTR, Display_SIZE ; Is the pointer out of Display_Size?       ;
0410 7C22                 1605         JL      SerialDebugRecordAddChar;
0412 7D1A                 1606             JGE             SerialDebugRecordWrap
                          1607         ;JGe     SerialDebugRecordWrap
0414                      1608     SerialDebugCReturn:
0414 32FF                 1609             XOR             BH, BH                                   ;
0416 8A1E0900       R     1610             MOV     BL, Debug_PTR            ; Wrap the char to starting pos
                          1611             
041A C60609000090   R     1612         MOV     Debug_PTR, 0                      ; Clear Counter
                          1613             
0420                      1614     SerialDebugRecordClear:
                          1615     
0420 83FB08               1616         CMP     BX, Display_SIZE             ; FROM BX = 0 to Display_SIZE...
0423 7F1D                 1617         JG      SerialUpdateDebugDisplay   ; If each done, then leave loop
                          1618         
0425 C68700000090   R     1619         MOV     Serial_D_Buff[BX], ASCII_NULL ; Clear Serial Debug Buffer
                          1620     
042B 43                   1621         INC     BX                          ; Increment buffer/counter index
042C EBF2                 1622         JMP     SerialDebugRecordClear     ; Loop until all entries are cleared
                          1623     
042E                      1624     SerialDebugRecordWrap:
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   31


LOC  OBJ                  LINE     SOURCE

                          1625         
042E C60609000090   R     1626         MOV    Debug_PTR, 0             ; Wrap the char to starting pos
                          1627         
0434                      1628     SerialDebugRecordAddChar:
                          1629         
0434 32FF                 1630         XOR     BH, BH                  ; 
0436 8A1E0900       R     1631         MOV     BL, Debug_PTR           ; Convert Rbt_error_Ptr BYTE into WORD
                          1632      
043A 88870000       R     1633         MOV     Serial_D_Buff[BX], AL   ; Insert the char arg
                          1634         
043E FE060900       R     1635         INC     Debug_PTR               ; Update pointer 
                          1636         
0442                      1637     SerialUpdateDebugDisplay:
                          1638         
0442 8D060000       R     1639         LEA     AX, Serial_D_Buff       ; Time to update serial debug mode string
                          1640 +1      
0446 8BF0                 1641 +2      MOV     SI, AX          ; Prepare for display at SI
0448 8CD8                 1642 +2      MOV     AX, DS          ;
044A 8EC0                 1643 +2      MOV     ES, AX          ; String is in code segment
                          1644 +1             ; This is in DS
044C E80000         E     1645         CALL    Display                 ; 
                          1646             
044F EB0790               1647         JMP     SerialDebugRecordDone   ;    
                          1648         
0452                      1649     SerialDebugReset:
0452 C60609000090   R     1650         MOV     Debug_PTR, 0            ;
                          1651         ;JMP    SerialDebugRecordDone   ; 
                          1652         
0458                      1653     SerialDebugRecordDone:
                          1654     
0458 5B                   1655         POP     BX                      ; Restore used reg
0459 58                   1656         POP     AX
045A C3                   1657         RET                             ;
                          1658             
                          1659     SerialDebugRecord  ENDP 
                          1660     
                          1661     ;Function:                      SerialDebug
                          1662     ;Description:           Resets all Parser variables to initial state and all display 
                                   buffer ptrs  
                          1663     ;                   Note that these are the ptrs for data segment buffers only since 
                                   they are
                          1664     ;                   the ones that get each char ele parsed and written.
                          1665     ;           
                          1666     ;Operation:         * Set FSM_state to initial, Dir_PTR, Spd_PTR, and Rbt_error_Ptr r
                                   eset.
                          1667     ;Arguments:             None.
                          1668     ;Return Values:         none.
                          1669     ;Shared Variables:      none.
                          1670     ;Local Variables:       None.
                          1671     ;Global Variables:      None.                   
                          1672     ;Input:                 None.
                          1673     ;Output:                None.
                          1674     ;Registers Used:        none.
                          1675     ;Stack Depth:           none.
                          1676     ;Known Bugs:            None.
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   32


LOC  OBJ                  LINE     SOURCE

                          1677     ;Data Structures:       None.
                          1678     ;Error Handling:        None
                          1679     ;Algorithms:            None.
                          1680     ;Limitations:           None.
                          1681     ;Author:                        Anjian Wu
                          1682     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1683     ;                                       12-10-2013: Created - Anjian Wu
                          1684     ;                   12-13-2013: Working - Anjian Wu
                          1685     ;                   12-14-2013: Documentation - Anjian Wu
                          1686     ;------------------------------------------------------------------------------
045B                      1687     SerialDebug  PROC    NEAR
                          1688     
                          1689         
045B 803E0A0001     R     1690         CMP     SerialDebugFlag, TRUE   ; Is the flag already true?
0460 7416                 1691         JE      SerialDebugOFF          ; If so, switch it to false
                          1692         ;JNE    SerialDebugON           ;
0462                      1693     SerialDebugON:   
0462 C6060A000190   R     1694         MOV     SerialDebugFlag, TRUE   ; Else it is NOT true (ToggleHandler will
                          1695                                         ; STOP immediately)
                          1696                                         
0468 8D060000       R     1697         LEA     AX, Serial_D_Buff       ; Also immediately show what is inside
                          1698                                         ; Serial Debug Buff
                          1699 +1      
046C 8BF0                 1700 +2      MOV     SI, AX          ; Prepare for display at SI
046E 8CD8                 1701 +2      MOV     AX, DS          ;
0470 8EC0                 1702 +2      MOV     ES, AX          ; String is in code segment
                          1703 +1             ; This is in DS
0472 E80000         E     1704         CALL    Display                 ; UI enters Debug Mode
                          1705         
0475 EB0790               1706         JMP     SerialDebugDone         ; In which we switch TO true
                          1707         
0478                      1708     SerialDebugOFF:
0478 C6060A000090   R     1709         MOV     SerialDebugFlag, FALSE  ; Turn serial debug off
                          1710         ;JMP    SerialDebugDone         ;
047E                      1711     SerialDebugDone:
                          1712     
047E C3                   1713         RET                             ;
                          1714             
                          1715     SerialDebug  ENDP 
                          1716     
                          1717     
                          1718     
                          1719     
                          1720     
                          1721     ;Function:                      RemoteParseReset
                          1722     ;Description:           Resets all Parser variables to initial state and all display 
                                   buffer ptrs  
                          1723     ;                   Note that these are the ptrs for data segment buffers only since 
                                   they are
                          1724     ;                   the ones that get each char ele parsed and written.
                          1725     ;           
                          1726     ;Operation:         * Set FSM_state to initial, Dir_PTR, Spd_PTR, and Rbt_error_Ptr r
                                   eset.
                          1727     ;Arguments:             None.
                          1728     ;Return Values:         none.
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   33


LOC  OBJ                  LINE     SOURCE

                          1729     ;Shared Variables:      none.
                          1730     ;Local Variables:       None.
                          1731     ;Global Variables:      None.                   
                          1732     ;Input:                 None.
                          1733     ;Output:                None.
                          1734     ;Registers Used:        none.
                          1735     ;Stack Depth:           none.
                          1736     ;Known Bugs:            None.
                          1737     ;Data Structures:       None.
                          1738     ;Error Handling:        None
                          1739     ;Algorithms:            None.
                          1740     ;Limitations:           None.
                          1741     ;Author:                        Anjian Wu
                          1742     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1743     ;                                       12-10-2013: Created - Anjian Wu
                          1744     ;                   12-13-2013: Working - Anjian Wu
                          1745     ;                   12-14-2013: Documentation - Anjian Wu
                          1746     ;------------------------------------------------------------------------------
047F                      1747     RemoteParseReset  PROC    NEAR
                          1748                 
047F C60614000090   R     1749         MOV     Dir_PTR, zero               ; Reset Direction Buffer
0485 C6061E000090   R     1750         MOV     Spd_PTR, zero               ; Reset Speed Buffer
048B C60628000090   R     1751         MOV     Rbt_error_Ptr, zero         ; Reset Robot Status Buffer
0491 C6062F000090   R     1752         MOV     FSM_state, ST_INITIAL       ; Reset FSM
0497 C3                   1753             RET
                          1754             
                          1755     RemoteParseReset  ENDP                   
                          1756     
                          1757     ;Procedure:                     SetError
                          1758     ;
                          1759     ;Description:           An error has occurred, so set the error flag true.
                          1760     ;
                          1761     ;Operation:         * Errorflag = TRUE
                          1762     ;        
                          1763     ;Arguments:             None.
                          1764     ;Return Values:         none.
                          1765     ;Shared Variables:      Errorflag(write)
                          1766     ;Local Variables:       None.
                          1767     ;Global Variables:      None.                   
                          1768     ;Input:                 None.
                          1769     ;Output:                None.
                          1770     ;Registers Used:        AH, AL
                          1771     ;Stack Depth:           none.
                          1772     ;Known Bugs:            None.
                          1773     ;Data Structures:       None.
                          1774     ;Error Handling:        None
                          1775     ;Algorithms:            None.
                          1776     ;Limitations:           None.
                          1777     ;Author:                        Anjian Wu
                          1778     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1779     ;                   12-08-2013: Documentation - Anjian Wu
                          1780     ;------------------------------------------------------------------------------
0498                      1781     SetError        PROC    NEAR
                          1782     
0498 C7062D000100   R     1783         MOV     Errorflag, TRUE     ; An error has occurred
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   34


LOC  OBJ                  LINE     SOURCE

                          1784     
049E C3                   1785         RET
                          1786         
                          1787     SetError ENDP
                          1788     
                          1789     ;Procedure:                     AddRobotErrorChar
                          1790     ;
                          1791     ;Description:           Inserts the next parsed CHAR into the Robot status buffer
                          1792     ;                   which is the direct buffer passed to Display in TogleHandler.
                          1793     ;                   Function uses Rbt_error_Ptr to index which ele in buffer.
                          1794     ;
                          1795     ;Operation:         * Is the pointer > Dispaly_Size?
                          1796     ;                       * IF so, then there is an error, so set it and exit
                          1797     ;                   * Else put the pointer into BX and move Rbt_error_Buff[BX] 
                          1798     ;                     into AL.
                          1799     ;                   * Increment the pointer
                          1800     ;                
                          1801     ;Arguments:         AL - The char to be inserted
                          1802     ;Return Values:         None.
                          1803     ;Shared Variables:      Rbt_error_Ptr(WRITE/READ)
                          1804     ;Local Variables:       BX  -> Holds element index
                          1805     ;                   
                          1806     ;Global Variables:      None.                   
                          1807     ;Input:                 None.
                          1808     ;Output:                None.
                          1809     ;Registers Used:        BX, AL
                          1810     ;Stack Depth:           1 Word
                          1811     ;Known Bugs:            None.
                          1812     ;Data Structures:       None.
                          1813     ;Error Handling:        If the pointer exceeds the display size, then DO NOT insert
                          1814     ;                   the next char, instead call error. That way the FSM will auto
                          1815     ;                   reset.
                          1816     ;Algorithms:            None.
                          1817     ;Limitations:           Cannot display a robot status string longer than display.
                          1818     ;                   Instead it is truncated.
                          1819     ;Author:                        Anjian Wu
                          1820     ;History:                       12-12-2013: created - Anjian Wu
                          1821     ;                   12-13-2013: Documentation - Anjian Wu
                          1822     ;------------------------------------------------------------------------------
049F                      1823     AddRobotErrorChar    PROC    NEAR
                          1824     
049F 53                   1825         PUSH    BX                             ; Save used reg
                          1826     
04A0 803E280008     R     1827         CMP     Rbt_error_Ptr, Display_SIZE    ; Is the pointer out of Display_Size?
                          1828         
04A5 7F11                 1829         JG      AddRobotErrorCharNoNo          ; Yes, so set error to reset state machine
                                   .
                          1830         
04A7 32FF                 1831         XOR     BH, BH                  ; 
04A9 8A1E2800       R     1832         MOV     BL, Rbt_error_Ptr       ; Convert Rbt_error_Ptr BYTE into WORD
                          1833      
04AD 88871F00       R     1834         MOV     Rbt_error_Buff[BX], AL  ; Insert the char arg
                          1835         
04B1 FE062800       R     1836         INC     Rbt_error_Ptr           ; Update pointer 
                          1837         
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   35


LOC  OBJ                  LINE     SOURCE

04B5 EB0490               1838         JMP     AddRobotErrorCharDone   ; Done
04B8                      1839     AddRobotErrorCharNoNo:
                          1840         
04B8 E8DDFF               1841         CALL    SetError                ; Set the error to reset FSM
                          1842        
04BB                      1843     AddRobotErrorCharDone:
04BB 5B                   1844         POP     BX                      ; Restore used reg
                          1845     
04BC C3                   1846         RET                             ;
                          1847     
                          1848     AddRobotErrorChar    ENDP
                          1849     
                          1850     ;Procedure:                     AddDirChar
                          1851     ;
                          1852     ;Description:           Inserts the next parsed CHAR into the Direction status buffer
                          1853     ;                   which is the direct buffer passed to Display in TogleHandler.
                          1854     ;                   Function uses Dir_PTR to index which ele in buffer.
                          1855     ;
                          1856     ;Operation:         * Is the pointer > Dispaly_Size?
                          1857     ;                       * IF so, then there is an error, so set it and exit
                          1858     ;                   * Else put the pointer into BX and move Dir_Buffer[BX] 
                          1859     ;                     into AL.
                          1860     ;                   * Increment the pointer
                          1861     ;                
                          1862     ;Arguments:         AL - The char to be inserted
                          1863     ;Return Values:         None.
                          1864     ;Shared Variables:      Dir_PTR(WRITE/READ)
                          1865     ;Local Variables:       BX  -> Holds element index
                          1866     ;                   
                          1867     ;Global Variables:      None.                   
                          1868     ;Input:                 None.
                          1869     ;Output:                None.
                          1870     ;Registers Used:        BX, AL
                          1871     ;Stack Depth:           1 Word
                          1872     ;Known Bugs:            None.
                          1873     ;Data Structures:       None.
                          1874     ;Error Handling:        If the pointer exceeds the display size, then DO NOT insert
                          1875     ;                   the next char, instead call error. That way the FSM will auto
                          1876     ;                   reset.
                          1877     ;Algorithms:            None.
                          1878     ;Limitations:           Cannot display a robot status string longer than display.
                          1879     ;                   Instead it is truncated.
                          1880     ;Author:                        Anjian Wu
                          1881     ;History:                       12-11-2013: created/ worked - Anjian Wu
                          1882     ;                   12-13-2013: Documentation - Anjian Wu
                          1883     ;------------------------------------------------------------------------------
04BD                      1884     AddDirChar    PROC    NEAR
                          1885     
04BD 53                   1886         PUSH    BX                      ; Save used reg                      
                          1887         
04BE 803E140008     R     1888         CMP     Dir_Ptr, Display_SIZE   ; Save used reg
                          1889         
04C3 7F11                 1890         JG      AddDirCharNoNo          ;Is the pointer out of Display_Size?
                          1891         
04C5 32FF                 1892         XOR     BH, BH                  ;Yes, so set error to reset state machine.
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   36


LOC  OBJ                  LINE     SOURCE

04C7 8A1E1400       R     1893         MOV     BL, Dir_PTR             ;Convert pointer BYTE into WORD
                          1894      
04CB 88870B00       R     1895         MOV     Dir_Buffer[BX], AL      ;Insert the char arg
                          1896         
04CF FE061400       R     1897         INC     Dir_PTR                 ;Update pointer 
                          1898         
04D3 EB0490               1899         JMP     AddDirCharDone          ; Done
                          1900         
04D6                      1901     AddDirCharNoNo:
                          1902         
04D6 E8BFFF               1903         CALL    SetError                ; Set the error to reset FSM   
                          1904         
04D9                      1905     AddDirCharDone:
04D9 5B                   1906         POP     BX                      ; Restore used reg
                          1907     
04DA C3                   1908         RET                             ;
                          1909     
                          1910     AddDirChar    ENDP
                          1911     
                          1912     ;Procedure:                     AddSpeedChar
                          1913     ;
                          1914     ;Description:           Inserts the next parsed CHAR into the Direction status buffer
                          1915     ;                   which is the direct buffer passed to Display in TogleHandler.
                          1916     ;                   Function uses Spd_Ptr to index which ele in buffer.
                          1917     ;
                          1918     ;Operation:         * Is the pointer > Dispaly_Size?
                          1919     ;                       * IF so, then there is an error, so set it and exit
                          1920     ;                   * Else put the pointer into BX and move Spd_Buffer[BX] 
                          1921     ;                     into AL.
                          1922     ;                   * Increment the pointer
                          1923     ;                
                          1924     ;Arguments:         AL - The char to be inserted
                          1925     ;Return Values:         None.
                          1926     ;Shared Variables:      Spd_Ptr(WRITE/READ)
                          1927     ;Local Variables:       BX  -> Holds element index
                          1928     ;                   
                          1929     ;Global Variables:      None.                   
                          1930     ;Input:                 None.
                          1931     ;Output:                None.
                          1932     ;Registers Used:        BX, AL
                          1933     ;Stack Depth:           1 Word
                          1934     ;Known Bugs:            None.
                          1935     ;Data Structures:       None.
                          1936     ;Error Handling:        If the pointer exceeds the display size, then DO NOT insert
                          1937     ;                   the next char, instead call error. That way the FSM will auto
                          1938     ;                   reset.
                          1939     ;Algorithms:            None.
                          1940     ;Limitations:           Cannot display a robot status string longer than display.
                          1941     ;                   Instead it is truncated.
                          1942     ;Author:                        Anjian Wu
                          1943     ;History:                       12-11-2013: created/ worked - Anjian Wu
                          1944     ;                   12-13-2013: Documentation - Anjian Wu
                          1945     ;------------------------------------------------------------------------------
04DB                      1946     AddSpeedChar    PROC    NEAR
                          1947     
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   37


LOC  OBJ                  LINE     SOURCE

04DB 53                   1948         PUSH    BX                         ; Save used reg
                          1949     
04DC 803E1E0008     R     1950         CMP     Spd_Ptr, Display_SIZE     ; Is the pointer out of Display_Size?
                          1951         
04E1 7F11                 1952         JG      AddSpeedCharNoNo          ; Yes, so set error to reset state machine.
                          1953         
04E3 32FF                 1954         XOR     BH, BH                  ; 
04E5 8A1E1E00       R     1955         MOV     BL, Spd_Ptr             ; Convert Rbt_error_Ptr BYTE into WORD
                          1956      
04E9 88871500       R     1957         MOV     Spd_Buffer[BX], AL      ; Insert the char arg
                          1958         
04ED FE061E00       R     1959         INC     Spd_Ptr                 ; Update pointer 
                          1960     
04F1 EB0490               1961         JMP     AddSpeedCharDone        ; Done
                          1962         
04F4                      1963     AddSpeedCharNoNo:
                          1964         
04F4 E8A1FF               1965         CALL    SetError                ; Set the error to reset FSM 
                          1966      
04F7                      1967     AddSpeedCharDone:
                          1968     
04F7 5B                   1969         POP     BX                       ; Restore used reg
                          1970         
04F8 C3                   1971         RET                    
                          1972     
                          1973     AddSpeedChar    ENDP
                          1974     
                          1975     ; RemoteFSMTable
                          1976     ;
                          1977     ; Description:      This is the state transition table for the remote side.
                          1978     ;                   Each entry consists of the next state and actions for that
                          1979     ;                   transition.  The rows are associated with the current
                          1980     ;                   state and the columns with the input type.
                          1981     ;
                          1982     ; Author:           Anjian Wu
                          1983     ; Last Modified:    12-11-2013: Adapted for Remote - Anjian Wu\
                          1984     ;                   12-13-2013: Documentation - Anjian Wu
                          1985     
                          1986     
----                      1987     TRANSITION_ENTRY        STRUC           ;structure used to define table
0000                      1988         NEXTSTATE   DB      ?               ;the next state for the transition
0001                      1989         ACTION      DW      ?               ;action for the transition
----                      1990     TRANSITION_ENTRY      ENDS
                          1991     
                          1992     
                          1993     ;define a macro to make table a little more readable
                          1994     ;macro just does an offset of the action routine entries to build the STRUC
                          1995     
                          1996     
                          1997     
04F9                      1998     RemoteFSMTable  LABEL   TRANSITION_ENTRY
                          1999     
                          2000             ;Current State = ST_INITIAL: Waiting for a Serial Char...
                          2001                                                 ;Input Token Type
                          2002 +1          
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   38


LOC  OBJ                  LINE     SOURCE

04F9 01             E     2003 +2      TRANSITION_ENTRY< ST_SPEED, OFFSET( no_op) >
04FA 0000
                          2004 +1              ;TOKEN_S - Set Speed
                          2005 +1          
04FC 02             E     2006 +2      TRANSITION_ENTRY< ST_DIR, OFFSET( no_op) >
04FD 0000
                          2007 +1                  ;TOKEN_D - Set Dir
                          2008 +1          
04FF 03             E     2009 +2      TRANSITION_ENTRY< ST_Robot, OFFSET( no_op) >
0500 0000
                          2010 +1              ;TOKEN_R - Robot Error
                          2011 +1          
0502 00             R     2012 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0503 9804
                          2013 +1          ;TOKEN_NUM - A digit or ASCII_NULL
                          2014 +1          
0505 00             R     2015 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0506 9804
                          2016 +1          ;TOKEN_END - C Return
                          2017 +1          
0508 00             R     2018 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0509 9804
                          2019 +1          ;TOKEN_OTHER    
                          2020             
                          2021             ;Current State = ST_SPEED: Garbing chars into Speed Buffer
                          2022                                                 ;Input Token Type
                          2023 +1          
050B 00             R     2024 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
050C 9804
                          2025 +1          ;TOKEN_S - Set Speed
                          2026 +1          
050E 01             R     2027 +2      TRANSITION_ENTRY< ST_SPEED, OFFSET( AddSpeedChar) >
050F DB04
                          2028 +1          ;TOKEN_D - Set Dir
                          2029 +1          
0511 00             R     2030 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0512 9804
                          2031 +1          ;TOKEN_R - Robot Error
                          2032 +1          
0514 01             R     2033 +2      TRANSITION_ENTRY< ST_SPEED, OFFSET( AddSpeedChar) >
0515 DB04
                          2034 +1   ;TOKEN_NUM - A digit
                          2035 +1          
0517 00             E     2036 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( no_op) >
0518 0000
                          2037 +1              ;TOKEN_END - C Return
                          2038 +1          
051A 01             R     2039 +2      TRANSITION_ENTRY< ST_SPEED, OFFSET( AddSpeedChar) >
051B DB04
                          2040 +1          ;TOKEN_OTHER    
                          2041             
                          2042             ;Current State = ST_DIR: Garbing chars into Direction Buffer
                          2043                                                 ;Input Token Type
                          2044 +1          
051D 00             R     2045 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   39


LOC  OBJ                  LINE     SOURCE

051E 9804
                          2046 +1          ;TOKEN_S - Set Speed
                          2047 +1          
0520 00             R     2048 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0521 9804
                          2049 +1          ;TOKEN_D - Set Dir
                          2050 +1          
0523 00             R     2051 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0524 9804
                          2052 +1          ;TOKEN_R - Robot Error
                          2053 +1          
0526 02             R     2054 +2      TRANSITION_ENTRY< ST_DIR, OFFSET( AddDirChar) >
0527 BD04
                          2055 +1              ;TOKEN_NUM - A digit or ASCII_NULL
                          2056 +1          
0529 00             E     2057 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( no_op) >
052A 0000
                          2058 +1                  ;TOKEN_END - C Return
                          2059 +1          
052C 00             R     2060 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
052D 9804
                          2061 +1          ;TOKEN_OTHER    
                          2062     
                          2063             ;Current State = ST_Robot: Garbing chars into Robot Status Buffer
                          2064         ;This status just displays anything the robot send back, as long
                          2065         ;as it starts with TOKEN_R's char first.
                          2066                                                     ;Input Token Type
                          2067 +1          
052F 03             R     2068 +2      TRANSITION_ENTRY< ST_Robot, OFFSET( AddRobotErrorChar) >
0530 9F04
                          2069 +1          ;TOKEN_S - Set Speed
                          2070 +1          
0532 03             R     2071 +2      TRANSITION_ENTRY< ST_Robot, OFFSET( AddRobotErrorChar) >
0533 9F04
                          2072 +1          ;TOKEN_D - Set Dir
                          2073 +1          
0535 03             R     2074 +2      TRANSITION_ENTRY< ST_Robot, OFFSET( AddRobotErrorChar) >
0536 9F04
                          2075 +1          ;TOKEN_R - Robot Error
                          2076 +1          
0538 03             R     2077 +2      TRANSITION_ENTRY< ST_Robot, OFFSET( AddRobotErrorChar) >
0539 9F04
                          2078 +1      ;TOKEN_NUM - A digit or ASCII_NULL
                          2079 +1          
053B 00             E     2080 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( no_op) >
053C 0000
                          2081 +1                          ;TOKEN_END - C Return
                          2082 +1          
053E 03             R     2083 +2      TRANSITION_ENTRY< ST_Robot, OFFSET( AddRobotErrorChar) >
053F 9F04
                          2084 +1          ;TOKEN_OTHER    
                          2085             
                          2086     ; Token Tables
                          2087     ;
                          2088     ; Description:      This creates the tables of token types and token values.
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   40


LOC  OBJ                  LINE     SOURCE

                          2089     ;                   Each entry corresponds to the token type and the token
                          2090     ;                   value for a character.  Macros are used to actually build
                          2091     ;                   two separate tables - TokenTypeTable for token types and
                          2092     ;                   TokenValueTable for token values.
                          2093     ;
                          2094     ; Author:           Anjian Wu
                          2095     ; Last Modified:    12-05-2013: Just made Laser tokens return True/False - Anjian Wu
                          2096     ;                   12-11-2013: Adapted for Remote - Anjian Wu
                          2097     ;                   12-13-2013: Documentation - Anjian Wu
                          2098     
                          2099     
                          2100     ; token type table - uses first byte of macro table entry
                          2101     
                          2102     
0541                      2103     TokenTypeTable  LABEL   BYTE
                          2104 +1          
                          2105 +2          
0541 03                   2106 +3          DB      TOKEN_NUM
                          2107 +2          ;<null>  (end of string)
                          2108 +2          
0542 05                   2109 +3          DB      TOKEN_OTHER
                          2110 +2                  ;SOH
                          2111 +2          
0543 05                   2112 +3          DB      TOKEN_OTHER
                          2113 +2                  ;STX
                          2114 +2          
0544 05                   2115 +3          DB      TOKEN_OTHER
                          2116 +2                  ;ETX
                          2117 +2          
0545 05                   2118 +3          DB      TOKEN_OTHER
                          2119 +2                  ;EOT
                          2120 +2          
0546 05                   2121 +3          DB      TOKEN_OTHER
                          2122 +2                  ;ENQ
                          2123 +2          
0547 05                   2124 +3          DB      TOKEN_OTHER
                          2125 +2                  ;ACK
                          2126 +2          
0548 05                   2127 +3          DB      TOKEN_OTHER
                          2128 +2                  ;BEL
                          2129 +2          
0549 05                   2130 +3          DB      TOKEN_OTHER
                          2131 +2                  ;backspace
                          2132 +2          
054A 05                   2133 +3          DB      TOKEN_OTHER
                          2134 +2       ;TAB
                          2135 +2          
054B 05                   2136 +3          DB      TOKEN_OTHER
                          2137 +2          ;new line
                          2138 +2          
054C 05                   2139 +3          DB      TOKEN_OTHER
                          2140 +2          ;vertical tab
                          2141 +2          
054D 05                   2142 +3          DB      TOKEN_OTHER
                          2143 +2          ;form feed
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   41


LOC  OBJ                  LINE     SOURCE

                          2144 +2          
054E 04                   2145 +3          DB      TOKEN_END
                          2146 +2              ;carriage return
                          2147 +2          
054F 05                   2148 +3          DB      TOKEN_OTHER
                          2149 +2          ;SO
                          2150 +2          
0550 05                   2151 +3          DB      TOKEN_OTHER
                          2152 +2          ;SI
                          2153 +2          
0551 05                   2154 +3          DB      TOKEN_OTHER
                          2155 +2          ;DLE
                          2156 +2          
0552 05                   2157 +3          DB      TOKEN_OTHER
                          2158 +2          ;DC1
                          2159 +2          
0553 05                   2160 +3          DB      TOKEN_OTHER
                          2161 +2          ;DC2
                          2162 +2          
0554 05                   2163 +3          DB      TOKEN_OTHER
                          2164 +2          ;DC3
                          2165 +2          
0555 05                   2166 +3          DB      TOKEN_OTHER
                          2167 +2          ;DC4
                          2168 +2          
0556 05                   2169 +3          DB      TOKEN_OTHER
                          2170 +2          ;NAK
                          2171 +2          
0557 05                   2172 +3          DB      TOKEN_OTHER
                          2173 +2          ;SYN
                          2174 +2          
0558 05                   2175 +3          DB      TOKEN_OTHER
                          2176 +2          ;ETB
                          2177 +2          
0559 05                   2178 +3          DB      TOKEN_OTHER
                          2179 +2          ;CAN
                          2180 +2          
055A 05                   2181 +3          DB      TOKEN_OTHER
                          2182 +2          ;EM
                          2183 +2          
055B 05                   2184 +3          DB      TOKEN_OTHER
                          2185 +2          ;SUB
                          2186 +2          
055C 05                   2187 +3          DB      TOKEN_OTHER
                          2188 +2          ;escape
                          2189 +2          
055D 05                   2190 +3          DB      TOKEN_OTHER
                          2191 +2          ;FS
                          2192 +2          
055E 05                   2193 +3          DB      TOKEN_OTHER
                          2194 +2          ;GS
                          2195 +2          
055F 05                   2196 +3          DB      TOKEN_OTHER
                          2197 +2          ;AS
                          2198 +2          
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   42


LOC  OBJ                  LINE     SOURCE

0560 05                   2199 +3          DB      TOKEN_OTHER
                          2200 +2          ;US
                          2201 +2          
0561 05                   2202 +3          DB      TOKEN_OTHER
                          2203 +2          ;space
                          2204 +2          
0562 05                   2205 +3          DB      TOKEN_OTHER
                          2206 +2          ;!
                          2207 +2          
0563 05                   2208 +3          DB      TOKEN_OTHER
                          2209 +2          ;"
                          2210 +2          
0564 05                   2211 +3          DB      TOKEN_OTHER
                          2212 +2          ;#
                          2213 +2          
0565 05                   2214 +3          DB      TOKEN_OTHER
                          2215 +2          ;$
                          2216 +2          
0566 05                   2217 +3          DB      TOKEN_OTHER
                          2218 +2          ;percent
                          2219 +2          
0567 05                   2220 +3          DB      TOKEN_OTHER
                          2221 +2          ;&
                          2222 +2          
0568 05                   2223 +3          DB      TOKEN_OTHER
                          2224 +2          ;'
                          2225 +2          
0569 05                   2226 +3          DB      TOKEN_OTHER
                          2227 +2          ;open paren
                          2228 +2          
056A 05                   2229 +3          DB      TOKEN_OTHER
                          2230 +2          ;close paren
                          2231 +2          
056B 05                   2232 +3          DB      TOKEN_OTHER
                          2233 +2          ;*
                          2234 +2          
056C 05                   2235 +3          DB      TOKEN_OTHER
                          2236 +2                  ;+  (positive sign)
                          2237 +2          
056D 05                   2238 +3          DB      TOKEN_OTHER
                          2239 +2          ;,
                          2240 +2          
056E 05                   2241 +3          DB      TOKEN_OTHER
                          2242 +2                  ;-  (negative sign)
                          2243 +2          
056F 05                   2244 +3          DB      TOKEN_OTHER
                          2245 +2                  ;.  (decimal point)
                          2246 +2          
0570 05                   2247 +3          DB      TOKEN_OTHER
                          2248 +2          ;/
                          2249 +2          
0571 03                   2250 +3          DB      TOKEN_NUM
                          2251 +2              ;0  (digit)
                          2252 +2          
0572 03                   2253 +3          DB      TOKEN_NUM
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   43


LOC  OBJ                  LINE     SOURCE

                          2254 +2                  ;1  (digit)
                          2255 +2          
0573 03                   2256 +3          DB      TOKEN_NUM
                          2257 +2                  ;2  (digit)
                          2258 +2          
0574 03                   2259 +3          DB      TOKEN_NUM
                          2260 +2                  ;3  (digit)
                          2261 +2          
0575 03                   2262 +3          DB      TOKEN_NUM
                          2263 +2                  ;4  (digit)
                          2264 +2          
0576 03                   2265 +3          DB      TOKEN_NUM
                          2266 +2                  ;5  (digit)
                          2267 +2          
0577 03                   2268 +3          DB      TOKEN_NUM
                          2269 +2                  ;6  (digit)
                          2270 +2          
0578 03                   2271 +3          DB      TOKEN_NUM
                          2272 +2                  ;7  (digit)
                          2273 +2          
0579 03                   2274 +3          DB      TOKEN_NUM
                          2275 +2                  ;8  (digit)
                          2276 +2          
057A 03                   2277 +3          DB      TOKEN_NUM
                          2278 +2                  ;9  (digit)
                          2279 +2          
057B 05                   2280 +3          DB      TOKEN_OTHER
                          2281 +2          ;:
                          2282 +2          
057C 05                   2283 +3          DB      TOKEN_OTHER
                          2284 +2          ;;
                          2285 +2          
057D 05                   2286 +3          DB      TOKEN_OTHER
                          2287 +2          ;<
                          2288 +2          
057E 05                   2289 +3          DB      TOKEN_OTHER
                          2290 +2          ;=
                          2291 +2          
057F 05                   2292 +3          DB      TOKEN_OTHER
                          2293 +2          ;>
                          2294 +2          
0580 05                   2295 +3          DB      TOKEN_OTHER
                          2296 +2          ;?
                          2297 +2          
0581 05                   2298 +3          DB      TOKEN_OTHER
                          2299 +2          ;@
                          2300 +2          
0582 05                   2301 +3          DB      TOKEN_OTHER
                          2302 +2          ;A
                          2303 +2          
0583 05                   2304 +3          DB      TOKEN_OTHER
                          2305 +2          ;B
                          2306 +2          
0584 05                   2307 +3          DB      TOKEN_OTHER
                          2308 +2          ;C
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   44


LOC  OBJ                  LINE     SOURCE

                          2309 +2          
0585 01                   2310 +3          DB      TOKEN_D     
                          2311 +2          ;D
                          2312 +2          
0586 05                   2313 +3          DB      TOKEN_OTHER     
                          2314 +2    ;E 
                          2315 +2          
0587 05                   2316 +3          DB      TOKEN_OTHER     
                          2317 +2          ;F
                          2318 +2          
0588 05                   2319 +3          DB      TOKEN_OTHER
                          2320 +2          ;G
                          2321 +2          
0589 05                   2322 +3          DB      TOKEN_OTHER
                          2323 +2          ;H
                          2324 +2          
058A 05                   2325 +3          DB      TOKEN_OTHER
                          2326 +2          ;I
                          2327 +2          
058B 05                   2328 +3          DB      TOKEN_OTHER
                          2329 +2          ;J
                          2330 +2          
058C 05                   2331 +3          DB      TOKEN_OTHER
                          2332 +2          ;K
                          2333 +2          
058D 05                   2334 +3          DB      TOKEN_OTHER
                          2335 +2          ;L
                          2336 +2          
058E 05                   2337 +3          DB      TOKEN_OTHER
                          2338 +2          ;M
                          2339 +2          
058F 05                   2340 +3          DB      TOKEN_OTHER
                          2341 +2          ;N
                          2342 +2          
0590 05                   2343 +3          DB      TOKEN_OTHER 
                          2344 +2          ;O
                          2345 +2          
0591 05                   2346 +3          DB      TOKEN_OTHER
                          2347 +2          ;P
                          2348 +2          
0592 05                   2349 +3          DB      TOKEN_OTHER
                          2350 +2          ;Q
                          2351 +2          
0593 02                   2352 +3          DB      TOKEN_R
                          2353 +2          ;R
                          2354 +2          
0594 00                   2355 +3          DB      TOKEN_S     
                          2356 +2          ;S
                          2357 +2          
0595 05                   2358 +3          DB      TOKEN_OTHER
                          2359 +2          ;T
                          2360 +2          
0596 05                   2361 +3          DB      TOKEN_OTHER
                          2362 +2          ;U
                          2363 +2          
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   45


LOC  OBJ                  LINE     SOURCE

0597 05                   2364 +3          DB      TOKEN_OTHER
                          2365 +2              ;V
                          2366 +2          
0598 05                   2367 +3          DB      TOKEN_OTHER
                          2368 +2          ;W
                          2369 +2          
0599 05                   2370 +3          DB      TOKEN_OTHER
                          2371 +2          ;X
                          2372 +2          
059A 05                   2373 +3          DB      TOKEN_OTHER
                          2374 +2          ;Y
                          2375 +2          
059B 05                   2376 +3          DB      TOKEN_OTHER
                          2377 +2          ;Z
                          2378 +2          
059C 05                   2379 +3          DB      TOKEN_OTHER
                          2380 +2          ;[
                          2381 +2          
059D 05                   2382 +3          DB      TOKEN_OTHER
                          2383 +2          ;\
                          2384 +2          
059E 05                   2385 +3          DB      TOKEN_OTHER
                          2386 +2          ;]
                          2387 +2          
059F 05                   2388 +3          DB      TOKEN_OTHER
                          2389 +2          ;^
                          2390 +2          
05A0 05                   2391 +3          DB      TOKEN_OTHER
                          2392 +2          ;_
                          2393 +2          
05A1 05                   2394 +3          DB      TOKEN_OTHER
                          2395 +2          ;`
                          2396 +2          
05A2 05                   2397 +3          DB      TOKEN_OTHER
                          2398 +2          ;a
                          2399 +2          
05A3 05                   2400 +3          DB      TOKEN_OTHER
                          2401 +2          ;b
                          2402 +2          
05A4 05                   2403 +3          DB      TOKEN_OTHER
                          2404 +2          ;c
                          2405 +2          
05A5 01                   2406 +3          DB      TOKEN_D     
                          2407 +2          ;d
                          2408 +2          
05A6 05                   2409 +3          DB      TOKEN_OTHER     
                          2410 +2          ;e  
                          2411 +2          
05A7 05                   2412 +3          DB      TOKEN_OTHER     
                          2413 +2          ;f
                          2414 +2          
05A8 05                   2415 +3          DB      TOKEN_OTHER 
                          2416 +2          ;g
                          2417 +2          
05A9 05                   2418 +3          DB      TOKEN_OTHER 
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   46


LOC  OBJ                  LINE     SOURCE

                          2419 +2          ;h
                          2420 +2          
05AA 05                   2421 +3          DB      TOKEN_OTHER 
                          2422 +2          ;i
                          2423 +2          
05AB 05                   2424 +3          DB      TOKEN_OTHER 
                          2425 +2          ;j
                          2426 +2          
05AC 05                   2427 +3          DB      TOKEN_OTHER 
                          2428 +2          ;k
                          2429 +2          
05AD 05                   2430 +3          DB      TOKEN_OTHER 
                          2431 +2          ;l
                          2432 +2          
05AE 05                   2433 +3          DB      TOKEN_OTHER 
                          2434 +2          ;m
                          2435 +2          
05AF 05                   2436 +3          DB      TOKEN_OTHER 
                          2437 +2          ;n
                          2438 +2          
05B0 05                   2439 +3          DB      TOKEN_OTHER     
                          2440 +2          ;o
                          2441 +2          
05B1 05                   2442 +3          DB      TOKEN_OTHER 
                          2443 +2          ;p
                          2444 +2          
05B2 05                   2445 +3          DB      TOKEN_OTHER 
                          2446 +2          ;q
                          2447 +2          
05B3 02                   2448 +3          DB      TOKEN_R 
                          2449 +2          ;r
                          2450 +2          
05B4 00                   2451 +3          DB      TOKEN_S     
                          2452 +2          ;s
                          2453 +2          
05B5 05                   2454 +3          DB      TOKEN_OTHER 
                          2455 +2          ;t
                          2456 +2          
05B6 05                   2457 +3          DB      TOKEN_OTHER 
                          2458 +2          ;u
                          2459 +2          
05B7 05                   2460 +3          DB      TOKEN_OTHER     
                          2461 +2          ;v
                          2462 +2          
05B8 05                   2463 +3          DB      TOKEN_OTHER 
                          2464 +2          ;w
                          2465 +2          
05B9 05                   2466 +3          DB      TOKEN_OTHER 
                          2467 +2          ;x
                          2468 +2          
05BA 05                   2469 +3          DB      TOKEN_OTHER 
                          2470 +2          ;y
                          2471 +2          
05BB 05                   2472 +3          DB      TOKEN_OTHER 
                          2473 +2          ;z
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   47


LOC  OBJ                  LINE     SOURCE

                          2474 +2          
05BC 05                   2475 +3          DB      TOKEN_OTHER 
                          2476 +2          ;{
                          2477 +2          
05BD 05                   2478 +3          DB      TOKEN_OTHER 
                          2479 +2          ;|
                          2480 +2          
05BE 05                   2481 +3          DB      TOKEN_OTHER 
                          2482 +2          ;}
                          2483 +2          
05BF 05                   2484 +3          DB      TOKEN_OTHER 
                          2485 +2          ;~
                          2486 +2          
05C0 05                   2487 +3          DB      TOKEN_OTHER 
                          2488 +2          ;rubout
                          2489 +1  
                          2490     
                          2491     
                          2492     ; token value table - uses second byte of macro table entry
                          2493     
                          2494     
05C1                      2495     TokenValueTable LABEL       BYTE
                          2496 +1          
                          2497 +2          
05C1 00                   2498 +3          DB       0
                          2499 +2          ;<null>  (end of string)
                          2500 +2          
05C2 01                   2501 +3          DB       1
                          2502 +2                  ;SOH
                          2503 +2          
05C3 02                   2504 +3          DB       2
                          2505 +2                  ;STX
                          2506 +2          
05C4 03                   2507 +3          DB       3
                          2508 +2                  ;ETX
                          2509 +2          
05C5 04                   2510 +3          DB       4
                          2511 +2                  ;EOT
                          2512 +2          
05C6 05                   2513 +3          DB       5
                          2514 +2                  ;ENQ
                          2515 +2          
05C7 06                   2516 +3          DB       6
                          2517 +2                  ;ACK
                          2518 +2          
05C8 07                   2519 +3          DB       7
                          2520 +2                  ;BEL
                          2521 +2          
05C9 08                   2522 +3          DB       8
                          2523 +2                  ;backspace
                          2524 +2          
05CA 09                   2525 +3          DB       9
                          2526 +2       ;TAB
                          2527 +2          
05CB 0A                   2528 +3          DB       10
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   48


LOC  OBJ                  LINE     SOURCE

                          2529 +2          ;new line
                          2530 +2          
05CC 0B                   2531 +3          DB       11
                          2532 +2          ;vertical tab
                          2533 +2          
05CD 0C                   2534 +3          DB       12
                          2535 +2          ;form feed
                          2536 +2          
05CE 0D                   2537 +3          DB       13
                          2538 +2              ;carriage return
                          2539 +2          
05CF 0E                   2540 +3          DB       14
                          2541 +2          ;SO
                          2542 +2          
05D0 0F                   2543 +3          DB       15
                          2544 +2          ;SI
                          2545 +2          
05D1 10                   2546 +3          DB       16
                          2547 +2          ;DLE
                          2548 +2          
05D2 11                   2549 +3          DB       17
                          2550 +2          ;DC1
                          2551 +2          
05D3 12                   2552 +3          DB       18
                          2553 +2          ;DC2
                          2554 +2          
05D4 13                   2555 +3          DB       19
                          2556 +2          ;DC3
                          2557 +2          
05D5 14                   2558 +3          DB       20
                          2559 +2          ;DC4
                          2560 +2          
05D6 15                   2561 +3          DB       21
                          2562 +2          ;NAK
                          2563 +2          
05D7 16                   2564 +3          DB       22
                          2565 +2          ;SYN
                          2566 +2          
05D8 17                   2567 +3          DB       23
                          2568 +2          ;ETB
                          2569 +2          
05D9 18                   2570 +3          DB       24
                          2571 +2          ;CAN
                          2572 +2          
05DA 19                   2573 +3          DB       25
                          2574 +2          ;EM
                          2575 +2          
05DB 1A                   2576 +3          DB       26
                          2577 +2          ;SUB
                          2578 +2          
05DC 1B                   2579 +3          DB       27
                          2580 +2          ;escape
                          2581 +2          
05DD 1C                   2582 +3          DB       28
                          2583 +2          ;FS
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   49


LOC  OBJ                  LINE     SOURCE

                          2584 +2          
05DE 1D                   2585 +3          DB       29
                          2586 +2          ;GS
                          2587 +2          
05DF 1E                   2588 +3          DB       30
                          2589 +2          ;AS
                          2590 +2          
05E0 1F                   2591 +3          DB       31
                          2592 +2          ;US
                          2593 +2          
05E1 20                   2594 +3          DB       ' '
                          2595 +2          ;space
                          2596 +2          
05E2 21                   2597 +3          DB       '!'
                          2598 +2          ;!
                          2599 +2          
05E3 22                   2600 +3          DB       '"'
                          2601 +2          ;"
                          2602 +2          
05E4 23                   2603 +3          DB       '#'
                          2604 +2          ;#
                          2605 +2          
05E5 24                   2606 +3          DB       '$'
                          2607 +2          ;$
                          2608 +2          
05E6 25                   2609 +3          DB       37
                          2610 +2          ;percent
                          2611 +2          
05E7 26                   2612 +3          DB       '&'
                          2613 +2          ;&
                          2614 +2          
05E8 27                   2615 +3          DB       39
                          2616 +2          ;'
                          2617 +2          
05E9 28                   2618 +3          DB       40
                          2619 +2          ;open paren
                          2620 +2          
05EA 29                   2621 +3          DB       41
                          2622 +2          ;close paren
                          2623 +2          
05EB 2A                   2624 +3          DB       '*'
                          2625 +2          ;*
                          2626 +2          
05EC 01                   2627 +3          DB       1
                          2628 +2                  ;+  (positive sign)
                          2629 +2          
05ED 2C                   2630 +3          DB       44
                          2631 +2          ;,
                          2632 +2          
05EE FF                   2633 +3          DB       -1
                          2634 +2                  ;-  (negative sign)
                          2635 +2          
05EF 00                   2636 +3          DB       0
                          2637 +2                  ;.  (decimal point)
                          2638 +2          
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   50


LOC  OBJ                  LINE     SOURCE

05F0 2F                   2639 +3          DB       '/'
                          2640 +2          ;/
                          2641 +2          
05F1 30                   2642 +3          DB       '0'
                          2643 +2              ;0  (digit)
                          2644 +2          
05F2 31                   2645 +3          DB       '1'
                          2646 +2                  ;1  (digit)
                          2647 +2          
05F3 32                   2648 +3          DB       '2'
                          2649 +2                  ;2  (digit)
                          2650 +2          
05F4 33                   2651 +3          DB       '3'
                          2652 +2                  ;3  (digit)
                          2653 +2          
05F5 34                   2654 +3          DB       '4'
                          2655 +2                  ;4  (digit)
                          2656 +2          
05F6 35                   2657 +3          DB       '5'
                          2658 +2                  ;5  (digit)
                          2659 +2          
05F7 36                   2660 +3          DB       '6'
                          2661 +2                  ;6  (digit)
                          2662 +2          
05F8 37                   2663 +3          DB       '7'
                          2664 +2                  ;7  (digit)
                          2665 +2          
05F9 38                   2666 +3          DB       '8'
                          2667 +2                  ;8  (digit)
                          2668 +2          
05FA 39                   2669 +3          DB       '9'
                          2670 +2                  ;9  (digit)
                          2671 +2          
05FB 3A                   2672 +3          DB       ':'
                          2673 +2          ;:
                          2674 +2          
05FC 3B                   2675 +3          DB       ';'
                          2676 +2          ;;
                          2677 +2          
05FD 3C                   2678 +3          DB       '<'
                          2679 +2          ;<
                          2680 +2          
05FE 3D                   2681 +3          DB       '='
                          2682 +2          ;=
                          2683 +2          
05FF 3E                   2684 +3          DB       '>'
                          2685 +2          ;>
                          2686 +2          
0600 3F                   2687 +3          DB       '?'
                          2688 +2          ;?
                          2689 +2          
0601 40                   2690 +3          DB       '@'
                          2691 +2          ;@
                          2692 +2          
0602 41                   2693 +3          DB       'A'
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   51


LOC  OBJ                  LINE     SOURCE

                          2694 +2          ;A
                          2695 +2          
0603 42                   2696 +3          DB       'B'
                          2697 +2          ;B
                          2698 +2          
0604 43                   2699 +3          DB       'C'
                          2700 +2          ;C
                          2701 +2          
0605 44                   2702 +3          DB       'D'
                          2703 +2          ;D
                          2704 +2          
0606 45                   2705 +3          DB       'E'
                          2706 +2    ;E 
                          2707 +2          
0607 46                   2708 +3          DB       'F'
                          2709 +2          ;F
                          2710 +2          
0608 47                   2711 +3          DB       'G'
                          2712 +2          ;G
                          2713 +2          
0609 48                   2714 +3          DB       'H'
                          2715 +2          ;H
                          2716 +2          
060A 49                   2717 +3          DB       'I'
                          2718 +2          ;I
                          2719 +2          
060B 4A                   2720 +3          DB       'J'
                          2721 +2          ;J
                          2722 +2          
060C 4B                   2723 +3          DB       'K'
                          2724 +2          ;K
                          2725 +2          
060D 4C                   2726 +3          DB       'L'
                          2727 +2          ;L
                          2728 +2          
060E 4D                   2729 +3          DB       'M'
                          2730 +2          ;M
                          2731 +2          
060F 4E                   2732 +3          DB       'N'
                          2733 +2          ;N
                          2734 +2          
0610 4F                   2735 +3          DB       'O'
                          2736 +2          ;O
                          2737 +2          
0611 50                   2738 +3          DB       'P'
                          2739 +2          ;P
                          2740 +2          
0612 51                   2741 +3          DB       'Q'
                          2742 +2          ;Q
                          2743 +2          
0613 52                   2744 +3          DB       'R'
                          2745 +2          ;R
                          2746 +2          
0614 53                   2747 +3          DB       'S'
                          2748 +2          ;S
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   52


LOC  OBJ                  LINE     SOURCE

                          2749 +2          
0615 54                   2750 +3          DB       'T'
                          2751 +2          ;T
                          2752 +2          
0616 55                   2753 +3          DB       'U'
                          2754 +2          ;U
                          2755 +2          
0617 56                   2756 +3          DB       'V'
                          2757 +2              ;V
                          2758 +2          
0618 57                   2759 +3          DB       'W'
                          2760 +2          ;W
                          2761 +2          
0619 58                   2762 +3          DB       'X'
                          2763 +2          ;X
                          2764 +2          
061A 59                   2765 +3          DB       'Y'
                          2766 +2          ;Y
                          2767 +2          
061B 5A                   2768 +3          DB       'Z'
                          2769 +2          ;Z
                          2770 +2          
061C 5B                   2771 +3          DB       '['
                          2772 +2          ;[
                          2773 +2          
061D 5C                   2774 +3          DB       '\'
                          2775 +2          ;\
                          2776 +2          
061E 5D                   2777 +3          DB       ']'
                          2778 +2          ;]
                          2779 +2          
061F 5E                   2780 +3          DB       '^'
                          2781 +2          ;^
                          2782 +2          
0620 5F                   2783 +3          DB       '_'
                          2784 +2          ;_
                          2785 +2          
0621 60                   2786 +3          DB       '`'
                          2787 +2          ;`
                          2788 +2          
0622 61                   2789 +3          DB       'a'
                          2790 +2          ;a
                          2791 +2          
0623 62                   2792 +3          DB       'b'
                          2793 +2          ;b
                          2794 +2          
0624 63                   2795 +3          DB       'c'
                          2796 +2          ;c
                          2797 +2          
0625 64                   2798 +3          DB       'd'
                          2799 +2          ;d
                          2800 +2          
0626 65                   2801 +3          DB       'e'
                          2802 +2          ;e  
                          2803 +2          
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   53


LOC  OBJ                  LINE     SOURCE

0627 66                   2804 +3          DB       'f'
                          2805 +2          ;f
                          2806 +2          
0628 67                   2807 +3          DB       'g'
                          2808 +2          ;g
                          2809 +2          
0629 68                   2810 +3          DB       'h'
                          2811 +2          ;h
                          2812 +2          
062A 69                   2813 +3          DB       'i'
                          2814 +2          ;i
                          2815 +2          
062B 6A                   2816 +3          DB       'j'
                          2817 +2          ;j
                          2818 +2          
062C 6B                   2819 +3          DB       'k'
                          2820 +2          ;k
                          2821 +2          
062D 6C                   2822 +3          DB       'l'
                          2823 +2          ;l
                          2824 +2          
062E 6D                   2825 +3          DB       'm'
                          2826 +2          ;m
                          2827 +2          
062F 6E                   2828 +3          DB       'n'
                          2829 +2          ;n
                          2830 +2          
0630 6F                   2831 +3          DB       'o'
                          2832 +2          ;o
                          2833 +2          
0631 70                   2834 +3          DB       'p'
                          2835 +2          ;p
                          2836 +2          
0632 71                   2837 +3          DB       'q'
                          2838 +2          ;q
                          2839 +2          
0633 72                   2840 +3          DB       'r'
                          2841 +2          ;r
                          2842 +2          
0634 73                   2843 +3          DB       's'
                          2844 +2          ;s
                          2845 +2          
0635 74                   2846 +3          DB       't'
                          2847 +2          ;t
                          2848 +2          
0636 75                   2849 +3          DB       'u'
                          2850 +2          ;u
                          2851 +2          
0637 76                   2852 +3          DB       'v'
                          2853 +2          ;v
                          2854 +2          
0638 77                   2855 +3          DB       'w'
                          2856 +2          ;w
                          2857 +2          
0639 78                   2858 +3          DB       'x'
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   54


LOC  OBJ                  LINE     SOURCE

                          2859 +2          ;x
                          2860 +2          
063A 79                   2861 +3          DB       'y'
                          2862 +2          ;y
                          2863 +2          
063B 7A                   2864 +3          DB       'z'
                          2865 +2          ;z
                          2866 +2          
063C 7B                   2867 +3          DB       '{'
                          2868 +2          ;{
                          2869 +2          
063D 7C                   2870 +3          DB       '|'
                          2871 +2          ;|
                          2872 +2          
063E 7D                   2873 +3          DB       '}'
                          2874 +2          ;}
                          2875 +2          
063F 7E                   2876 +3          DB       '~'
                          2877 +2          ;~
                          2878 +2          
0640 7F                   2879 +3          DB       127
                          2880 +2          ;rubout
                          2881 +1          
                          2882             
                          2883     
                          2884     
----                      2885     CODE    ENDS
                          2886         
                          2887     ;the data segment
                          2888     
----                      2889     DATA    SEGMENT PUBLIC  'DATA'
                          2890     
0000 (9                   2891     Serial_D_Buff   DB  Display_SIZE+1      DUP     (?)   ; The buffer containing Directi
                                   on meant for Display
     ??
     )
0009 ??                   2892     Debug_PTR       DB  ?                         ; The ele index for Direction buff, use
                                   d when inserting
                          2893                                                   ; each char.
000A ??                   2894     SerialDebugFlag DB  ?                         ; Indicates whether we are in debug
                          2895                                                   ; mode or not
                          2896                                                   
000B (9                   2897     Dir_Buffer      DB  Display_SIZE+1      DUP     (?)   ; The buffer containing Directi
                                   on meant for Display
     ??
     )
0014 ??                   2898     Dir_PTR         DB  ?                         ; The ele index for Direction buff, use
                                   d when inserting
                          2899                                                   ; each char.
                          2900     
0015 (9                   2901     Spd_Buffer      DB  Display_SIZE+1      DUP     (?)   ; The buffer containing Speed m
                                   eant for Display
     ??
     )
001E ??                   2902     Spd_PTR         DB  ?                         ; The ele index for Speed buff, used wh
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   55


LOC  OBJ                  LINE     SOURCE

                                   en inserting
                          2903                                                   ; each char.
                          2904     
001F (9                   2905     Rbt_error_Buff  DB  Display_SIZE+1      DUP     (?)   ; The buffer containing Robot s
                                   tatus meant for Display
     ??
     )
0028 ??                   2906     Rbt_error_Ptr   DB  ?                         ; The ele index for Robot status buff, 
                                   used when inserting
                          2907                                                   ; each char. This buffer has whatever t
                                   he robot sends back
                          2908                                                   ; so long as it began with TOKEN_R's ch
                                   ar.
                          2909     
0029 ????                 2910     Action_Buff_PTR DW  ?                         ; Pointer into String table for ACTION 
                                   string for Display
                          2911                                                   ; ACTIONS are the the string displayed 
                                   to user to describe
                          2912                                                   ; what button they just pressed.
                          2913     
002B ????                 2914     Error_Buff_PTR  DW  ?                         ; Pointer into String table for ERROR s
                                   tring for Display
                          2915                                                   ; ERROR are the the string displayed to
                                    user to describe
                          2916                                                   ; what internal serial error occurred.
                          2917     
002D ????                 2918     Errorflag       DW      ?                     ; Holds error type
                          2919     
002F ??                   2920     FSM_state       DB      ?                     ; Holds the current state of FSM
                          2921     
0030 ????                 2922     ToggleCTR       DW      ?                     ; Counter for ToggleHanler's next buffe
                                   r/string to display
                          2923     
0032 ????                 2924     TogglePreScaler DW      ?                     ; Effectively a pre-scaler to slow down
                                    toggling in ToggleHandler
                          2925                                                   ; to basically arbitrary rates. 
                          2926     
                          2927     
----                      2928     DATA    ENDS
                          2929     
                          2930     ;the stack
                          2931     
----                      2932     STACK   SEGMENT STACK  'STACK'
                          2933     
0000 (80                  2934                     DB      80 DUP ('Stack ')       ;240 words
     537461636B20
     )
                          2935     
01E0                      2936     TopOfStack      LABEL   WORD
                          2937     
----                      2938     STACK   ENDS
                          2939     
                          2940     
                          2941     
                          2942             END     START
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   13:45:30  12/14/;3  PAGE   56


LOC  OBJ                  LINE     SOURCE


ASSEMBLY COMPLETE, NO ERRORS FOUND
