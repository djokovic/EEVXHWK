8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE REMOTE
OBJECT MODULE PLACED IN REMOTE.OBJ
ASSEMBLER INVOKED BY:  C:\5XTOOLS\ASM86.EXE REMOTE.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1     NAME        Remote
                             2     
                             3 +1  $INCLUDE(remote.inc);
                      =1     4     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1     5     ;                                                                               ;
                      =1     6     ;                                  Remote.INC                                   ;
                      =1     7     ;                               Remote Constants                            ;
                      =1     8     ;                                 Include File                              ;
                      =1     9     ;                                                                           ;
                      =1    10     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    11     
                      =1    12     ; This file contains robot constants
                      =1    13     ;
                      =1    14     ; Revision History:
                      =1    15     ;    11/10/2013                 Created - Anjian Wu
                      =1    16     ;    12/11/2013                 Added PRESCALE - Anjian Wu
                      =1    17     ;    12/12/2013                 Updated numOfStatus - Anjian Wu
                      =1    18     
                      =1    19     ; General Constants
                      =1    20     
  03E8                =1    21     PRESCALE            EQU     1000    ; How many Millisec per change in display
                      =1    22                                         ; status?
  0000                =1    23     ACTION_LABEL       EQU     0       ;
  0001                =1    24     ACTION_VAL                 EQU     1       ;
  0002                =1    25     SPEED_LABEL        EQU     2       ;
  0004                =1    26     ANGLE_LABEL        EQU     4       ;
  0006                =1    27     ERROR_LABEL        EQU     6       ;
                      =1    28     
                      =1    29     ; Key Commands  
                      =1    30     
                      =1    31     
  0007                =1    32     CMD_LENGTH          EQU     7       ; Standard FIXED CMD length
                      =1    33     
                      =1    34     ; Displaying Constants
                      =1    35     
  000A                =1    36     numOfStatus         EQU     10       ;
                      =1    37     
                      =1    38     
                      =1    39     ;FSM States Definitions
                      =1    40     
  0000                =1    41     ST_INITIAL          EQU     0   ;Start state
  0001                =1    42     ST_SPEED        EQU     1   ;Set Abs Speed: wait for digit or '+'
  0002                =1    43     ST_DIR          EQU     2   ;Set Abs Speed: wait for digit
  0003                =1    44     ST_ROBOT        EQU     3   ; Grab Robot Error string
                      =1    45     
                      =1    46     ;Token offsets
  0000                =1    47     TOKEN_S         EQU     0; - Set Speed
  0001                =1    48     TOKEN_D         EQU     1;- Set Dir
  0002                =1    49     TOKEN_R         EQU     2;- Set Robot Error
  0003                =1    50     TOKEN_NUM       EQU     3;- A digit
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE    2


LOC  OBJ                  LINE     SOURCE

  0004                =1    51     TOKEN_END       EQU     4; - Return
  0005                =1    52     TOKEN_OTHER     EQU     5; Bad char
                      =1    53     
  0006                =1    54     NUM_TOKEN_TYPES EQU     TOKEN_OTHER + 1; TOKEN_OTHER is always the last Token
                      =1    55     
                      =1    56     ; TOken Masks
                      =1    57     
  007F                =1    58     TOKEN_MASK      EQU     01111111B       ;mask high bit of token
                            59 +1  $INCLUDE(general.inc); Include files
                      =1    60     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    61     ;                                                                               ;
                      =1    62     ;                                  General.INC                                  ;
                      =1    63     ;                               General Constants                           ;
                      =1    64     ;                                 Include File                              ;
                      =1    65     ;                                                                           ;
                      =1    66     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    67     
                      =1    68     ; This file contains general operations
                      =1    69     ;
                      =1    70     ; Revision History:
                      =1    71     ;    11/02/2013                 Created - Anjian Wu
                      =1    72     ;    11/23/2013                 Added WORD_LOOKUP_ADJUST - Anjian Wu
                      =1    73     ;    12/05/2014         Added FMS_ERROR key, ZERO, changed other keys to 
                      =1    74     ;                       ASCII based - Anjian
                      =1    75     
                      =1    76     
                      =1    77     ; General Constants
                      =1    78     
  0000                =1    79     ASCII_NULL      EQU     0           ;
  0001                =1    80     bit_size        EQU     1           ;
  0004                =1    81     nibble_size     EQU     4           ;
  0008                =1    82     BYTE_size       EQU     8           ;
  0010                =1    83     WORD_size       EQU     16          ;
  0000                =1    84     ArrayEmpty      EQU     0               ; Empty is set at 0 index
                      =1    85     
  0001                =1    86     TRUE            EQU     1           ;
  0000                =1    87     FALSE           EQU     0           ;
                      =1    88     
  0000                =1    89     RESET           EQU     0           ; General Value for Resetting something
                      =1    90     
  0000                =1    91     CLEAR           EQU     0           ;
                      =1    92     
  0000                =1    93     ZERO            EQU     0           ;
                      =1    94     
  000A                =1    95     DIGIT           EQU     10          ; A digit in base 10 
                      =1    96     
  0001                =1    97     WORD_LOOKUP_ADJUST  EQU    1           ; Two bytes in one word -> SHL by 1
                      =1    98     
                      =1    99     ; General Definitions for Main Loops
                      =1   100     
  0001                =1   101     FIRST_RESERVED_VEC      EQU     1           ;reserve vectors 1-3
  0003                =1   102     LAST_RESERVED_VEC       EQU     3       ;
  0100                =1   103     NUM_IRQ_VECTORS     EQU 256     ;number of interrupt vectors
                      =1   104     
                      =1   105     ; MainLoop Key Codes
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   106     
  0000                =1   107     KEY_EVENT_KEY       EQU     0   ; Event code indicating key pressed
  0001                =1   108     SER_ERR_KEY         EQU     1   ; Event code indicating serial error
  0002                =1   109     RX_ENQUEUED_KEY     EQU     2   ; Event code indicating new rx value gotten
  0003                =1   110     MODEM_KEY           EQU     3   ; Event code indicating modem event
  0004                =1   111     FSM_ERROR           EQU     4   ; Error key showing FSM error
                      =1   112     
                      =1   113     ; General Addresses
                      =1   114     
  FF22                =1   115     INTCtrlReg          EQU     0FF22H  ;EOI interrupt controller       
                           116 +1  $INCLUDE(display.inc);
                      =1   117     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   118     ;                                                                               ;
                      =1   119     ;                                  Display.INC                                  ;
                      =1   120     ;                               Display Constants                           ;
                      =1   121     ;                                 Include File                              ;
                      =1   122     ;                                                                           ;
                      =1   123     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   124     
                      =1   125     ; This file contains the definitions for the display functions
                      =1   126     ;
                      =1   127     ; Revision History:
                      =1   128     ;    11/02/2013                 Created - Anjian Wu
                      =1   129     
                      =1   130     
                      =1   131     
                      =1   132     ; General Definitions
                      =1   133     
  0008                =1   134     Display_SIZE    EQU     8               ; Size of chars that can fit in display
  0000                =1   135     SEGMENT_NULL    EQU     0               ; Byte value for Sseg pattern of ASCII_NULL
  0001                =1   136     SegPTRAdjust    EQU     1               ; Since we want WORD, we need to adjust 
                      =1   137      
                      =1   138     
                      =1   139     ; Display Addresses
                      =1   140     
  0000                =1   141     LEDDisplay      EQU     0               ; Display is hardware mapped to 0 - 7H
  0008                =1   142     LEDDisplay2     EQU     8               ; 14- seg also hardware mapped to 8h - 0DH
                      =1   143     
                      =1   144     
----                  =1   145     DISPLAYSTRUC     STRUC                      ;structure containing all display buffers
0000                  =1   146         buffer              DB          Display_SIZE        DUP     (?) ;pointer to the f
                                   unction to get switch 
----                  =1   147     DISPLAYSTRUC      ENDS
                      =1   148     
                      =1   149     
                      =1   150     
                           151 +1  $INCLUDE(chips.inc);
                      =1   152     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   153     ;                                                                               ;
                      =1   154     ;                                  Chips.INC                                    ;
                      =1   155     ;                           Chip Select Constants                           ;
                      =1   156     ;                                 Include File                              ;
                      =1   157     ;                                                                           ;
                      =1   158     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   159     
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE    4


LOC  OBJ                  LINE     SOURCE

                      =1   160     ; This file contains the definitions for chip select values
                      =1   161     ;
                      =1   162     ; Revision History:
                      =1   163     ;    11/23/2013                 Created - Anjian Wu
                      =1   164     
                      =1   165     
                      =1   166     
                      =1   167     ; Chip Select Register Values
  0003                =1   168     PACSval         EQU     00003H          ;PCS base at 0, 3 wait states
                      =1   169                                             ;0000000000------  starts at address 0
                      =1   170                                             ;----------000---  reserved
                      =1   171                                             ;-------------0--  wait for RDY inputs
                      =1   172                                             ;--------------11  3 wait states
  0183                =1   173     MPCSval         EQU     00183H          ;PCS in I/O space, use PCS5/6, 3 wait states
                      =1   174                                             ;0---------000---  reserved
                      =1   175                                             ;-0000001--------  MCS is 8KB
                      =1   176                                             ;--------1-------  output PCS5/PCS6
                      =1   177                                             ;---------0------  PCS in I/O space
                      =1   178                                             ;-------------0--  wait for RDY inputs
                      =1   179                                             ;--------------11  3 wait states
                      =1   180                                             
  FFA4                =1   181     PACSreg         EQU     0FFA4H          ;address of PACS register
  FFA8                =1   182     MPCSreg         EQU     0FFA8H          ;address of MPCS register
                           183 +1  $INCLUDE(macros.inc);
                      =1   184 +1  $NOLIST
                           349 +1  $INCLUDE(queue.inc);
                      =1   350     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   351     ;                                                                               ;
                      =1   352     ;                                  Queues.INC                                   ;
                      =1   353     ;                           Queue Conversion Constants                          ;
                      =1   354     ;                                 Include File                              ;
                      =1   355     ;                                                                           ;
                      =1   356     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   357     
                      =1   358     ; This file contains the definitions for the queue functions
                      =1   359     ;
                      =1   360     ; Revision History:
                      =1   361     ;    10/29/2013                 Created - Anjian Wu
                      =1   362     ;    11/01/2013   Debugged,Documented, and working - Anjian Wu
                      =1   363     ;
                      =1   364     ;Structure for Queue allocation, information, and storage
                      =1   365     
                      =1   366     
                      =1   367     ; General Definitions
                      =1   368     
                      =1   369     
  0000                =1   370     BYTE_QUEUE      EQU     0             ; QueueInit Key for Byte queue.
  0001                =1   371     WORD_QUEUE      EQU     1             ; QueueInit Key for Word queue.
                      =1   372     
  0001                =1   373     ByteQ           EQU     1             ; Byte norm factor for indexing
  0002                =1   374     WordQ           EQU     2             ; Word norm factor for indexing
  0400                =1   375     ARRAY_SIZE      EQU     1024          ; Size of queue array (fits 512-1 words, 
                      =1   376                                           ;or 1023 bytes)
                      =1   377     
  0200                =1   378     MAX_Q_LENG          EQU     512          ;Maxlength allowed for byte or word queue
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE    5


LOC  OBJ                  LINE     SOURCE

                      =1   379     
----                  =1   380     QUEUESTRUC      STRUC                   ;structure containing all queue info
0000                  =1   381         head            DW      ?           ;counter for debouncing the switch
0002                  =1   382         tail            DW      ?           ;time until change repeat rates
0004                  =1   383         qsize           DW      ?           ;rate at which to repeat the switch
0006                  =1   384         leng            DW      ?           ;rate at which to repeat the switch
0008                  =1   385         array               DB          ARRAY_SIZE  DUP     (?) ;pointer to the function 
                                   to get switch status
----                  =1   386     QUEUESTRUC      ENDS
                      =1   387     
                      =1   388     ;Structure for storing Queue return values or args
                      =1   389     
----                  =1   390     QUEUEVARS      STRUC                ;structure containing all queue info
0000                  =1   391         dequeued    DW      ?               ;counter for debouncing the switch
----                  =1   392     QUEUEVARS      ENDS
                      =1   393     
                      =1   394     
                      =1   395     
                           396 +1  $INCLUDE(vectors.inc);
                      =1   397     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   398     ;                                                                               ;
                      =1   399     ;                                  Vector.INC                                   ;
                      =1   400     ;                              IVector Constants                            ;
                      =1   401     ;                                 Include File                              ;
                      =1   402     ;                                                                           ;
                      =1   403     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   404     
                      =1   405     ; This file contains the definitions for timers and their interupts
                      =1   406     ;
                      =1   407     ; Revision History:
                      =1   408     ;    11/23/2013                 Created - Anjian Wu
                      =1   409     ;    12/10/2013         Added Timer 2 info - Anjian Wu
                      =1   410     
                      =1   411                                             ; IVector Definitions
                      =1   412     
                      =1   413     ; Interrupt Vectors and their control values
  0008                =1   414     Tmr0Vec         EQU     8               ;interrupt vector for Timer 0
  0012                =1   415     Tmr1Vec         EQU     18              ;interrupt vector for Timer 1
  0013                =1   416     Tmr2Vec         EQU     19              ;interrupt vector for Timer 2
                      =1   417     
  FF32                =1   418     INTCtrlrCtrl    EQU     0FF32H          ;address of interrupt controller for timer
  FF22                =1   419     INTCtrlrEOI     EQU     0FF22H          ;address of interrupt controller EOI register
                      =1   420     
  0001                =1   421     INTCtrlrCVal    EQU     00001H          ;set priority for timers to 1 and enable
                      =1   422                                             ;000000000000----  reserved
                      =1   423                                             ;------------0---  enable timer interrupt
                      =1   424                                             ;-------------001  timer priority
                           425 +1  $INCLUDE(timer.inc);
                      =1   426     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   427     ;                                                                               ;
                      =1   428     ;                                  Timer.INC                                    ;
                      =1   429     ;                              Timer Constants                              ;
                      =1   430     ;                                 Include File                              ;
                      =1   431     ;                                                                           ;
                      =1   432     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE    6


LOC  OBJ                  LINE     SOURCE

                      =1   433     
                      =1   434     ; This file contains the definitions for timers and their interupts
                      =1   435     ;
                      =1   436     ; Revision History:
                      =1   437     ;    11/23/2013                 Created - Anjian Wu
                      =1   438     ;    12/10/2013         Added Timer2 vals - Anjian Wu
                      =1   439     
                      =1   440     
                      =1   441                                             ; Timer Definitions
                      =1   442     
                      =1   443     ; Addresses
  FF56                =1   444     Tmr0Ctrl        EQU     0FF56H          ;address of Timer 0 Control Register
  FF52                =1   445     Tmr0MaxCntA     EQU     0FF52H          ;address of Timer 0 Max Count A Register
  FF50                =1   446     Tmr0Count       EQU     0FF50H          ;address of Timer 0 Count Register
                      =1   447     
  FF5E                =1   448     Tmr1Ctrl        EQU     0FF5EH          ;address of Timer 1 Control Register
  FF5A                =1   449     Tmr1MaxCntA     EQU     0FF5AH          ;address of Timer 1 Max Count A Register
  FF58                =1   450     Tmr1Count       EQU     0FF58H          ;address of Timer 1 Count Register
                      =1   451     
                      =1   452     
  FF66                =1   453     Tmr2Ctrl        EQU     0FF66H          ;address of Timer 2 Control Register
  FF62                =1   454     Tmr2MaxCnt      EQU     0FF62H          ;address of Timer 2 Max Count A Register
  FF60                =1   455     Tmr2Count       EQU     0FF60H          ;address of Timer 2 Count Register
                      =1   456     
                      =1   457     ; Control Register Values
  E001                =1   458     Tmr0CtrlVal     EQU     0E001H          ;value to write to Timer 0 Control Register
                      =1   459                                             ;1---------------  enable timer
                      =1   460                                             ;-1--------------  write to control
                      =1   461                                             ;--1-------------  enable interrupts
                      =1   462                                             ;----000000------  reserved
                      =1   463                                             ;---0------0-----  read only
                      =1   464                                             ;-----------0----  Retrigger
                      =1   465                                             ;------------0---  Prescaler
                      =1   466                                             ;-------------0--  external clock
                      =1   467                                             ;--------------0-  single counter mode
                      =1   468                                             ;---------------1  continuous mode
                      =1   469                                             
  E001                =1   470     Tmr1CtrlVal     EQU     0E001H          ;value to write to Timer 1 Control Register
                      =1   471                                             ;1---------------  enable timer
                      =1   472                                             ;-1--------------  write to control
                      =1   473                                             ;--1-------------  enable interrupts
                      =1   474                                             ;----000000------  reserved
                      =1   475                                             ;---0------0-----  read only
                      =1   476                                             ;-----------0----  Retrigger
                      =1   477                                             ;------------0---  Prescaler
                      =1   478                                             ;-------------0--  external clock
                      =1   479                                             ;--------------0-  single counter mode
                      =1   480                                             ;---------------1  continuous mode
                      =1   481     
  E001                =1   482     Tmr2CtrlVal     EQU     0E001H          ;value to write to Timer 2 Control Register
                      =1   483                                             ;1---------------  enable timer
                      =1   484                                             ;-1--------------  write to control
                      =1   485                                             ;--1-------------  enable interrupts
                      =1   486                                             ;----0000000-----  reserved
                      =1   487                                             ;-----------0----  MaxCount
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE    7


LOC  OBJ                  LINE     SOURCE

                      =1   488                                             ;------------000-  reserved
                      =1   489                                             ;---------------1  continuous mode
                      =1   490     ; Control Register Values
                      =1   491                                           
                      =1   492                                             ; Control Register Values
  08CA                =1   493     CTS_PER_MILSEC  EQU     2250            ; 18MHZ/(8 * 1KHz) ~ 2250 counts per MS
                      =1   494     
  07D0                =1   495     PRESCALE_2SEC   EQU     2000            ; 2 seconds = CTS_PER_MILSEC * 2000
                      =1   496     
  0008                =1   497     TimerEOI        EQU     00008H          ;Timer EOI command (same for all timers)
  8000                =1   498     NonSpecEOI      EQU     08000H          ;Non-specific EOI command
                      =1   499     
                      =1   500     
  0258                =1   501     COUNT_FOR_30HZ  EQU     600             ; 18,000,000 HZ/(8 * 30 Hz * PWM_WIDTH_MAX) 
                      =1   502                                             ; ~ 600 counts for 30 HZ of PWM
                      =1   503                                             
  00B1                =1   504     COUNT_FOR_100HZ EQU     177             ; 18,000,000 HZ/(8 * 100 Hz * PWM_WIDTH_MAX) 
                      =1   505                                             ; ~ 177 counts for 100 HZ of PWM             
                                                             
                      =1   506                                             
                      =1   507                                             ; NOTE THIS IS APPROXIMATE, Clock is actually
                                    a bit faster
                      =1   508                                             ; than 18 MHZ
                      =1   509     
                      =1   510     
                           511     
                           512     
                           513     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           514     ;                                                                            ;
                           515     ;                                 HW9 Remote Mainloop Functions              ;
                           516     ;                                 EE51                                           ;
                           517     ;                                 Anjian Wu                                  ;
                           518     ;                                                                            ;
                           519     ;                                 TA: Pipe-Mazo                              ;
                           520     ;                                                                            ;
                           521     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           522     ;                                 What's in here?
                           523     ;
                           524     ;                                   Code Segment
                           525     ;
                           526     ;   Procedures
                           527     ;
                           528     ;   Remote_FSM_LOOP     -   If available, dequeue next WORD in rx_queue
                           529     ;   ParseRemoteWord     -   Parses four types of Event Handlers
                           530     ;
                           531     ;   HandleKey           -   Updates display and tx_queue with command
                           532     ;   HandleSerErr        -   Displays serial chip error
                           533     ;   ParseRemoteChar     -   Concatenates the status message as string. Then
                           534     ;                           will display to user.
                           535     ;   HandleModem         -   Stub function for now, since no flow control
                           536     ;
                           537     ;   RemoteParseInit     -   Initializes all parsing variables and ToggleHandler
                           538     ;   ToggleHandler       -   Timer handler that actually Calls Display and cycles
                           539     ;                           between displaying statuses.
                           540     ;   GetTokenTypeVal     -   Grabs next token type and val
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           541     ;   RemoteParseReset    -   Resets state machine variables for Remote FSM
                           542     ;   SetError            -   Indicates RemoteFSM error
                           543     ;   no_op               -   Just Returns
                           544     ;   AddDirChar          -   Concat the Direction Status String from Robot
                           545     ;   AddSpeedChar        -   Concat the Speed Status String from Robot
                           546     ;
                           547     ;   Tables
                           548     ;   Token Tables        -   Contains all tokens/token vals for Remote FSM
                           549     ;   Toggle_JMP_Table    -   Jump table inside Toggle handler, muxes what value displa
                                   y                    
                           550     ;   Toggle_Label_Table  -   Muxes which value label to display
                           551     ;   SerErrTable         -   Table of error strings for display
                           552     ;   KeyDisplayTable     -   Table of cmd strings for display
                           553     ;   KeyCmdTable         -   Table of strings cmds for Serial to Robot
                           554     ;
                           555     ;                              What's was last edit?
                           556     ;
                           557     ;                               Pseudo code ->  12-06-2013 - Anjian Wu
                           558     ;                   Added KeyDisplayError/KeyDisplayInit Table -> 12-10-13 -AW
                           559     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           560     CGROUP  GROUP   CODE
                           561     DGROUP  GROUP   STACK, DATA
                           562     
----                       563     CODE    SEGMENT PUBLIC 'CODE'
                           564     
                           565     
                           566             ASSUME  CS:CGROUP, DS:DGROUP
                           567             
                           568     ;external function declarations
                           569      
                           570     ;Init/Setup Functions 
                           571             EXTRN   InitUserInterfaceCS:NEAR  
                           572             EXTRN   EnqueueEventInit:NEAR
                           573             EXTRN   Timer0Init:NEAR  
                           574             EXTRN   Timer1Init:NEAR  
                           575             EXTRN   Timer2Init:NEAR  
                           576             EXTRN   ClrIRQVectors:NEAR  
                           577             EXTRN   KeyHandlerInit:NEAR  
                           578             EXTRN   DisplayHandlerInit:NEAR  
                           579             EXTRN   SerialInit:NEAR       
                           580             
                           581     ;Main Loop Fuctions
                           582             EXTRN   Display:NEAR        
                           583             EXTRN   DequeueEvent:NEAR    
                           584             EXTRN   EnqueueEvent:NEAR           
                           585             EXTRN   EventAvailable:NEAR        
                           586             EXTRN   SerialPutChar:NEAR             
                           587              
                           588     
                           589                     
                           590     ; Name:             Remote Main Loop
                           591     ; Description:      This is the remote main loop
                           592     ;
                           593     ;                   *   Set up all initializations
                           594     ;                   *   Enter remote_fsm_loop
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           595     ;                   *   LOOP forever checking whether an event is available
                           596     ;                       , if so dequeue it and pass to ParseRemoteWord
                           597     ;
                           598     ; Input:            None.
                           599     ; Output:           None.
                           600     ;
                           601     ; User Interface:   None.
                           602     ;
                           603     ; Error Handling:   None.
                           604     ;
                           605     ; Algorithms:       None.
                           606     ;
                           607     ; Data Structures:  None.
                           608     ;
                           609     ; Known Bugs:       None.
                           610     ; Limitations:      None.
                           611     ;
                           612     ; Revision History:
                           613     ;                               Initial Version ->  12-05-2013 - Anjian Wu
                           614     ;------------------------------------------------------------------------------------
                                   ----               
0000                       615     START:
                           616     
0000                       617     MAIN:
0000 B8----         R      618             MOV     AX, DGROUP              ;initialize the stack pointer
0003 8ED0                  619             MOV     SS, AX
0005 BCE00190       R      620             MOV     SP, OFFSET(DGROUP:TopOfStack)
                           621     
0009 B8----         R      622             MOV     AX, DGROUP              ;initialize the data segment
000C 8ED8                  623             MOV     DS, AX
                           624             
000E E80000         E      625             CALL    ClrIRQVectors              ; Clear whole vector table with Illegal Fu
                                   nction
0011 E80000         E      626             CALL    InitUserInterfaceCS        ; Initialize All UI hardware (keypad, disp
                                   lay)
0014 E80000         E      627             CALL    Timer0Init                 ; Initialize timer 0 interrupt
0017 E80000         E      628             CALL    Timer1Init                 ; Initialize timer 1 interrupt
001A E80000         E      629             CALL    Timer2Init                 ; Initialize timer 2 interrupt
001D E80000         E      630             CALL    KeyHandlerInit             ; Initialize keypad function variables
0020 E80000         E      631             CALL    SerialInit                 ; Initialize serial function variables
0023 E80000         E      632             CALL    DisplayHandlerInit                ; Initialize display function varia
                                   bles
0026 E80000         E      633             CALL    EnqueueEventInit           ; Initialize the Event queue function vars
                           634                                                
0029 E8F101                635             CALL    RemoteParseInit            ;
                           636             
002C FB                    637             STI                                ; Start interrupts
                           638             ;JMP     REMOTE_FSM_LOOP            ;
                           639     
                           640         
002D                       641     REMOTE_FSM_LOOP:
                           642         
002D E80000         E      643             CALL    EventAvailable              ; Is there a pending event? 
0030 7406                  644             JZ      RemoteFSMIdle               ; Event queue is empty, thus stay idle
                           645             ;JNZ    RemoteFSMEvent              ; There was an event!
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   10


LOC  OBJ                  LINE     SOURCE

0032                       646     RemoteFSMEvent:
                           647     
0032 E80000         E      648             CALL    DequeueEvent                ; Grab that event into AX
0035 E80200                649             CALL    ParseRemoteWord             ; Pass to get event parsed
                           650             
0038                       651     RemoteFSMIdle:
                           652         
0038 EBF3                  653     JMP     REMOTE_FSM_LOOP                     ; Loop forever
                           654     
                           655     ; Name:             ParseRemoteWord
                           656     ; Description:      Uses a call table to select the next function to call to handle
                           657     ;                   the event type. The event val is passed to this function call.
                           658     ;
                           659     ; Input:            None.
                           660     ; Output:           None.
                           661     ;
                           662     ; User Interface:   None.
                           663     ;
                           664     ; Error Handling:   None.
                           665     ;
                           666     ; Algorithms:       None.
                           667     ;
                           668     ; Data Structures:  None.
                           669     ;
                           670     ; Known Bugs:       None.
                           671     ; Limitations:      None.
                           672     ;
                           673     ; Revision History:
                           674     ;                               Initial Version ->  12-05-2013 - Anjian Wu
                           675     ;------------------------------------------------------------------------------------
                                   ----       
003A                       676     ParseRemoteWord     PROC    NEAR
                           677     
                           678     ; Arg: AX = [AH = key, AL = value]
                           679     
003A 8AD8                  680         MOV     BL, AL                      ; Save event value
003C 32FF                  681         XOR     BH, BH                      ; Isolate the Event val     
                           682         
003E 86E0                  683         XCHG    AH, AL                      ; Swap such that Event Type is LSNibble
0040 32E4                  684         XOR     AH, AH                      ; Isolate the Event Type      
                           685     
0042 D1E0                  686         SHL     AX, WORD_LOOKUP_ADJUST      ; Prepare for WORD table lookup
0044 93                    687         XCHG    BX, AX                      ; Copy to BX for pointer, and AX now has Even
                                   t val
0045 2EFF974B00     R      688         CALL    CS:Remote_Call_Table[BX]    ; Go to that FSM  function, passing Event val
                                    in AX
                           689         
004A C3                    690         RET
                           691         
                           692     ParseRemoteWord ENDP
                           693     
004B                       694     Remote_Call_Table           LABEL       WORD
                           695                                         
004B 5300           R      696             DW              HandleKey               ;KEY_EVENT_KEY - An internal key pres
                                   s
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   11


LOC  OBJ                  LINE     SOURCE

004D B401           R      697             DW              HandleSerErr        ;SER_ERR_KEY   - An internal serial CHIP 
                                   issue
004F 5B03           R      698             DW      ParseRemoteChar     ;RX_ENQUEUED_KEY - External serial char stream
0051 1C02           R      699             DW      HandleModem         ;MODEM_KEY - Internal serial chip modem issue
                           700     
                           701     
                           702     ;Procedure:                     HandleKey
                           703     ;
                           704     ;Description:           Maps the key pressed into the command string with fixed lengt
                                   h.
                           705     ;                   Then that command is stored into the tx_queue. Also displays
                           706     ;                   the proper message to the user describing the command.
                           707     ;                
                           708     ;Arguments:             hexcode.
                           709     ;Return Values:         None.
                           710     ;Shared Variables:      None.
                           711     ;Local Variables:       None.
                           712     ;Global Variables:      None.                   
                           713     ;Input:                 None.
                           714     ;Output:                None.
                           715     ;Registers Used:        None.
                           716     ;Stack Depth:           none.
                           717     ;Known Bugs:            None.
                           718     ;Data Structures:       None.
                           719     ;Error Handling:        If tx_queue is FULL, then stop and return.
                           720     ;Algorithms:            None.
                           721     ;Limitations:           None.
                           722     ;Author:                        Anjian Wu
                           723     ;History:                       12-06-2013: Pseudo code - Anjian Wu
                           724     ;------------------------------------------------------------------------------
0053                       725     HandleKey       PROC    NEAR
                           726     
                           727     ; Arg: AL = value
                           728     
0053 8AC8                  729         MOV     CL, AL          ; Save a copy of AL
                           730         
                           731 +1      
0055 33DB                  732 +1      XOR     BX, BX                  ; Clear counter
0057 B307                  733 +2          MOV             BL, CMD_LENGTH      ; Let counter be CMD_LENGTH
0059 F6E3                  734 +1          MUL             BL                      ; Rel pinter = CMD_LENGTH * typeindex
005B 05920090       R      735 +2      ADD     AX, OFFSET( KeyCmdTable)  ;
                           736 +1  
                           737                                 ; Calc abs starting addr of the char string
                           738                                 ; AX = CMD_LENGTH*AL + OFFSET(KeyCmdTable)
                           739         
005F 8BD8                  740         MOV     BX, AX          ; Need the abs addr in BX for XLAT
                           741                                 
0061 32C0                  742         XOR     AL, AL          ; Clear counter
                           743         
                           744     ;-----------------------Loop enqueue the char string-----------------------------
0063                       745     HandleKeyEnqueue:
0063 3C07                  746         CMP     AL, CMD_LENGTH          ; Go from AL = 0 to CMD_LENGTH - 1
0065 7D0D                  747         JGE     HandleKeyEnqueueDone    ; Yes, so exit loop
                           748         
0067 50                    749         PUSH    AX                      ; Save counter
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   12


LOC  OBJ                  LINE     SOURCE

0068 2ED7                  750         XLAT        CS:KeyCmdTable                  ; Get next char (at CS:BX[AL] -> AL b
                                   y design)      
006A E80000         E      751         CALL    SerialPutChar           ; Is TX_queue Full?
                           752         
006D 58                    753         POP     AX
                           754     
006E 7215                  755         JC      HandleKeyError          ; Yes it is, tell user.
                           756                                         ; Cannot send this char, exit this function
                           757                                         ; immediately. Any partially sent string is unlik
                                   ely
                           758                                         ; to be valid string, thus ROBOT side will likely
                                    throw
                           759                                         ; a string error as well.
                           760         ;JNZ    HandleKeyEnqueueOk      ; It is ok to enqueue.
                           761         
0070                       762     HandleKeyEnqueueOk:
                           763         
0070 FEC0                  764         INC     AL                      ; Increment Counter
                           765         
0072 EBEF                  766         JMP     HandleKeyEnqueue
                           767     ;-----------------------Now update display for USER-----------------------------
0074                       768     HandleKeyEnqueueDone:
0074 33C0                  769         XOR     AX, AX          ; 
0076 8AC1                  770         MOV     AL, CL          ; Restore the copy of event value
                           771 +1      
0078 33DB                  772 +1      XOR     BX, BX                  ; Clear counter
007A B309                  773 +2          MOV             BL, Display_SIZE+1          ; Let counter be CMD_LENGTH
007C F6E3                  774 +1          MUL             BL                      ; Rel pinter = CMD_LENGTH * typeindex
007E 05090190       R      775 +2      ADD     AX, OFFSET( KeyDisplayTables)  ;
                           776 +1  
                           777                                 ; Calc abs starting addr of the char string
                           778                                 ; AX = (Display_SIZE+1)*AL + OFFSET(KeyDisplayTable)
0082 EB0490                779         JMP     HandleKeyDone
                           780         
0085                       781     HandleKeyError:
0085 B8AB01         R      782         MOV     AX, OFFSET(KeyDisplayError) ; Send out the Error TX display
                           783         ;JMP     HandleKeyDone
0088                       784     HandleKeyDone:
                           785     
0088 A31E00         R      786         MOV     Action_Buff_PTR, AX ;   
008B C70625000100   R      787         MOV     ToggleCTR, ACTION_VAL;
                           788         
0091 C3                    789         RET     
                           790         
                           791     HandleKey   ENDP
                           792     
0092                       793     KeyCmdTable         LABEL       BYTE
                           794     ;                   The way KEYS are mapped physically is...
                           795     ;                   __________________________
                           796     ;                  | [0]  |  [1]  | [2] | [3] |  
                           797     ;                  |__________________________|
                           798     ;                  | [4]  |  [5]  | [6] | [7] |
                           799     ;  Keypad ------>  |__________________________|
                           800     ;                  | [8]  |  [9]  | [10]| [11]|    
                           801     ;                  |__________________________|
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   13


LOC  OBJ                  LINE     SOURCE

                           802     ;                  | [12] |  [13] | [14]| [15]|  
                           803     ;                  |_____ |_______|_____|_____|   
                           804                                  
0092 54                    805             DB              'T',        '+',   '0015',     13 ;Key 0
0093 2B
0094 30303135
0098 0D
0099 54                    806             DB              'T',        ' ',   '0000',     13 ;Key 1
009A 20
009B 30303030
009F 0D
00A0 54                    807             DB      'T',        '-',   '0015',     13 ;Key 2
00A1 2D
00A2 30303135
00A6 0D
00A7 20                    808             DB      ' ',        ' ',   '    ',     13 ;Key 3
00A8 20
00A9 20202020
00AD 0D
00AE 20                    809             DB      ' ',        ' ',   '    ',     13 ;Key 4
00AF 20
00B0 20202020
00B4 0D
00B5 4F                    810             DB      'O',        ' ',   '    ',     13 ;Key 5
00B6 20
00B7 20202020
00BB 0D
00BC 53                    811             DB      'S',        ' ',   '0000',     13 ;Key 6
00BD 20
00BE 30303030
00C2 0D
00C3 46                    812             DB      'F',        ' ',   '    ',     13 ;Key 7
00C4 20
00C5 20202020
00C9 0D
00CA 20                    813             DB      ' ',        ' ',   '    ',     13 ;Key 8
00CB 20
00CC 20202020
00D0 0D
00D1 44                    814             DB      'D',        '+',   '0015',     13 ;Key 9
00D2 2B
00D3 30303135
00D7 0D
00D8 56                    815             DB      'V',        '+',   '4369',     13 ;Key 10
00D9 2B
00DA 34333639
00DE 0D
00DF 44                    816             DB      'D',        '-',   '0015',     13 ;Key 11
00E0 2D
00E1 30303135
00E5 0D
00E6 20                    817             DB      ' ',        ' ',   '    ',     13 ;Key 12
00E7 20
00E8 20202020
00EC 0D
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   14


LOC  OBJ                  LINE     SOURCE

00ED 44                    818             DB      'D',        '-',   '0090',     13 ;Key 13
00EE 2D
00EF 30303930
00F3 0D
00F4 56                    819             DB      'V',        '-',   '4369',     13 ;Key 14 
00F5 2D
00F6 34333639
00FA 0D
00FB 44                    820             DB      'D',        '+',   '0090',     13 ;Key 15
00FC 2B
00FD 30303930
0101 0D
0102 20                    821             DB      ' ',        ' ',   '    ',     13 ;Key Not assigned
0103 20
0104 20202020
0108 0D
                           822             
                           823     
0109                       824     KeyDisplayTables            LABEL       BYTE
                           825     ;                   The way KEYS are mapped physically is...
                           826     ;                   __________________________
                           827     ;                  | [0]  |  [1]  | [2] | [3] |  
                           828     ;                  |__________________________|
                           829     ;                  | [4]  |  [5]  | [6] | [7] |
                           830     ;  Keypad ------>  |__________________________|
                           831     ;                  | [8]  |  [9]  | [10]| [11]|    
                           832     ;                  |__________________________|
                           833     ;                  | [12] |  [13] | [14]| [15]|  
                           834     ;                  |_____ |_______|_____|_____|     
                           835     ; The addition of KeyDisplayInit and KeyDisplayError Tables
                           836     ; to ease coding.
                           837                               
0109 5420414E472B20        838             DB              'T ANG+  ', ASCII_NULL      ;Key 0
     20
0111 00
0112 54205245534554        839             DB              'T RESET ', ASCII_NULL      ;Key 1
     20
011A 00
011B 5420414E472D20        840             DB              'T ANG-  ', ASCII_NULL      ;Key 2
     20
0123 00
0124 4E6F4E6F4E6F4E        841             DB              'NoNoNoNo', ASCII_NULL      ;Key 3      
     6F
012C 00
012D 4E6F4E6F4E6F4E        842             DB              'NoNoNoNo', ASCII_NULL      ;Key 4      
     6F
0135 00
0136 4C415A52204F46        843             DB              'LAZR OFF', ASCII_NULL      ;Key 5
     46
013E 00
013F 532054204F2050        844             DB              'S T O P ', ASCII_NULL      ;Key 6
     20
0147 00
0148 4C415A52204F4E        845             DB              'LAZR ON ', ASCII_NULL      ;Key 7
     20
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   15


LOC  OBJ                  LINE     SOURCE

0150 00
0151 4E6F4E6F4E6F4E        846             DB              'NoNoNoNo', ASCII_NULL      ;Key 8      
     6F
0159 00
015A 444952202B3135        847             DB              'DIR +15 ', ASCII_NULL      ;Key 9
     20
0162 00
0163 53504545442B20        848             DB              'SPEED+  ', ASCII_NULL      ;Key 10
     20
016B 00
016C 444952202D3135        849             DB              'DIR -15 ', ASCII_NULL      ;Key 11
     20
0174 00
0175 4E6F4E6F4E6F4E        850             DB              'NoNoNoNo', ASCII_NULL      ;Key 12     
     6F
017D 00
017E 444952202D3930        851             DB              'DIR -90 ', ASCII_NULL      ;Key 13
     20
0186 00
0187 53504545442D20        852             DB              'SPEED-  ', ASCII_NULL      ;Key 14
     20
018F 00
0190 444952202B3930        853             DB              'DIR +90 ', ASCII_NULL      ;Key 15
     20
0198 00
0199 5370656369616C        854         DB      'Special!', ASCII_NULL      ;NOT KEY
     21
01A1 00
                           855         
01A2                       856     KeyDisplayInit     LABEL        BYTE
01A2 50726573734B65        857         DB      'PressKey', ASCII_NULL      ;Initial Message
     79
01AA 00
01AB                       858     KeyDisplayError     LABEL       BYTE
01AB 54582046554C4C        859         DB      'TX FULL ', ASCII_NULL      ;TX queue is Full Error
     20
01B3 00
                           860     
                           861     ;Procedure:                     HandleSerErr
                           862     ;
                           863     ;Description:           Determines which Serial error occurred at the chip,
                           864     ;                   and informs the user to the issue.
                           865     ;                
                           866     ;Arguments:             None.
                           867     ;Return Values:         none.
                           868     ;Shared Variables:      None.
                           869     ;Local Variables:       None.
                           870     ;Global Variables:      None.                   
                           871     ;Input:                 None.
                           872     ;Output:                None.
                           873     ;Registers Used:        None.
                           874     ;Stack Depth:           none.
                           875     ;Known Bugs:            None.
                           876     ;Data Structures:       None.
                           877     ;Error Handling:        None.
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   16


LOC  OBJ                  LINE     SOURCE

                           878     ;Algorithms:            None.
                           879     ;Limitations:           None.
                           880     ;Author:                        Anjian Wu
                           881     ;History:                       12-06-2013: Pseudo code - Anjian Wu
                           882     ;------------------------------------------------------------------------------
01B4                       883     HandleSerErr    PROC    NEAR
                           884     
                           885     
                           886 +1      
01B4 33DB                  887 +1      XOR     BX, BX                  ; Clear counter
01B6 B309                  888 +2          MOV             BL, Display_SIZE+1          ; Let counter be CMD_LENGTH
01B8 F6E3                  889 +1          MUL             BL                      ; Rel pinter = CMD_LENGTH * typeindex
01BA 05C20190       R      890 +2      ADD     AX, OFFSET( SerErrTable)  ;
                           891 +1  
                           892                                 ; Calc abs starting addr of the char string
                           893                                 ; AX = Display_SIZE*AL + OFFSET(SerErrTable)
                           894                                 
01BE A32000         R      895         MOV     Error_Buff_PTR, AX ;   
                           896     
01C1 C3                    897         RET
                           898         
                           899     HandleSerErr    ENDP
                           900     
01C2                       901     SerErrTable     LABEL       BYTE
                           902     
01C2 4E4F204552524F        903         DB     'NO ERROR', ASCII_NULL   ;
     52
01CA 00
01CB 4F56455252554E        904         DB     'OVERRUN ', ASCII_NULL   ; Overrun serial error
     20
01D3 00
01D4 20202020202020        905         DB     '        ', ASCII_NULL   ;
     20
01DC 00
01DD 50415249545920        906         DB     'PARITY  ', ASCII_NULL   ; Parity serial error
     20
01E5 00
01E6 20202020202020        907         DB     '        ', ASCII_NULL   ;
     20
01EE 00
01EF 4652414D452020        908         DB     'FRAME   ', ASCII_NULL   ; Frame serial error
     20
01F7 00
01F8 20202020202020        909         DB     '        ', ASCII_NULL   ;
     20
0200 00
0201 20202020202020        910         DB     '        ', ASCII_NULL   ;
     20
0209 00
020A 20202020202020        911         DB     '        ', ASCII_NULL   ;
     20
0212 00
0213 425245414B2020        912         DB     'BREAK   ', ASCII_NULL   ; Break int
     20
021B 00
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   17


LOC  OBJ                  LINE     SOURCE

                           913     
                           914     
                           915     ;Procedure:                     HandleModem
                           916     ;
                           917     ;Description:           Stub function for now.
                           918     ;                
                           919     ;Arguments:             None.
                           920     ;Return Values:         none.
                           921     ;Shared Variables:      None
                           922     ;Local Variables:       None.
                           923     ;Global Variables:      None.                   
                           924     ;Input:                 None.
                           925     ;Output:                None.
                           926     ;Registers Used:        None.
                           927     ;Stack Depth:           none.
                           928     ;Known Bugs:            None.
                           929     ;Data Structures:       None.
                           930     ;Error Handling:        None.
                           931     ;Algorithms:            None.
                           932     ;Limitations:           None.
                           933     ;Author:                        Anjian Wu
                           934     ;History:                       12-06-2013: Pseudo code - Anjian Wu
                           935     ;------------------------------------------------------------------------------
021C                       936     HandleModem    PROC    NEAR
                           937     
021C C3                    938         RET
                           939         
                           940     HandleModem    ENDP
                           941     
                           942     ;Function:                      RemoteParseInit
                           943     ;Description:           Resets all Parser variables to initial state, zero magnitude,
                                    and pos sign     
                           944     ;Operation:         * Set sign as POS, set FSM_state as ST_INITIAL, and set magnitude
                                    as zero         
                           945     ;Arguments:             None.
                           946     ;Return Values:         none.
                           947     ;Shared Variables:      none.
                           948     ;Local Variables:       None.
                           949     ;Global Variables:      None.                   
                           950     ;Input:                 None.
                           951     ;Output:                None.
                           952     ;Registers Used:        none.
                           953     ;Stack Depth:           none.
                           954     ;Known Bugs:            None.
                           955     ;Data Structures:       None.
                           956     ;Error Handling:        None
                           957     ;Algorithms:            None.
                           958     ;Limitations:           None.
                           959     ;Author:                        Anjian Wu
                           960     ;Author:                        Anjian Wu
                           961     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                           962     ;                   12-08-2013: Documentation - Anjian Wu
                           963     ;------------------------------------------------------------------------------
021D                       964     RemoteParseInit  PROC    NEAR
                           965                 
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   18


LOC  OBJ                  LINE     SOURCE

021D C60609000090   R      966         MOV     Dir_PTR, zero               ; Initialize Direction Buff
0223 C60613000090   R      967         MOV     Spd_PTR, zero               ; Initialize Speed Buff
0229 C70625000000   R      968         MOV     ToggleCTR, zero             ; Start with first Status to toggle
022F C6061D000090   R      969         MOV     Rbt_error_Ptr, zero         ;
0235 C70627000000   R      970         MOV     TogglePreScaler, zero
                           971         
023B C7061E00A201   R      972         MOV     Action_Buff_PTR, OFFSET(KeyDisplayInit) ; Display NO actions yet
0241 C7062000C201   R      973         MOV     Error_Buff_PTR, OFFSET(SerErrTable)     ; Display NO error yet
0247 C60624000090   R      974         MOV     FSM_state, ST_INITIAL                   ;
                           975         
                           976 +1      
024D 8BF0                  977 +2      MOV     SI, AX          ; Prepare for display at SI
024F 8CC8                  978 +2      MOV     AX, CS          ;
0251 8EC0                  979 +2      MOV     ES, AX          ; String is in code segment
                           980 +1                             ;
0253 8B361E00       R      981         MOV     SI, Action_Buff_PTR                     ;
0257 E80000         E      982         CALL    Display                                 ;
                           983         
025A 33DB                  984         XOR     BX, BX                      ; Clear Counter
                           985             
025C                       986     RemoteParseInitBufClear:
                           987     
025C 83FB08                988         CMP     BX, Display_SIZE             ; For each motor PWM counter
025F 7D15                  989         JGE     RemoteParseInitBufClearDone ; If each done, then leave loop
                           990         
0261 C68700000090   R      991         MOV     Dir_Buffer[BX], ASCII_NULL  ; Tell user we are going straight
0267 C6870A000090   R      992         MOV     Spd_Buffer[BX], ASCII_NULL  ; Tell user we are not moving
026D C68714000090   R      993         MOV     Rbt_error_Buff[BX], ASCII_NULL  ; Tell user no error from robot yet
                           994     
0273 43                    995         INC     BX                          ; Increment buffer/counter index
0274 EBE6                  996         JMP     RemoteParseInitBufClear     ; Loop until all entries are cleared
                           997         
0276                       998     RemoteParseInitBufClearDone:
                           999     
0276 33C0                 1000         XOR     AX, AX          ;clear ES (interrupt vectors are in segment 0)
0278 8EC0                 1001         MOV     ES, AX
                          1002                                 ;store the vector
027A 26C70620008902 R     1003         MOV     ES: WORD PTR (4 * Tmr0Vec), OFFSET(ToggleHandler)   ; Install ToggleHandl
                                   er
0281 26C7062200---- R     1004         MOV     ES: WORD PTR (4 * Tmr0Vec + 2), SEG(ToggleHandler)
                          1005         
                          1006     
0288 C3                   1007             RET
                          1008             
                          1009     RemoteParseInit  ENDP  
                          1010     
                          1011     ;Function:                      ToggleHandler
                          1012     ;Description:           Resets all Parser variables to initial state, zero magnitude,
                                    and pos sign     
                          1013     ;Operation:         * Set sign as POS, set FSM_state as ST_INITIAL, and set magnitude
                                    as zero         
                          1014     ;Arguments:             None.
                          1015     ;Return Values:         none.
                          1016     ;Shared Variables:      none.
                          1017     ;Local Variables:       None.
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   19


LOC  OBJ                  LINE     SOURCE

                          1018     ;Global Variables:      None.                   
                          1019     ;Input:                 None.
                          1020     ;Output:                None.
                          1021     ;Registers Used:        none.
                          1022     ;Stack Depth:           none.
                          1023     ;Known Bugs:            None.
                          1024     ;Data Structures:       None.
                          1025     ;Error Handling:        None
                          1026     ;Algorithms:            None.
                          1027     ;Limitations:           None.
                          1028     ;Author:                        Anjian Wu
                          1029     ;Author:                        Anjian Wu
                          1030     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1031     ;                   12-08-2013: Documentation - Anjian Wu
                          1032     ;                   12-11-2013: Fixed bug with prescaler and args passing to display 
                                   - Anjian Wu
                          1033     ;------------------------------------------------------------------------------
0289                      1034     ToggleHandler   PROC    NEAR
                          1035         
0289 60                   1036         PUSHA                               ; Save all Regs
028A                      1037     TogglePrescale:
028A FF062700       R     1038         INC     TogglePreScaler            ;
028E 813E2700E803   R     1039         CMP     TogglePreScaler, PRESCALE  ;
0294 7C7B                 1040         JL      ToggleDone                  ; Not yet
                          1041         ;JGE     TogglePrescalePass          ;
0296                      1042     TogglePrescalePass:    
0296 C70627000000   R     1043         MOV     TogglePreScaler, zero      ;
                          1044     
029C 833E25000A     R     1045         CMP     ToggleCTR, numOfStatus      ;
02A1 7C06                 1046         JL      ToggleMux
                          1047         ;JGE    ToggleMuxReset
02A3                      1048     ToggleMuxReset:
02A3 C70625000000   R     1049         MOV     ToggleCTR, zero             ;
                          1050         ;JMP    ToggleMux                   ;
02A9                      1051     ToggleMux:
02A9 8B1E2500       R     1052         MOV     BX, ToggleCTR               ;
02AD D1E3                 1053         SHL     BX, 1                       ;
02AF 2EFFA74703     R     1054         JMP     CS:Toggle_JMP_Table[BX]     ;
                          1055         
02B4                      1056     T_Action_Val:    
02B4 A11E00         R     1057         MOV     AX, Action_Buff_PTR
                          1058 +1      
02B7 8BF0                 1059 +2      MOV     SI, AX          ; Prepare for display at SI
02B9 8CC8                 1060 +2      MOV     AX, CS          ;
02BB 8EC0                 1061 +2      MOV     ES, AX          ; String is in code segment
                          1062 +1                  ;
02BD EB4B90               1063         JMP     ToggleSet
                          1064         
02C0                      1065     T_Speed_Val:    ;3
02C0 8D060A00       R     1066         LEA     AX, Spd_Buffer
                          1067 +1      
02C4 8BF0                 1068 +2      MOV     SI, AX          ; Prepare for display at SI
02C6 8CD8                 1069 +2      MOV     AX, DS          ;
02C8 8EC0                 1070 +2      MOV     ES, AX          ; String is in code segment
                          1071 +1                  ;
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   20


LOC  OBJ                  LINE     SOURCE

02CA EB3E90               1072         JMP     ToggleSet
                          1073         
02CD                      1074     T_Angle_Val:        ;5
02CD 8D060000       R     1075         LEA     AX, Dir_Buffer
                          1076 +1      
02D1 8BF0                 1077 +2      MOV     SI, AX          ; Prepare for display at SI
02D3 8CD8                 1078 +2      MOV     AX, DS          ;
02D5 8EC0                 1079 +2      MOV     ES, AX          ; String is in code segment
                          1080 +1                  ;
02D7 EB3190               1081         JMP     ToggleSet
                          1082         
02DA                      1083     T_Error_Val:        ;7
02DA A12000         R     1084         MOV     AX, Error_Buff_PTR
                          1085 +1      
02DD 8BF0                 1086 +2      MOV     SI, AX          ; Prepare for display at SI
02DF 8CC8                 1087 +2      MOV     AX, CS          ;
02E1 8EC0                 1088 +2      MOV     ES, AX          ; String is in code segment
                          1089 +1                  ;
02E3 EB2590               1090         JMP     ToggleSet
                          1091         
02E6                      1092     T_R_Error_Val:
02E6 8D061400       R     1093         LEA     AX, Rbt_error_Buff           ;
                          1094 +1      
02EA 8BF0                 1095 +2      MOV     SI, AX          ; Prepare for display at SI
02EC 8CD8                 1096 +2      MOV     AX, DS          ;
02EE 8EC0                 1097 +2      MOV     ES, AX          ; String is in code segment
                          1098 +1                  ;
02F0 EB1890               1099         JMP     ToggleSet
                          1100         
02F3                      1101     T_Label:
02F3 A12500         R     1102         MOV     AX, ToggleCTR                ;
02F6 D1E8                 1103         SHR     AX, bit_size                ; All 'labels' are EVEN indexed, thus we can
                          1104                                             ; map the JMP table offset to the string offs
                                   et
                          1105                                             ; with just a simple SHR 1.
                          1106 +1      
02F8 33DB                 1107 +1      XOR     BX, BX                  ; Clear counter
02FA B309                 1108 +2          MOV             BL, Display_SIZE+1          ; Let counter be CMD_LENGTH
02FC F6E3                 1109 +1          MUL             BL                      ; Rel pinter = CMD_LENGTH * typeindex
02FE 051A0390       R     1110 +2      ADD     AX, OFFSET( Toggle_Label_Table)  ;
                          1111 +1  ; Calc ABS address into AX
                          1112         
0302 8BF0                 1113         MOV     SI, AX                      ; Need abs address in SI
                          1114         
                          1115 +1      
0304 8BF0                 1116 +2      MOV     SI, AX          ; Prepare for display at SI
0306 8CC8                 1117 +2      MOV     AX, CS          ;
0308 8EC0                 1118 +2      MOV     ES, AX          ; String is in code segment
                          1119 +1                 ; String in CS
                          1120         ;JMP     ToggleSet
                          1121         
030A                      1122     ToggleSet:
030A E80000         E     1123         CALL    Display                     ; Pass ES:SI to be displayed
                          1124         
030D FF062500       R     1125         INC     ToggleCTR                   ;
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   21


LOC  OBJ                  LINE     SOURCE

                          1126         
0311                      1127     ToggleDone:; Send out EOI as usual
                          1128     
0311 BA22FF               1129         MOV     DX, INTCtrlrEOI             ;All timers share same EOI
0314 B80800               1130         MOV     AX, TimerEOI
0317 EE                   1131         OUT     DX, AL                      ; Send out Timer EOI
                          1132         
                          1133         
0318 61                   1134         POPA                                ; Restore all Regs
                          1135         
0319 CF                   1136         IRET
                          1137         
                          1138     ToggleHandler   ENDP
                          1139     
                          1140     
031A                      1141     Toggle_Label_Table          LABEL       BYTE
                          1142     
                          1143                               
031A 416374696F6E3A       1144             DB              'Action:?', ASCII_NULL      ;0
     3F
0322 00
0323 53706565643A20       1145             DB              'Speed: ?', ASCII_NULL      ;1
     3F
032B 00
032C 416E676C653A20       1146             DB              'Angle: ?', ASCII_NULL      ;2
     3F
0334 00
0335 4572726F72733A       1147             DB              'Errors:?', ASCII_NULL      ;3
     3F
033D 00
033E 526F626F743A20       1148             DB              'Robot: ?', ASCII_NULL      ;4
     3F
0346 00
                          1149     
                          1150     
0347                      1151     Toggle_JMP_Table            LABEL       WORD
                          1152                                         
0347 F302           R     1153             DW              T_Label             ;0 - Action Label
0349 B402           R     1154             DW              T_Action_Val    ;1
034B F302           R     1155             DW              T_Label             ;2 - Speed Label
034D C002           R     1156             DW              T_Speed_Val     ;3
034F F302           R     1157             DW              T_Label             ;4 - Angle Label
0351 CD02           R     1158             DW              T_Angle_Val         ;5
0353 F302           R     1159             DW              T_Label             ;6 - Error Label
0355 DA02           R     1160             DW              T_Error_Val         ;7
0357 F302           R     1161             DW              T_Label             ;8 - Robot Error Label
0359 E602           R     1162             DW              T_R_Error_Val   ;9    
                          1163         
                          1164     ;Procedure:                     ParseRemoteChar
                          1165     ;
                          1166     ;Description:           Used pass char in AX to grab NEXT token val and type, and use
                                   s
                          1167     ;                   that to calc the proper pointer to the function to be called
                          1168     ;                   by the state machine. The token TYPE is used to find the abs
                          1169     ;                   action function offset and the token TYPE is always passed as
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   22


LOC  OBJ                  LINE     SOURCE

                          1170     ;                   (AL) into the action function. The action function, however, may
                          1171     ;                   or may not use the passed token val. The next FSM state is also
                          1172     ;                   saved in a shared variable FSM_state for the next time.
                          1173     ;
                          1174     ;                   If the state machine returns to ST_INITIAL then it also resets 
                          1175     ;                   the parser variables. If there is an error detected after the act
                                   ion
                          1176     ;                   function is call, then the function will also reset the parser 
                          1177     ;                   variables.
                          1178     ;                   
                          1179     ;                   This function always returns error status in AX. See 'Error Handl
                                   ing'.
                          1180     ;
                          1181     ;Operation:         * Clear Errorflag, grab next token val and key using GetTokenType
                                   Val.
                          1182     ;                   * offset = (NUM_TOKEN_TYPES * FSM_State + token type)* SIZE TRANS
                                   ITION_ENTRY
                          1183     ;                   * Call Function (Action) using offset, passing token val in AL
                          1184     ;                   * If Errorflag is true, store FSM_state and FSM_ERROR bytes into 
                                   AX for return
                          1185     ;                       * Call ParseReset
                          1186     ;                   * Else, grab nextstate using offset, store the next state into FS
                                   M_state
                          1187     ;                       * If next state is ST_INITIAL, then Call ParseReset
                          1188     ;                   * Return Errorflag in AX 
                          1189     ;
                          1190     ;Arguments:             AL   -> The next char to be parsed
                          1191     ;
                          1192     ;Return Values:         AX - > The errorflag
                          1193     ;
                          1194     ;Shared Variables:      Errorflag (WRITE/READ)
                          1195     ;                   FSM_state (READ/WRITE)
                          1196     ;
                          1197     ;Local Variables:       AL      -   token val, char
                          1198     ;                   AH      -   token type
                          1199     ;                   AX      -   error, char
                          1200     ;                   BX      -   table offset
                          1201     ;                   DH      -   save token type
                          1202     ;                   CH      -   save token val
                          1203     ;                   
                          1204     ;                   
                          1205     ;Global Variables:      None.                                   
                          1206     ;Input:                 none.
                          1207     ;Output:                none.
                          1208     ;Registers Used:        AX, BX, CH, DH
                          1209     ;Stack Depth:           3 words
                          1210     ;Known Bugs:            None.
                          1211     ;Data Structures:       None.
                          1212     ;Error Handling:        Errors come in two ways:
                          1213     ;                   FSM TYPE 1. Symbol/Char error -> NEXTSTATE already is ST_INITIAL
                          1214     ;                   FSM TYPE 2. Value error  -> NEXTSTATE may or may not be ST_INITIA
                                   L
                          1215     ;                   These errors are treated the same in that the return value AX
                          1216     ;                   will contain the FSM_State in AL and the FSM_ERROR key in AH. The
                                    FSM
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   23


LOC  OBJ                  LINE     SOURCE

                          1217     ;                   will also RESET immediately if error is seen.
                          1218     ;
                          1219     ;Algorithms:        Call Table FSM look up. Table offset = NUM_TOKEN_TYPES * FSM_Stat
                                   e + token type
                          1220     ;Limitations:           None.
                          1221     ;Author:                        Anjian Wu
                          1222     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1223     ;                                       12-04-2013: Modified from Glen's floatptd.asm
                                    - Anjian Wu 
                          1224     ;                   12-08-2013: Working - Anjian Wu
                          1225     ;                   12-10-2013: Adapted for Remote - Anjian Wu
                          1226     ;------------------------------------------------------------------------------
                          1227     
035B                      1228     ParseRemoteChar         PROC    NEAR
                          1229     
035B                      1230     ParseSerialInit:
                          1231     
035B 52                   1232         PUSH        DX       ; Save all Regs
035C 53                   1233             PUSH    BX
035D 51                   1234             PUSH    CX              
                          1235             
035E C70622000000   R     1236         MOV Errorflag, FALSE            ;Assume no errors
                          1237             
0364                      1238     ParseGrabTokens:        
0364 E84600               1239             CALL    GetTokenTypeVal         ; Grab next token key and val
0367 8AF4                 1240             MOV             DH, AH                      ; Save token type
0369 8AE8                 1241             MOV             CH, AL                      ; Save token val
                          1242             
036B                      1243     ParseComputeTrans:                      ;figure out what transition to do
036B B006                 1244             MOV             AL, NUM_TOKEN_TYPES     ;find row in the table
036D F6262400       R     1245             MUL             FSM_State           ;Get to current FSM state
0371 02C6                 1246             ADD             AL, DH                  ;Calc abs transition inside that stat
                                   e
0373 80D400               1247             ADC             AH, zero                     ;propagate low byte carry into h
                                   igh byte
                          1248     
0376 6BD80390             1249             IMUL    BX, AX, SIZE TRANSITION_ENTRY   ;now convert to table offset
                          1250     
037A                      1251     ParseDoActions:                             ;do the actions (don't affect regs)
                          1252     
037A 8AC5                 1253             MOV             AL, CH                      ;Pass Token Val (not always used 
                                   by ACTION)
037C 2EFF973C04     R     1254             CALL    CS:RemoteFSMTable[BX].ACTION    ;do the actions
                          1255     
0381                      1256     ParseCheckError:
0381 833E220001     R     1257         CMP     Errorflag, TRUE     ; Was there an error from the FSM action?
                          1258                                     ; Errors can come in two ways
                          1259                                     ; FSM TYPE 1. Symbol/Char error -> NEXTSTATE already 
                                   is ST_INITIAL
                          1260                                     ; FSM TYPE 2. Value error  -> NEXTSTATE may or may no
                                   t be ST_INITIAL
0386 750B                 1261         JNE     ParseNextTransition ; Nope, so grab the next one
                          1262         ;JE     ParseRecordError    ; There was an error
                          1263         
0388                      1264     ParseRecordError:
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   24


LOC  OBJ                  LINE     SOURCE

0388 A02400         R     1265         MOV     AL, FSM_State       ; Store the current state before it is updated 
                          1266                                     ; since it where there that error was found
038B B404                 1267         MOV     AH, FSM_ERROR       ; Indicate that this was an FSM error (This
                          1268                                     ; differentiates a value of FALSE vs. error in FSM_St
                                   ate = 0)
                          1269                                     
038D A32200         R     1270         MOV     Errorflag, AX       ; Store that state as an error-type
0390 EB1190               1271         JMP     ParseNeedReset      ; We just got error, thus immediately exit this cmd p
                                   ath
                          1272                                     ; and go back to ST_INITIAL to wait for VALID next cm
                                   d.
                          1273                                     ; * Notice this IS redundant for FSM TYPE 1 errors si
                                   nce nxt state
                          1274                                     ;   is already ST_INITIAL, however
                          1275                                     ;   we treat all errors the same to simplify code.
                          1276         
0393                      1277     ParseNextTransition:                    ;now go to next state
                          1278     
0393 2E8A8F3B04     R     1279             MOV             CL, CS:RemoteFSMTable[BX].NEXTSTATE
0398 880E2400       R     1280         MOV     FSM_state, CL   ; We need this nextstate stored for next time.
                          1281         
039C 803E240000     R     1282             CMP             FSM_state, ST_INITIAL   ; Did the state machine restart?
03A1 7503                 1283             JNE             ParseDone           ; If not then just continue.
                          1284             ;JE             ParseNeedReset  ; Else we need to reset some parser variables
03A3                      1285     ParseNeedReset:
03A3 E81A00               1286             CALL    RemoteParseReset; Reset parser variables (FSM_STATE, magnitude, sign)
                          1287         ;JMP    ParseDone       ;
03A6                      1288     ParseDone:
03A6 A12200         R     1289         MOV     AX, Errorflag       ; Restore the error (if any) back into AX for return
                          1290                                     ; AH - whether or not error happened, AL - FSM_state 
                                   (if error)
                          1291         
03A9 59                   1292             POP  CX
03AA 5B                   1293             POP      BX
03AB 5A                   1294             POP  DX                     ; Restore used regs
                          1295             
                          1296         
03AC C3                   1297         RET
                          1298         
                          1299     ParseRemoteChar ENDP
                          1300     
                          1301     ; GetTokenTypeVal
                          1302     ;
                          1303     ; Description:      This procedure returns the token class and token value for
                          1304     ;                   the passed character.  The character is truncated to
                          1305     ;                   7-bits because the table only has 127 ASCII chars inside.
                          1306     ;
                          1307     ; Operation:        Looks up the passed character in two tables, one for token
                          1308     ;                   types or classes, the other for token values.
                          1309     ;
                          1310     ; Arguments:        AL - character to look up.
                          1311     ; Return Value:     AL - token value for the character.
                          1312     ;                   AH - token type or class for the character.
                          1313     ;
                          1314     ; Local Variables:  BX - table pointer, points at lookup tables.
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   25


LOC  OBJ                  LINE     SOURCE

                          1315     ; Shared Variables: None.
                          1316     ; Global Variables: None.
                          1317     ;
                          1318     ; Input:            None.
                          1319     ; Output:           None.
                          1320     ;
                          1321     ; Error Handling:   None.
                          1322     ;
                          1323     ; Algorithms:       Table lookup.
                          1324     ; Data Structures:  Two tables, one containing token values and the other
                          1325     ;                   containing token types.
                          1326     ;
                          1327     ; Registers Used:   AX, BX.
                          1328     ; Stack Depth:      0 words.
                          1329     ;
                          1330     ; Author:           Anjian Wu
                          1331     ; Last Modified:    12-02-2013: Adapted from Glen's floatptd.asm - Anjian Wu :)
                          1332     ;                   12-08-2013: Add documentation to show understanding - Anjian Wu
                          1333     
                          1334     
03AD                      1335     GetTokenTypeVal PROC    NEAR
                          1336     
                          1337     
03AD                      1338     InitGetFPToken:                         ;setup for lookups
03AD 247F                 1339             AND     AL, TOKEN_MASK          ;strip unused bits (high bit) ONLY 127 CHARS 
                                   IN TABLE
03AF 8AE0                 1340             MOV     AH, AL                      ;and preserve value in AH
                          1341     
                          1342     ; TokenTypeTable and TokenValueTable's values are paired/mapped one to one
                          1343     
03B1                      1344     TokenTypeLookup:                        ;get the token type
03B1 BB830490       R     1345         MOV     BX, OFFSET(TokenTypeTable)  ;BX points at table
03B5 2ED7                 1346             XLAT    CS:TokenTypeTable               ;have token type in AL
03B7 86E0                 1347             XCHG    AH, AL                              ;token type in AH, character in A
                                   L
                          1348     
03B9                      1349     TokenValueLookup:                                    ;get the token value
03B9 BB030590       R     1350         MOV     BX, OFFSET(TokenValueTable)  ;BX points at table
03BD 2ED7                 1351             XLAT    CS:TokenValueTable               ;have token value in AL
                          1352     
                          1353     
03BF                      1354     EndGetFPToken:                               ;done looking up type and value
03BF C3                   1355             RET
                          1356     
                          1357     
                          1358     GetTokenTypeVal ENDP
                          1359     
                          1360     
                          1361     ;Function:                      RemoteParseReset
                          1362     ;Description:           Resets all Parser variables to initial state, zero magnitude,
                                    and pos sign     
                          1363     ;Operation:         * Set sign as POS, set FSM_state as ST_INITIAL, and set magnitude
                                    as zero         
                          1364     ;Arguments:             None.
                          1365     ;Return Values:         none.
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   26


LOC  OBJ                  LINE     SOURCE

                          1366     ;Shared Variables:      none.
                          1367     ;Local Variables:       None.
                          1368     ;Global Variables:      None.                   
                          1369     ;Input:                 None.
                          1370     ;Output:                None.
                          1371     ;Registers Used:        none.
                          1372     ;Stack Depth:           none.
                          1373     ;Known Bugs:            None.
                          1374     ;Data Structures:       None.
                          1375     ;Error Handling:        None
                          1376     ;Algorithms:            None.
                          1377     ;Limitations:           None.
                          1378     ;Author:                        Anjian Wu
                          1379     ;Author:                        Anjian Wu
                          1380     ;History:                       12-10-2013: Created - Anjian Wu
                          1381     ;------------------------------------------------------------------------------
03C0                      1382     RemoteParseReset  PROC    NEAR
                          1383                 
03C0 C60609000090   R     1384         MOV     Dir_PTR, zero               ; Set default val as positive
03C6 C60613000090   R     1385         MOV     Spd_PTR, zero               ; Set Default FSM machine state
03CC C6061D000090   R     1386         MOV     Rbt_error_Ptr, zero           ;
03D2 C60624000090   R     1387         MOV     FSM_state, ST_INITIAL       ;
03D8 C3                   1388             RET
                          1389             
                          1390     RemoteParseReset  ENDP                   
                          1391     
                          1392     ;Procedure:                     SetError
                          1393     ;
                          1394     ;Description:           An error has occurred, so set the error flag true.
                          1395     ;
                          1396     ;Operation:         * Errorflag = TRUE
                          1397     ;        
                          1398     ;Arguments:             None.
                          1399     ;Return Values:         none.
                          1400     ;Shared Variables:      Errorflag(write)
                          1401     ;Local Variables:       None.
                          1402     ;Global Variables:      None.                   
                          1403     ;Input:                 None.
                          1404     ;Output:                None.
                          1405     ;Registers Used:        AH, AL
                          1406     ;Stack Depth:           none.
                          1407     ;Known Bugs:            None.
                          1408     ;Data Structures:       None.
                          1409     ;Error Handling:        None
                          1410     ;Algorithms:            None.
                          1411     ;Limitations:           None.
                          1412     ;Author:                        Anjian Wu
                          1413     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1414     ;                   12-08-2013: Documentation - Anjian Wu
                          1415     ;------------------------------------------------------------------------------
03D9                      1416     SetError        PROC    NEAR
                          1417     
03D9 C70622000100   R     1418         MOV     Errorflag, TRUE     ; An error has occurred
                          1419     
03DF C3                   1420         RET
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   27


LOC  OBJ                  LINE     SOURCE

                          1421         
                          1422     SetError ENDP
                          1423     
                          1424     ;Procedure:                     no_op
                          1425     ;
                          1426     ;Description:           Just return (stub function)
                          1427     ;        
                          1428     ;Arguments:             None.
                          1429     ;Return Values:         none.
                          1430     ;Shared Variables:      none.
                          1431     ;Local Variables:       None.
                          1432     ;Global Variables:      None.                   
                          1433     ;Input:                 None.
                          1434     ;Output:                None.
                          1435     ;Registers Used:        None.
                          1436     ;Stack Depth:           none.
                          1437     ;Known Bugs:            None.
                          1438     ;Data Structures:       None.
                          1439     ;Error Handling:        None
                          1440     ;Algorithms:            None.
                          1441     ;Limitations:           None.
                          1442     ;Author:                        Anjian Wu
                          1443     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1444     ;                   12-08-2013: Documentation - Anjian Wu
                          1445     ;------------------------------------------------------------------------------
03E0                      1446     no_op        PROC    NEAR
                          1447     
03E0 C3                   1448         RET
                          1449         
                          1450     no_op   ENDP
                          1451     
                          1452     ;Procedure:                     AddRobotErrorChar
                          1453     ;
                          1454     ;Description:           Turns the laser ON
                          1455     ;
                          1456     ;Operation:        
                          1457     ;                
                          1458     ;Arguments:         None.
                          1459     ;Return Values:         None.
                          1460     ;Shared Variables:      None.
                          1461     ;Local Variables:       None.
                          1462     ;Global Variables:      None.                   
                          1463     ;Input:                 None.
                          1464     ;Output:                None.
                          1465     ;Registers Used:        None.
                          1466     ;Stack Depth:           none.
                          1467     ;Known Bugs:            None.
                          1468     ;Data Structures:       None.
                          1469     ;Error Handling:        None.
                          1470     ;Algorithms:            None.
                          1471     ;Limitations:           None.
                          1472     ;Author:                        Anjian Wu
                          1473     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1474     ;                   12-04-2013: Initial assembly - Anjian Wu
                          1475     ;                   12-08-2013: Documentation - Anjian Wu
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   28


LOC  OBJ                  LINE     SOURCE

                          1476     ;------------------------------------------------------------------------------
03E1                      1477     AddRobotErrorChar    PROC    NEAR
                          1478     
03E1 53                   1479         PUSH    BX
                          1480     
03E2 803E1D0008     R     1481         CMP     Rbt_error_Ptr, Display_SIZE    ;
                          1482         
03E7 7F11                 1483         JG      AddRobotErrorCharNoNo          ;
                          1484         
03E9 32FF                 1485         XOR     BH, BH                  ;
03EB 8A1E1D00       R     1486         MOV     BL, Rbt_error_Ptr             ;
                          1487      
03EF 88871400       R     1488         MOV     Rbt_error_Buff[BX], AL     ;
                          1489         
03F3 FE061D00       R     1490         INC     Rbt_error_Ptr                 ;
                          1491         
03F7 EB0490               1492         JMP     AddRobotErrorCharDone
03FA                      1493     AddRobotErrorCharNoNo:
                          1494         
03FA E8DCFF               1495         CALL    SetError                        ;
                          1496        
03FD                      1497     AddRobotErrorCharDone:
03FD 5B                   1498         POP     BX                      ;
                          1499     
03FE C3                   1500         RET                     ;
                          1501     
                          1502     AddRobotErrorChar    ENDP
                          1503     
                          1504     ;Procedure:                     AddDirChar
                          1505     ;
                          1506     ;Description:           Turns the laser ON
                          1507     ;
                          1508     ;Operation:         * SetLaser(TRUE)
                          1509     ;                
                          1510     ;Arguments:         None.
                          1511     ;Return Values:         None.
                          1512     ;Shared Variables:      None.
                          1513     ;Local Variables:       None.
                          1514     ;Global Variables:      None.                   
                          1515     ;Input:                 None.
                          1516     ;Output:                None.
                          1517     ;Registers Used:        None.
                          1518     ;Stack Depth:           none.
                          1519     ;Known Bugs:            None.
                          1520     ;Data Structures:       None.
                          1521     ;Error Handling:        None.
                          1522     ;Algorithms:            None.
                          1523     ;Limitations:           None.
                          1524     ;Author:                        Anjian Wu
                          1525     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1526     ;                   12-04-2013: Initial assembly - Anjian Wu
                          1527     ;                   12-08-2013: Documentation - Anjian Wu
                          1528     ;------------------------------------------------------------------------------
03FF                      1529     AddDirChar    PROC    NEAR
                          1530     
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   29


LOC  OBJ                  LINE     SOURCE

03FF 53                   1531         PUSH    BX
                          1532     
0400 803E090008     R     1533         CMP     Dir_Ptr, Display_SIZE    ;
                          1534         
0405 7F11                 1535         JG      AddDirCharNoNo          ;
                          1536         
0407 32FF                 1537         XOR     BH, BH                  ;
0409 8A1E0900       R     1538         MOV     BL, Dir_PTR             ;
                          1539      
040D 88870000       R     1540         MOV     Dir_Buffer[BX], AL     ;
                          1541         
0411 FE060900       R     1542         INC     Dir_PTR                 ;
                          1543         
0415 EB0490               1544         JMP     AddDirCharDone
                          1545         
0418                      1546     AddDirCharNoNo:
                          1547         
0418 E8BEFF               1548         CALL    SetError                        ;   
                          1549         
041B                      1550     AddDirCharDone:
041B 5B                   1551         POP     BX                      ;
                          1552     
041C C3                   1553         RET                     ;
                          1554     
                          1555     AddDirChar    ENDP
                          1556     
                          1557     ;Procedure:                     AddSpeedChar
                          1558     ;
                          1559     ;Description:           Turns the laser OFF
                          1560     ;
                          1561     ;Operation:         * SetLaser(FALSE)  
                          1562     ;Arguments:         None.
                          1563     ;Return Values:         None.
                          1564     ;Shared Variables:      None.
                          1565     ;Local Variables:       None.
                          1566     ;Global Variables:      None.                   
                          1567     ;Input:                 None.
                          1568     ;Output:                None.
                          1569     ;Registers Used:        None.
                          1570     ;Stack Depth:           none.
                          1571     ;Known Bugs:            None.
                          1572     ;Data Structures:       None.
                          1573     ;Error Handling:        None.
                          1574     ;Algorithms:            None.
                          1575     ;Limitations:           None.
                          1576     ;Author:                        Anjian Wu
                          1577     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1578     ;                   12-04-2013: Initial assembly - Anjian Wu
                          1579     ;                   12-08-2013: Documentation - Anjian Wu
                          1580     ;------------------------------------------------------------------------------
041D                      1581     AddSpeedChar    PROC    NEAR
                          1582     
041D 53                   1583         PUSH    BX
                          1584     
041E 803E130008     R     1585         CMP     Spd_Ptr, Display_SIZE    ;
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   30


LOC  OBJ                  LINE     SOURCE

                          1586         
0423 7F11                 1587         JG      AddSpeedCharNoNo          ;
                          1588         
0425 32FF                 1589         XOR     BH, BH                  ;
0427 8A1E1300       R     1590         MOV     BL, Spd_Ptr             ;
                          1591      
042B 88870A00       R     1592         MOV     Spd_Buffer[BX], AL     ;
                          1593         
042F FE061300       R     1594         INC     Spd_Ptr                 ;
                          1595     
0433 EB0490               1596         JMP     AddSpeedCharDone
                          1597         
0436                      1598     AddSpeedCharNoNo:
                          1599         
0436 E8A0FF               1600         CALL    SetError                        ;       
                          1601      
0439                      1602     AddSpeedCharDone:
                          1603     
0439 5B                   1604         POP     BX
                          1605         
043A C3                   1606         RET                     ;
                          1607     
                          1608     AddSpeedChar    ENDP
                          1609     
                          1610     ; RemoteFSMTable
                          1611     ;
                          1612     ; Description:      This is the state transition table for the robot side.
                          1613     ;                   Each entry consists of the next state and actions for that
                          1614     ;                   transition.  The rows are associated with the current
                          1615     ;                   state and the columns with the input type.
                          1616     ;
                          1617     ; Author:           Anjian Wu
                          1618     ; Last Modified:    12-10-2013: Initial Version - Anjian Wu
                          1619     
                          1620     
----                      1621     TRANSITION_ENTRY        STRUC           ;structure used to define table
0000                      1622         NEXTSTATE   DB      ?               ;the next state for the transition
0001                      1623         ACTION      DW      ?               ;action for the transition
----                      1624     TRANSITION_ENTRY      ENDS
                          1625     
                          1626     
                          1627     ;define a macro to make table a little more readable
                          1628     ;macro just does an offset of the action routine entries to build the STRUC
                          1629     
                          1630     
                          1631     
043B                      1632     RemoteFSMTable  LABEL   TRANSITION_ENTRY
                          1633     
                          1634             ;Current State = ST_INITIAL: Waiting for status    
                          1635                                                 ;Input Token Type
                          1636 +1          
043B 01             R     1637 +2      TRANSITION_ENTRY< ST_SPEED, OFFSET( no_op) >
043C E003
                          1638 +1              ;TOKEN_S - Set Speed
                          1639 +1          
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   31


LOC  OBJ                  LINE     SOURCE

043E 02             R     1640 +2      TRANSITION_ENTRY< ST_DIR, OFFSET( no_op) >
043F E003
                          1641 +1                  ;TOKEN_D - Set Dir
                          1642 +1          
0441 03             R     1643 +2      TRANSITION_ENTRY< ST_Robot, OFFSET( no_op) >
0442 E003
                          1644 +1          ;TOKEN_R - Robot Error
                          1645 +1          
0444 00             R     1646 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0445 D903
                          1647 +1          ;TOKEN_NUM - A digit or ASCII_NULL
                          1648 +1          
0447 00             R     1649 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0448 D903
                          1650 +1          ;TOKEN_END - C Return
                          1651 +1          
044A 00             R     1652 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
044B D903
                          1653 +1          ;TOKEN_OTHER    
                          1654             
                          1655             ;Current State = ST_SPEED: Grab speed chars   
                          1656                                                 ;Input Token Type
                          1657 +1          
044D 00             R     1658 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
044E D903
                          1659 +1          ;TOKEN_S - Set Speed
                          1660 +1          
0450 00             R     1661 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0451 D903
                          1662 +1          ;TOKEN_D - Set Dir
                          1663 +1          
0453 00             R     1664 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0454 D903
                          1665 +1          ;TOKEN_R - Robot Error
                          1666 +1          
0456 01             R     1667 +2      TRANSITION_ENTRY< ST_SPEED, OFFSET( AddSpeedChar) >
0457 1D04
                          1668 +1   ;TOKEN_NUM - A digit
                          1669 +1          
0459 00             R     1670 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( no_op) >
045A E003
                          1671 +1              ;TOKEN_END - C Return
                          1672 +1          
045C 00             R     1673 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
045D D903
                          1674 +1          ;TOKEN_OTHER    
                          1675             
                          1676             ;Current State = ST_DIR: Grab dir chars   
                          1677                                                 ;Input Token Type
                          1678 +1          
045F 00             R     1679 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0460 D903
                          1680 +1          ;TOKEN_S - Set Speed
                          1681 +1          
0462 00             R     1682 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   32


LOC  OBJ                  LINE     SOURCE

0463 D903
                          1683 +1          ;TOKEN_D - Set Dir
                          1684 +1          
0465 00             R     1685 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0466 D903
                          1686 +1          ;TOKEN_R - Robot Error
                          1687 +1          
0468 02             R     1688 +2      TRANSITION_ENTRY< ST_DIR, OFFSET( AddDirChar) >
0469 FF03
                          1689 +1              ;TOKEN_NUM - A digit or ASCII_NULL
                          1690 +1          
046B 00             R     1691 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( no_op) >
046C E003
                          1692 +1                  ;TOKEN_END - C Return
                          1693 +1          
046E 00             R     1694 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
046F D903
                          1695 +1          ;TOKEN_OTHER    
                          1696     
                          1697             ;Current State = ST_Robot: Grab robot error chars
                          1698                                                 ;Input Token Type
                          1699 +1          
0471 03             R     1700 +2      TRANSITION_ENTRY< ST_Robot, OFFSET( AddRobotErrorChar) >
0472 E103
                          1701 +1          ;TOKEN_S - Set Speed
                          1702 +1          
0474 03             R     1703 +2      TRANSITION_ENTRY< ST_Robot, OFFSET( AddRobotErrorChar) >
0475 E103
                          1704 +1          ;TOKEN_D - Set Dir
                          1705 +1          
0477 03             R     1706 +2      TRANSITION_ENTRY< ST_Robot, OFFSET( AddRobotErrorChar) >
0478 E103
                          1707 +1          ;TOKEN_R - Robot Error
                          1708 +1          
047A 03             R     1709 +2      TRANSITION_ENTRY< ST_Robot, OFFSET( AddRobotErrorChar) >
047B E103
                          1710 +1     ;TOKEN_NUM - A digit or ASCII_NULL
                          1711 +1          
047D 00             R     1712 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( no_op) >
047E E003
                          1713 +1                  ;TOKEN_END - C Return
                          1714 +1          
0480 03             R     1715 +2      TRANSITION_ENTRY< ST_Robot, OFFSET( AddRobotErrorChar) >
0481 E103
                          1716 +1          ;TOKEN_OTHER    
                          1717             
                          1718     ; Token Tables
                          1719     ;
                          1720     ; Description:      This creates the tables of token types and token values.
                          1721     ;                   Each entry corresponds to the token type and the token
                          1722     ;                   value for a character.  Macros are used to actually build
                          1723     ;                   two separate tables - TokenTypeTable for token types and
                          1724     ;                   TokenValueTable for token values.
                          1725     ;
                          1726     ; Author:           Anjian Wu
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   33


LOC  OBJ                  LINE     SOURCE

                          1727     ; Last Modified:    12-02-2013
                          1728     ; Last Modified:    12-05-2013: Just made Laser tokens return True/False - Anjian Wu
                          1729     
                          1730     
                          1731     ; token type table - uses first byte of macro table entry
                          1732     
                          1733     
0483                      1734     TokenTypeTable  LABEL   BYTE
                          1735 +1          
                          1736 +2          
0483 03                   1737 +3          DB      TOKEN_NUM
                          1738 +2          ;<null>  (end of string)
                          1739 +2          
0484 05                   1740 +3          DB      TOKEN_OTHER
                          1741 +2                  ;SOH
                          1742 +2          
0485 05                   1743 +3          DB      TOKEN_OTHER
                          1744 +2                  ;STX
                          1745 +2          
0486 05                   1746 +3          DB      TOKEN_OTHER
                          1747 +2                  ;ETX
                          1748 +2          
0487 05                   1749 +3          DB      TOKEN_OTHER
                          1750 +2                  ;EOT
                          1751 +2          
0488 05                   1752 +3          DB      TOKEN_OTHER
                          1753 +2                  ;ENQ
                          1754 +2          
0489 05                   1755 +3          DB      TOKEN_OTHER
                          1756 +2                  ;ACK
                          1757 +2          
048A 05                   1758 +3          DB      TOKEN_OTHER
                          1759 +2                  ;BEL
                          1760 +2          
048B 05                   1761 +3          DB      TOKEN_OTHER
                          1762 +2                  ;backspace
                          1763 +2          
048C 05                   1764 +3          DB      TOKEN_OTHER
                          1765 +2       ;TAB
                          1766 +2          
048D 05                   1767 +3          DB      TOKEN_OTHER
                          1768 +2          ;new line
                          1769 +2          
048E 05                   1770 +3          DB      TOKEN_OTHER
                          1771 +2          ;vertical tab
                          1772 +2          
048F 05                   1773 +3          DB      TOKEN_OTHER
                          1774 +2          ;form feed
                          1775 +2          
0490 04                   1776 +3          DB      TOKEN_END
                          1777 +2              ;carriage return
                          1778 +2          
0491 05                   1779 +3          DB      TOKEN_OTHER
                          1780 +2          ;SO
                          1781 +2          
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   34


LOC  OBJ                  LINE     SOURCE

0492 05                   1782 +3          DB      TOKEN_OTHER
                          1783 +2          ;SI
                          1784 +2          
0493 05                   1785 +3          DB      TOKEN_OTHER
                          1786 +2          ;DLE
                          1787 +2          
0494 05                   1788 +3          DB      TOKEN_OTHER
                          1789 +2          ;DC1
                          1790 +2          
0495 05                   1791 +3          DB      TOKEN_OTHER
                          1792 +2          ;DC2
                          1793 +2          
0496 05                   1794 +3          DB      TOKEN_OTHER
                          1795 +2          ;DC3
                          1796 +2          
0497 05                   1797 +3          DB      TOKEN_OTHER
                          1798 +2          ;DC4
                          1799 +2          
0498 05                   1800 +3          DB      TOKEN_OTHER
                          1801 +2          ;NAK
                          1802 +2          
0499 05                   1803 +3          DB      TOKEN_OTHER
                          1804 +2          ;SYN
                          1805 +2          
049A 05                   1806 +3          DB      TOKEN_OTHER
                          1807 +2          ;ETB
                          1808 +2          
049B 05                   1809 +3          DB      TOKEN_OTHER
                          1810 +2          ;CAN
                          1811 +2          
049C 05                   1812 +3          DB      TOKEN_OTHER
                          1813 +2          ;EM
                          1814 +2          
049D 05                   1815 +3          DB      TOKEN_OTHER
                          1816 +2          ;SUB
                          1817 +2          
049E 05                   1818 +3          DB      TOKEN_OTHER
                          1819 +2          ;escape
                          1820 +2          
049F 05                   1821 +3          DB      TOKEN_OTHER
                          1822 +2          ;FS
                          1823 +2          
04A0 05                   1824 +3          DB      TOKEN_OTHER
                          1825 +2          ;GS
                          1826 +2          
04A1 05                   1827 +3          DB      TOKEN_OTHER
                          1828 +2          ;AS
                          1829 +2          
04A2 05                   1830 +3          DB      TOKEN_OTHER
                          1831 +2          ;US
                          1832 +2          
04A3 05                   1833 +3          DB      TOKEN_OTHER
                          1834 +2          ;space
                          1835 +2          
04A4 05                   1836 +3          DB      TOKEN_OTHER
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   35


LOC  OBJ                  LINE     SOURCE

                          1837 +2          ;!
                          1838 +2          
04A5 05                   1839 +3          DB      TOKEN_OTHER
                          1840 +2          ;"
                          1841 +2          
04A6 05                   1842 +3          DB      TOKEN_OTHER
                          1843 +2          ;#
                          1844 +2          
04A7 05                   1845 +3          DB      TOKEN_OTHER
                          1846 +2          ;$
                          1847 +2          
04A8 05                   1848 +3          DB      TOKEN_OTHER
                          1849 +2          ;percent
                          1850 +2          
04A9 05                   1851 +3          DB      TOKEN_OTHER
                          1852 +2          ;&
                          1853 +2          
04AA 05                   1854 +3          DB      TOKEN_OTHER
                          1855 +2          ;'
                          1856 +2          
04AB 05                   1857 +3          DB      TOKEN_OTHER
                          1858 +2          ;open paren
                          1859 +2          
04AC 05                   1860 +3          DB      TOKEN_OTHER
                          1861 +2          ;close paren
                          1862 +2          
04AD 05                   1863 +3          DB      TOKEN_OTHER
                          1864 +2          ;*
                          1865 +2          
04AE 05                   1866 +3          DB      TOKEN_OTHER
                          1867 +2                  ;+  (positive sign)
                          1868 +2          
04AF 05                   1869 +3          DB      TOKEN_OTHER
                          1870 +2          ;,
                          1871 +2          
04B0 05                   1872 +3          DB      TOKEN_OTHER
                          1873 +2                  ;-  (negative sign)
                          1874 +2          
04B1 05                   1875 +3          DB      TOKEN_OTHER
                          1876 +2                  ;.  (decimal point)
                          1877 +2          
04B2 05                   1878 +3          DB      TOKEN_OTHER
                          1879 +2          ;/
                          1880 +2          
04B3 03                   1881 +3          DB      TOKEN_NUM
                          1882 +2              ;0  (digit)
                          1883 +2          
04B4 03                   1884 +3          DB      TOKEN_NUM
                          1885 +2                  ;1  (digit)
                          1886 +2          
04B5 03                   1887 +3          DB      TOKEN_NUM
                          1888 +2                  ;2  (digit)
                          1889 +2          
04B6 03                   1890 +3          DB      TOKEN_NUM
                          1891 +2                  ;3  (digit)
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   36


LOC  OBJ                  LINE     SOURCE

                          1892 +2          
04B7 03                   1893 +3          DB      TOKEN_NUM
                          1894 +2                  ;4  (digit)
                          1895 +2          
04B8 03                   1896 +3          DB      TOKEN_NUM
                          1897 +2                  ;5  (digit)
                          1898 +2          
04B9 03                   1899 +3          DB      TOKEN_NUM
                          1900 +2                  ;6  (digit)
                          1901 +2          
04BA 03                   1902 +3          DB      TOKEN_NUM
                          1903 +2                  ;7  (digit)
                          1904 +2          
04BB 03                   1905 +3          DB      TOKEN_NUM
                          1906 +2                  ;8  (digit)
                          1907 +2          
04BC 03                   1908 +3          DB      TOKEN_NUM
                          1909 +2                  ;9  (digit)
                          1910 +2          
04BD 05                   1911 +3          DB      TOKEN_OTHER
                          1912 +2          ;:
                          1913 +2          
04BE 05                   1914 +3          DB      TOKEN_OTHER
                          1915 +2          ;;
                          1916 +2          
04BF 05                   1917 +3          DB      TOKEN_OTHER
                          1918 +2          ;<
                          1919 +2          
04C0 05                   1920 +3          DB      TOKEN_OTHER
                          1921 +2          ;=
                          1922 +2          
04C1 05                   1923 +3          DB      TOKEN_OTHER
                          1924 +2          ;>
                          1925 +2          
04C2 05                   1926 +3          DB      TOKEN_OTHER
                          1927 +2          ;?
                          1928 +2          
04C3 05                   1929 +3          DB      TOKEN_OTHER
                          1930 +2          ;@
                          1931 +2          
04C4 05                   1932 +3          DB      TOKEN_OTHER
                          1933 +2          ;A
                          1934 +2          
04C5 05                   1935 +3          DB      TOKEN_OTHER
                          1936 +2          ;B
                          1937 +2          
04C6 05                   1938 +3          DB      TOKEN_OTHER
                          1939 +2          ;C
                          1940 +2          
04C7 01                   1941 +3          DB      TOKEN_D     
                          1942 +2          ;D
                          1943 +2          
04C8 05                   1944 +3          DB      TOKEN_OTHER     
                          1945 +2    ;E 
                          1946 +2          
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   37


LOC  OBJ                  LINE     SOURCE

04C9 05                   1947 +3          DB      TOKEN_OTHER     
                          1948 +2          ;F
                          1949 +2          
04CA 05                   1950 +3          DB      TOKEN_OTHER
                          1951 +2          ;G
                          1952 +2          
04CB 05                   1953 +3          DB      TOKEN_OTHER
                          1954 +2          ;H
                          1955 +2          
04CC 05                   1956 +3          DB      TOKEN_OTHER
                          1957 +2          ;I
                          1958 +2          
04CD 05                   1959 +3          DB      TOKEN_OTHER
                          1960 +2          ;J
                          1961 +2          
04CE 05                   1962 +3          DB      TOKEN_OTHER
                          1963 +2          ;K
                          1964 +2          
04CF 05                   1965 +3          DB      TOKEN_OTHER
                          1966 +2          ;L
                          1967 +2          
04D0 05                   1968 +3          DB      TOKEN_OTHER
                          1969 +2          ;M
                          1970 +2          
04D1 05                   1971 +3          DB      TOKEN_OTHER
                          1972 +2          ;N
                          1973 +2          
04D2 05                   1974 +3          DB      TOKEN_OTHER 
                          1975 +2          ;O
                          1976 +2          
04D3 05                   1977 +3          DB      TOKEN_OTHER
                          1978 +2          ;P
                          1979 +2          
04D4 05                   1980 +3          DB      TOKEN_OTHER
                          1981 +2          ;Q
                          1982 +2          
04D5 02                   1983 +3          DB      TOKEN_R
                          1984 +2          ;R
                          1985 +2          
04D6 00                   1986 +3          DB      TOKEN_S     
                          1987 +2          ;S
                          1988 +2          
04D7 05                   1989 +3          DB      TOKEN_OTHER
                          1990 +2          ;T
                          1991 +2          
04D8 05                   1992 +3          DB      TOKEN_OTHER
                          1993 +2          ;U
                          1994 +2          
04D9 05                   1995 +3          DB      TOKEN_OTHER
                          1996 +2              ;V
                          1997 +2          
04DA 05                   1998 +3          DB      TOKEN_OTHER
                          1999 +2          ;W
                          2000 +2          
04DB 05                   2001 +3          DB      TOKEN_OTHER
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   38


LOC  OBJ                  LINE     SOURCE

                          2002 +2          ;X
                          2003 +2          
04DC 05                   2004 +3          DB      TOKEN_OTHER
                          2005 +2          ;Y
                          2006 +2          
04DD 05                   2007 +3          DB      TOKEN_OTHER
                          2008 +2          ;Z
                          2009 +2          
04DE 05                   2010 +3          DB      TOKEN_OTHER
                          2011 +2          ;[
                          2012 +2          
04DF 05                   2013 +3          DB      TOKEN_OTHER
                          2014 +2          ;\
                          2015 +2          
04E0 05                   2016 +3          DB      TOKEN_OTHER
                          2017 +2          ;]
                          2018 +2          
04E1 05                   2019 +3          DB      TOKEN_OTHER
                          2020 +2          ;^
                          2021 +2          
04E2 05                   2022 +3          DB      TOKEN_OTHER
                          2023 +2          ;_
                          2024 +2          
04E3 05                   2025 +3          DB      TOKEN_OTHER
                          2026 +2          ;`
                          2027 +2          
04E4 05                   2028 +3          DB      TOKEN_OTHER
                          2029 +2          ;a
                          2030 +2          
04E5 05                   2031 +3          DB      TOKEN_OTHER
                          2032 +2          ;b
                          2033 +2          
04E6 05                   2034 +3          DB      TOKEN_OTHER
                          2035 +2          ;c
                          2036 +2          
04E7 01                   2037 +3          DB      TOKEN_D     
                          2038 +2          ;d
                          2039 +2          
04E8 05                   2040 +3          DB      TOKEN_OTHER     
                          2041 +2          ;e  
                          2042 +2          
04E9 05                   2043 +3          DB      TOKEN_OTHER     
                          2044 +2          ;f
                          2045 +2          
04EA 05                   2046 +3          DB      TOKEN_OTHER 
                          2047 +2          ;g
                          2048 +2          
04EB 05                   2049 +3          DB      TOKEN_OTHER 
                          2050 +2          ;h
                          2051 +2          
04EC 05                   2052 +3          DB      TOKEN_OTHER 
                          2053 +2          ;i
                          2054 +2          
04ED 05                   2055 +3          DB      TOKEN_OTHER 
                          2056 +2          ;j
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   39


LOC  OBJ                  LINE     SOURCE

                          2057 +2          
04EE 05                   2058 +3          DB      TOKEN_OTHER 
                          2059 +2          ;k
                          2060 +2          
04EF 05                   2061 +3          DB      TOKEN_OTHER 
                          2062 +2          ;l
                          2063 +2          
04F0 05                   2064 +3          DB      TOKEN_OTHER 
                          2065 +2          ;m
                          2066 +2          
04F1 05                   2067 +3          DB      TOKEN_OTHER 
                          2068 +2          ;n
                          2069 +2          
04F2 05                   2070 +3          DB      TOKEN_OTHER     
                          2071 +2          ;o
                          2072 +2          
04F3 05                   2073 +3          DB      TOKEN_OTHER 
                          2074 +2          ;p
                          2075 +2          
04F4 05                   2076 +3          DB      TOKEN_OTHER 
                          2077 +2          ;q
                          2078 +2          
04F5 02                   2079 +3          DB      TOKEN_R 
                          2080 +2          ;r
                          2081 +2          
04F6 00                   2082 +3          DB      TOKEN_S     
                          2083 +2          ;s
                          2084 +2          
04F7 05                   2085 +3          DB      TOKEN_OTHER 
                          2086 +2          ;t
                          2087 +2          
04F8 05                   2088 +3          DB      TOKEN_OTHER 
                          2089 +2          ;u
                          2090 +2          
04F9 05                   2091 +3          DB      TOKEN_OTHER     
                          2092 +2          ;v
                          2093 +2          
04FA 05                   2094 +3          DB      TOKEN_OTHER 
                          2095 +2          ;w
                          2096 +2          
04FB 05                   2097 +3          DB      TOKEN_OTHER 
                          2098 +2          ;x
                          2099 +2          
04FC 05                   2100 +3          DB      TOKEN_OTHER 
                          2101 +2          ;y
                          2102 +2          
04FD 05                   2103 +3          DB      TOKEN_OTHER 
                          2104 +2          ;z
                          2105 +2          
04FE 05                   2106 +3          DB      TOKEN_OTHER 
                          2107 +2          ;{
                          2108 +2          
04FF 05                   2109 +3          DB      TOKEN_OTHER 
                          2110 +2          ;|
                          2111 +2          
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   40


LOC  OBJ                  LINE     SOURCE

0500 05                   2112 +3          DB      TOKEN_OTHER 
                          2113 +2          ;}
                          2114 +2          
0501 05                   2115 +3          DB      TOKEN_OTHER 
                          2116 +2          ;~
                          2117 +2          
0502 05                   2118 +3          DB      TOKEN_OTHER 
                          2119 +2          ;rubout
                          2120 +1  
                          2121     
                          2122     
                          2123     ; token value table - uses second byte of macro table entry
                          2124     
                          2125     
0503                      2126     TokenValueTable LABEL       BYTE
                          2127 +1          
                          2128 +2          
0503 00                   2129 +3          DB       0
                          2130 +2          ;<null>  (end of string)
                          2131 +2          
0504 01                   2132 +3          DB       1
                          2133 +2                  ;SOH
                          2134 +2          
0505 02                   2135 +3          DB       2
                          2136 +2                  ;STX
                          2137 +2          
0506 03                   2138 +3          DB       3
                          2139 +2                  ;ETX
                          2140 +2          
0507 04                   2141 +3          DB       4
                          2142 +2                  ;EOT
                          2143 +2          
0508 05                   2144 +3          DB       5
                          2145 +2                  ;ENQ
                          2146 +2          
0509 06                   2147 +3          DB       6
                          2148 +2                  ;ACK
                          2149 +2          
050A 07                   2150 +3          DB       7
                          2151 +2                  ;BEL
                          2152 +2          
050B 08                   2153 +3          DB       8
                          2154 +2                  ;backspace
                          2155 +2          
050C 09                   2156 +3          DB       9
                          2157 +2       ;TAB
                          2158 +2          
050D 0A                   2159 +3          DB       10
                          2160 +2          ;new line
                          2161 +2          
050E 0B                   2162 +3          DB       11
                          2163 +2          ;vertical tab
                          2164 +2          
050F 0C                   2165 +3          DB       12
                          2166 +2          ;form feed
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   41


LOC  OBJ                  LINE     SOURCE

                          2167 +2          
0510 0D                   2168 +3          DB       13
                          2169 +2              ;carriage return
                          2170 +2          
0511 0E                   2171 +3          DB       14
                          2172 +2          ;SO
                          2173 +2          
0512 0F                   2174 +3          DB       15
                          2175 +2          ;SI
                          2176 +2          
0513 10                   2177 +3          DB       16
                          2178 +2          ;DLE
                          2179 +2          
0514 11                   2180 +3          DB       17
                          2181 +2          ;DC1
                          2182 +2          
0515 12                   2183 +3          DB       18
                          2184 +2          ;DC2
                          2185 +2          
0516 13                   2186 +3          DB       19
                          2187 +2          ;DC3
                          2188 +2          
0517 14                   2189 +3          DB       20
                          2190 +2          ;DC4
                          2191 +2          
0518 15                   2192 +3          DB       21
                          2193 +2          ;NAK
                          2194 +2          
0519 16                   2195 +3          DB       22
                          2196 +2          ;SYN
                          2197 +2          
051A 17                   2198 +3          DB       23
                          2199 +2          ;ETB
                          2200 +2          
051B 18                   2201 +3          DB       24
                          2202 +2          ;CAN
                          2203 +2          
051C 19                   2204 +3          DB       25
                          2205 +2          ;EM
                          2206 +2          
051D 1A                   2207 +3          DB       26
                          2208 +2          ;SUB
                          2209 +2          
051E 1B                   2210 +3          DB       27
                          2211 +2          ;escape
                          2212 +2          
051F 1C                   2213 +3          DB       28
                          2214 +2          ;FS
                          2215 +2          
0520 1D                   2216 +3          DB       29
                          2217 +2          ;GS
                          2218 +2          
0521 1E                   2219 +3          DB       30
                          2220 +2          ;AS
                          2221 +2          
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   42


LOC  OBJ                  LINE     SOURCE

0522 1F                   2222 +3          DB       31
                          2223 +2          ;US
                          2224 +2          
0523 20                   2225 +3          DB       ' '
                          2226 +2          ;space
                          2227 +2          
0524 21                   2228 +3          DB       '!'
                          2229 +2          ;!
                          2230 +2          
0525 22                   2231 +3          DB       '"'
                          2232 +2          ;"
                          2233 +2          
0526 23                   2234 +3          DB       '#'
                          2235 +2          ;#
                          2236 +2          
0527 24                   2237 +3          DB       '$'
                          2238 +2          ;$
                          2239 +2          
0528 25                   2240 +3          DB       37
                          2241 +2          ;percent
                          2242 +2          
0529 26                   2243 +3          DB       '&'
                          2244 +2          ;&
                          2245 +2          
052A 27                   2246 +3          DB       39
                          2247 +2          ;'
                          2248 +2          
052B 28                   2249 +3          DB       40
                          2250 +2          ;open paren
                          2251 +2          
052C 29                   2252 +3          DB       41
                          2253 +2          ;close paren
                          2254 +2          
052D 2A                   2255 +3          DB       '*'
                          2256 +2          ;*
                          2257 +2          
052E 01                   2258 +3          DB       1
                          2259 +2                  ;+  (positive sign)
                          2260 +2          
052F 2C                   2261 +3          DB       44
                          2262 +2          ;,
                          2263 +2          
0530 FF                   2264 +3          DB       -1
                          2265 +2                  ;-  (negative sign)
                          2266 +2          
0531 00                   2267 +3          DB       0
                          2268 +2                  ;.  (decimal point)
                          2269 +2          
0532 2F                   2270 +3          DB       '/'
                          2271 +2          ;/
                          2272 +2          
0533 30                   2273 +3          DB       '0'
                          2274 +2              ;0  (digit)
                          2275 +2          
0534 31                   2276 +3          DB       '1'
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   43


LOC  OBJ                  LINE     SOURCE

                          2277 +2                  ;1  (digit)
                          2278 +2          
0535 32                   2279 +3          DB       '2'
                          2280 +2                  ;2  (digit)
                          2281 +2          
0536 33                   2282 +3          DB       '3'
                          2283 +2                  ;3  (digit)
                          2284 +2          
0537 34                   2285 +3          DB       '4'
                          2286 +2                  ;4  (digit)
                          2287 +2          
0538 35                   2288 +3          DB       '5'
                          2289 +2                  ;5  (digit)
                          2290 +2          
0539 36                   2291 +3          DB       '6'
                          2292 +2                  ;6  (digit)
                          2293 +2          
053A 37                   2294 +3          DB       '7'
                          2295 +2                  ;7  (digit)
                          2296 +2          
053B 38                   2297 +3          DB       '8'
                          2298 +2                  ;8  (digit)
                          2299 +2          
053C 39                   2300 +3          DB       '9'
                          2301 +2                  ;9  (digit)
                          2302 +2          
053D 3A                   2303 +3          DB       ':'
                          2304 +2          ;:
                          2305 +2          
053E 3B                   2306 +3          DB       ';'
                          2307 +2          ;;
                          2308 +2          
053F 3C                   2309 +3          DB       '<'
                          2310 +2          ;<
                          2311 +2          
0540 3D                   2312 +3          DB       '='
                          2313 +2          ;=
                          2314 +2          
0541 3E                   2315 +3          DB       '>'
                          2316 +2          ;>
                          2317 +2          
0542 3F                   2318 +3          DB       '?'
                          2319 +2          ;?
                          2320 +2          
0543 40                   2321 +3          DB       '@'
                          2322 +2          ;@
                          2323 +2          
0544 41                   2324 +3          DB       'A'
                          2325 +2          ;A
                          2326 +2          
0545 42                   2327 +3          DB       'B'
                          2328 +2          ;B
                          2329 +2          
0546 43                   2330 +3          DB       'C'
                          2331 +2          ;C
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   44


LOC  OBJ                  LINE     SOURCE

                          2332 +2          
0547 44                   2333 +3          DB       'D'
                          2334 +2          ;D
                          2335 +2          
0548 45                   2336 +3          DB       'E'
                          2337 +2    ;E 
                          2338 +2          
0549 46                   2339 +3          DB       'F'
                          2340 +2          ;F
                          2341 +2          
054A 47                   2342 +3          DB       'G'
                          2343 +2          ;G
                          2344 +2          
054B 48                   2345 +3          DB       'H'
                          2346 +2          ;H
                          2347 +2          
054C 49                   2348 +3          DB       'I'
                          2349 +2          ;I
                          2350 +2          
054D 4A                   2351 +3          DB       'J'
                          2352 +2          ;J
                          2353 +2          
054E 4B                   2354 +3          DB       'K'
                          2355 +2          ;K
                          2356 +2          
054F 4C                   2357 +3          DB       'L'
                          2358 +2          ;L
                          2359 +2          
0550 4D                   2360 +3          DB       'M'
                          2361 +2          ;M
                          2362 +2          
0551 4E                   2363 +3          DB       'N'
                          2364 +2          ;N
                          2365 +2          
0552 4F                   2366 +3          DB       'O'
                          2367 +2          ;O
                          2368 +2          
0553 50                   2369 +3          DB       'P'
                          2370 +2          ;P
                          2371 +2          
0554 51                   2372 +3          DB       'Q'
                          2373 +2          ;Q
                          2374 +2          
0555 52                   2375 +3          DB       'R'
                          2376 +2          ;R
                          2377 +2          
0556 53                   2378 +3          DB       'S'
                          2379 +2          ;S
                          2380 +2          
0557 54                   2381 +3          DB       'T'
                          2382 +2          ;T
                          2383 +2          
0558 55                   2384 +3          DB       'U'
                          2385 +2          ;U
                          2386 +2          
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   45


LOC  OBJ                  LINE     SOURCE

0559 56                   2387 +3          DB       'V'
                          2388 +2              ;V
                          2389 +2          
055A 57                   2390 +3          DB       'W'
                          2391 +2          ;W
                          2392 +2          
055B 58                   2393 +3          DB       'X'
                          2394 +2          ;X
                          2395 +2          
055C 59                   2396 +3          DB       'Y'
                          2397 +2          ;Y
                          2398 +2          
055D 5A                   2399 +3          DB       'Z'
                          2400 +2          ;Z
                          2401 +2          
055E 5B                   2402 +3          DB       '['
                          2403 +2          ;[
                          2404 +2          
055F 5C                   2405 +3          DB       '\'
                          2406 +2          ;\
                          2407 +2          
0560 5D                   2408 +3          DB       ']'
                          2409 +2          ;]
                          2410 +2          
0561 5E                   2411 +3          DB       '^'
                          2412 +2          ;^
                          2413 +2          
0562 5F                   2414 +3          DB       '_'
                          2415 +2          ;_
                          2416 +2          
0563 60                   2417 +3          DB       '`'
                          2418 +2          ;`
                          2419 +2          
0564 61                   2420 +3          DB       'a'
                          2421 +2          ;a
                          2422 +2          
0565 62                   2423 +3          DB       'b'
                          2424 +2          ;b
                          2425 +2          
0566 63                   2426 +3          DB       'c'
                          2427 +2          ;c
                          2428 +2          
0567 64                   2429 +3          DB       'd'
                          2430 +2          ;d
                          2431 +2          
0568 65                   2432 +3          DB       'e'
                          2433 +2          ;e  
                          2434 +2          
0569 66                   2435 +3          DB       'f'
                          2436 +2          ;f
                          2437 +2          
056A 67                   2438 +3          DB       'g'
                          2439 +2          ;g
                          2440 +2          
056B 68                   2441 +3          DB       'h'
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   46


LOC  OBJ                  LINE     SOURCE

                          2442 +2          ;h
                          2443 +2          
056C 69                   2444 +3          DB       'i'
                          2445 +2          ;i
                          2446 +2          
056D 6A                   2447 +3          DB       'j'
                          2448 +2          ;j
                          2449 +2          
056E 6B                   2450 +3          DB       'k'
                          2451 +2          ;k
                          2452 +2          
056F 6C                   2453 +3          DB       'l'
                          2454 +2          ;l
                          2455 +2          
0570 6D                   2456 +3          DB       'm'
                          2457 +2          ;m
                          2458 +2          
0571 6E                   2459 +3          DB       'n'
                          2460 +2          ;n
                          2461 +2          
0572 6F                   2462 +3          DB       'o'
                          2463 +2          ;o
                          2464 +2          
0573 70                   2465 +3          DB       'p'
                          2466 +2          ;p
                          2467 +2          
0574 71                   2468 +3          DB       'q'
                          2469 +2          ;q
                          2470 +2          
0575 72                   2471 +3          DB       'r'
                          2472 +2          ;r
                          2473 +2          
0576 73                   2474 +3          DB       's'
                          2475 +2          ;s
                          2476 +2          
0577 74                   2477 +3          DB       't'
                          2478 +2          ;t
                          2479 +2          
0578 75                   2480 +3          DB       'u'
                          2481 +2          ;u
                          2482 +2          
0579 76                   2483 +3          DB       'v'
                          2484 +2          ;v
                          2485 +2          
057A 77                   2486 +3          DB       'w'
                          2487 +2          ;w
                          2488 +2          
057B 78                   2489 +3          DB       'x'
                          2490 +2          ;x
                          2491 +2          
057C 79                   2492 +3          DB       'y'
                          2493 +2          ;y
                          2494 +2          
057D 7A                   2495 +3          DB       'z'
                          2496 +2          ;z
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   47


LOC  OBJ                  LINE     SOURCE

                          2497 +2          
057E 7B                   2498 +3          DB       '{'
                          2499 +2          ;{
                          2500 +2          
057F 7C                   2501 +3          DB       '|'
                          2502 +2          ;|
                          2503 +2          
0580 7D                   2504 +3          DB       '}'
                          2505 +2          ;}
                          2506 +2          
0581 7E                   2507 +3          DB       '~'
                          2508 +2          ;~
                          2509 +2          
0582 7F                   2510 +3          DB       127
                          2511 +2          ;rubout
                          2512 +1          
                          2513             
                          2514     
                          2515     
----                      2516     CODE    ENDS
                          2517         
                          2518     ;the data segment
                          2519     
----                      2520     DATA    SEGMENT PUBLIC  'DATA'
                          2521     
0000 (9                   2522     Dir_Buffer      DB  Display_SIZE+1      DUP     (?)   ;
     ??
     )
0009 ??                   2523     Dir_PTR         DB  ?                         ;
                          2524     
000A (9                   2525     Spd_Buffer      DB  Display_SIZE+1      DUP     (?)   ; 
     ??
     )
0013 ??                   2526     Spd_PTR         DB  ?                         ;
                          2527     
0014 (9                   2528     Rbt_error_Buff  DB  Display_SIZE+1      DUP     (?)   ; 
     ??
     )
001D ??                   2529     Rbt_error_Ptr   DB  ?                         ;
                          2530     
001E ????                 2531     Action_Buff_PTR DW  ?                         ;
                          2532     
0020 ????                 2533     Error_Buff_PTR  DW  ?                         ;
                          2534     
0022 ????                 2535     Errorflag       DW      ?                     ; Holds error type
                          2536     
0024 ??                   2537     FSM_state       DB      ?                     ; Holds the current state of FSM
                          2538     
0025 ????                 2539     ToggleCTR       DW      ?                     ;
                          2540     
0027 ????                 2541     TogglePreScaler DW      ?                     ;
                          2542     
                          2543     
----                      2544     DATA    ENDS
                          2545     
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   22:11:00  12/12/;3  PAGE   48


LOC  OBJ                  LINE     SOURCE

                          2546     ;the stack
                          2547     
----                      2548     STACK   SEGMENT STACK  'STACK'
                          2549     
0000 (80                  2550                     DB      80 DUP ('Stack ')       ;240 words
     537461636B20
     )
                          2551     
01E0                      2552     TopOfStack      LABEL   WORD
                          2553     
----                      2554     STACK   ENDS
                          2555     
                          2556     
                          2557     
                          2558             END     START

ASSEMBLY COMPLETE, NO ERRORS FOUND
