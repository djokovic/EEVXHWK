8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE PARSER
OBJECT MODULE PLACED IN PARSER.OBJ
ASSEMBLER INVOKED BY:  C:\5XTOOLS\ASM86.EXE PARSER.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1     NAME        Parser
                             2     
                             3 +1  $INCLUDE(macros.inc);
                      =1     4 +1  $NOLIST
                           169 +1  $INCLUDE(parser.inc);
                      =1   170     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   171     ;                                                                               ;
                      =1   172     ;                                  Parser.INC                                   ;
                      =1   173     ;                              Parser Constants                             ;
                      =1   174     ;                                 Include File                              ;
                      =1   175     ;                                                                           ;
                      =1   176     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   177     
                      =1   178     ; This file contains the definitions for Parser
                      =1   179     ;
                      =1   180     ; Revision History:
                      =1   181     ;    12/04/2013                 Created - Anjian Wu
                      =1   182     ;    12/06/2013                 Add FSM states and Tokens - Anjian Wu
                      =1   183     ;    12/08/2013                 Documentation - Anjian Wu
                      =1   184     
                      =1   185     ;FSM Constants
                      =1   186     
  0001                =1   187     POS             EQU     1       ; Used for IMUL for conversion
 -0001                =1   188     NEGA            EQU     -1      ; Used for IMUL for conversion
  FFFE                =1   189     MAX_ABS_SPEED   EQU     65534   ; Maximum speed val
  0000                =1   190     MIN_ABS_SPEED   EQU     0       ; minimum speed val
  7FFF                =1   191     MAX_MAG         EQU     32767   ; Max allowed val excluding sign
  003C                =1   192     MAX_ELEVATION   EQU     60      ; Max ele angle
 -003C                =1   193     MIN_ELEVATION   EQU     -60     ; Min ele ang
                      =1   194     
                      =1   195     ;FSM States Definitions
                      =1   196     
  0000                =1   197     ST_INITIAL          EQU     0   ;Start state
  0001                =1   198     ST_SAS_INIT     EQU     1   ;Set Abs Speed: wait for digit or '+'
  0002                =1   199     ST_SAS_SIGN     EQU     2   ;Set Abs Speed: wait for digit
  0003                =1   200     ST_SAS          EQU     3   ;Set Abs Speed: concat digits
  0004                =1   201     ST_SRS_INIT     EQU     4   ;Set Rel Speed: wait for digit or '+' or '-'
  0005                =1   202     ST_SRS_SIGN     EQU     5   ;Set Rel Speed: wait for digit
  0006                =1   203     ST_SRS          EQU     6   ;Set Rel Speed: concat digits
  0007                =1   204     ST_DIR_INIT     EQU     7   ;Set Direction: wait for digit or '+' or '-'
  0008                =1   205     ST_DIR_SIGN     EQU     8   ;Set Direction: wait for digit
  0009                =1   206     ST_DIR          EQU     9   ;Set Direction: concat digits
  000A                =1   207     ST_RTR_INIT     EQU     10  ;Rot Turret Angle: wait for digit or '+' or '-'
  000B                =1   208     ST_RTR_SIGN     EQU     11  ;Rot Turret Angle: wait for digit
  000C                =1   209     ST_RTA_ABS      EQU     12  ;Rot Turret Angle: concat digits
  000D                =1   210     ST_RTA_REL      EQU     13  ;Rot Turret Angle: concat digits
  000E                =1   211     ST_STEA_INIT    EQU     14  ;Set Turret Elevation Angle: wait for digit or '+' or '-'
  000F                =1   212     ST_STEA_SIGN    EQU     15  ;Set Turret Elevation Angle: wait for digit
  0010                =1   213     ST_STEA         EQU     16  ;Set Turret Elevation Angle: concat digits
  0011                =1   214     ST_LAZON        EQU     17  ;Set Laser ON
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE    2


LOC  OBJ                  LINE     SOURCE

  0012                =1   215     ST_LAZOFF       EQU     18  ;Set Laser OFF
                      =1   216     
                      =1   217     ;Token offsets
  0000                =1   218     TOKEN_S         EQU     0; - Set Speed
  0001                =1   219     TOKEN_V         EQU     1; - Set Rel Speed
  0002                =1   220     TOKEN_D         EQU     2;- Set Dir
  0003                =1   221     TOKEN_T         EQU     3; - Rot Turr Angl
  0004                =1   222     TOKEN_E         EQU     4; - Set Turr Ele
  0005                =1   223     TOKEN_F         EQU     5;- Laser On
  0006                =1   224     TOKEN_O         EQU     6;- Laser Off
  0007                =1   225     TOKEN_NUM       EQU     7;- A digit
  0008                =1   226     TOKEN_POS       EQU     8;- '+'
  0009                =1   227     TOKEN_NEG       EQU     9; - '-'
  000A                =1   228     TOKEN_IGNORE    EQU     10; Ignore this char
  000B                =1   229     TOKEN_END       EQU     11; - Return
  000C                =1   230     TOKEN_OTHER     EQU     12; Bad char
                      =1   231     
  000D                =1   232     NUM_TOKEN_TYPES EQU     TOKEN_OTHER + 1; TOKEN_OTHER is always the last Token
                      =1   233     
                      =1   234     ; TOken Masks
                      =1   235     
  007F                =1   236     TOKEN_MASK      EQU     01111111B       ;mask high bit of token
                      =1   237     
                      =1   238     
                           239 +1  $INCLUDE(general.inc);
                      =1   240     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   241     ;                                                                               ;
                      =1   242     ;                                  General.INC                                  ;
                      =1   243     ;                               General Constants                           ;
                      =1   244     ;                                 Include File                              ;
                      =1   245     ;                                                                           ;
                      =1   246     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   247     
                      =1   248     ; This file contains general operations
                      =1   249     ;
                      =1   250     ; Revision History:
                      =1   251     ;    11/02/2013                 Created - Anjian Wu
                      =1   252     ;    11/23/2013                 Added WORD_LOOKUP_ADJUST - Anjian Wu
                      =1   253     ;    12/05/2014         Added FMS_ERROR key, ZERO, changed other keys to 
                      =1   254     ;                       ASCII based - Anjian
                      =1   255     ;    12/12/2014         Added CAR_RETURN
                      =1   256     
                      =1   257     
                      =1   258     ; General Constants
  000D                =1   259     CAR_RETURN      EQU     13          ;
  0000                =1   260     ASCII_NULL      EQU     0           ;
  0001                =1   261     bit_size        EQU     1           ;
  0004                =1   262     nibble_size     EQU     4           ;
  0008                =1   263     BYTE_size       EQU     8           ;
  0010                =1   264     WORD_size       EQU     16          ;
  0000                =1   265     ArrayEmpty      EQU     0               ; Empty is set at 0 index
                      =1   266     
  0001                =1   267     TRUE            EQU     1           ;
  0000                =1   268     FALSE           EQU     0           ;
                      =1   269     
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE    3


LOC  OBJ                  LINE     SOURCE

  0000                =1   270     RESET           EQU     0           ; General Value for Resetting something
                      =1   271     
  0000                =1   272     CLEAR           EQU     0           ;
                      =1   273     
  0000                =1   274     ZERO            EQU     0           ;
                      =1   275     
  000A                =1   276     DIGIT           EQU     10          ; A digit in base 10 
                      =1   277     
  0001                =1   278     WORD_LOOKUP_ADJUST  EQU    1           ; Two bytes in one word -> SHL by 1
                      =1   279     
                      =1   280     ; General Definitions for Main Loops
                      =1   281     
  0001                =1   282     FIRST_RESERVED_VEC      EQU     1           ;reserve vectors 1-3
  0003                =1   283     LAST_RESERVED_VEC       EQU     3       ;
  0100                =1   284     NUM_IRQ_VECTORS     EQU 256     ;number of interrupt vectors
                      =1   285     
                      =1   286     ; MainLoop Key Codes
                      =1   287     
  0000                =1   288     KEY_EVENT_KEY       EQU     0   ; Event code indicating key pressed
  0001                =1   289     SER_ERR_KEY         EQU     1   ; Event code indicating serial error
  0002                =1   290     RX_ENQUEUED_KEY     EQU     2   ; Event code indicating new rx value gotten
  0003                =1   291     MODEM_KEY           EQU     3   ; Event code indicating modem event
  0004                =1   292     FSM_ERROR           EQU     4   ; Error key showing FSM error
                      =1   293     
                      =1   294     ; General Addresses
                      =1   295     
  FF22                =1   296     INTCtrlReg          EQU     0FF22H  ;EOI interrupt controller       
                           297 +1  $INCLUDE(motors.inc); 
                      =1   298     
                      =1   299     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   300     ;                                                                               ;
                      =1   301     ;                                  Motors.INC                                   ;
                      =1   302     ;                               Motor Constants                             ;
                      =1   303     ;                                 Include File                              ;
                      =1   304     ;                                                                           ;
                      =1   305     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   306     
                      =1   307     ; This file contains the definitions for the Motor functions
                      =1   308     ;
                      =1   309     ; Revision History:
                      =1   310     ;    11/23/2013                 Created - Anjian Wu
                      =1   311     
                      =1   312     
                      =1   313     
                      =1   314     ; Fx Table Definitions
                      =1   315     
  7FFF                =1   316     Fx1             EQU     07FFFH         ; Fx component for Motor 1
  C000                =1   317     Fx2             EQU     0C000H         ; Fx component for Motor 2
  C000                =1   318     Fx3             EQU     0C000H         ; Fx component for Motor 3
  0000                =1   319     Fy1             EQU     0              ; Fy component for Motor 1
  9127                =1   320     Fy2             EQU     09127H         ; Fy component for Motor 2
  6ED9                =1   321     Fy3             EQU     06ED9H         ; Fy component for Motor 3
                      =1   322     
  0003                =1   323     FY_offset       EQU     3              ; Fy components are 3 down in the table
                      =1   324     
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE    4


LOC  OBJ                  LINE     SOURCE

                      =1   325     ; SetMotorSpeed Local Vars
 -0002[]              =1   326     Fx          EQU     WORD PTR [BP - 2]   ; Stores the Fx component for each motor
 -0004[]              =1   327     Fy          EQU     WORD PTR [BP - 4]   ; Stores the Fy component for each motor
 -0006[]              =1   328     COS_VAL     EQU     WORD PTR [BP - 6]   ; Stores the COS(ANGLESTORED)
 -0008[]              =1   329     SIN_VAL     EQU     WORD PTR [BP - 8]   ; Stored the SIN(ANGLESTORED)
                      =1   330     
                      =1   331     ; Motor Conv. Constants
                      =1   332     
  0168                =1   333     FULL_ANGLE      EQU     360             ; There are 360 deg in a full circle
 -8000                =1   334     NO_ANGLE_CHANGE EQU     -32768          ; NO angle change is denoted by -32768
  FFFF                =1   335     NO_SPEED_CHANGE EQU     65535           ; No speed change is denoted by 65534;
  0003                =1   336     numOfmotors     EQU     3               ; There are three motors on Robotrike
                      =1   337     
  0000                =1   338     STOPPED_SPEED   EQU     0               ; Value for no motor movement
  0000                =1   339     ZERO_ANGLE      EQU     0               ; Value for 0 degress
                      =1   340     
  0001                =1   341     SPEED_ADJUST    EQU     1               ; Num of bits to shift for speed
                      =1   342     
  0002                =1   343     EXTRA_SIGN_BITS EQU     2               ; There are two extra sign bits in
                      =1   344                                             ; Setmotorspeed's S[i] calc
                      =1   345     
  0000                =1   346     ZERO_SPEED_PWM  EQU     0               ; Zero speed requires 0 duty cycle
                      =1   347     
  007F                =1   348     PWM_WIDTH_MAX   EQU     127             ; Resolution of PWM
                      =1   349     
  0008                =1   350     SetMotorVarSize EQU     8               ; SetMotorSpeed requires 4 words of local
                      =1   351                                             ; variables on Stack.
                      =1   352     
                      =1   353     
                      =1   354     ; Motor PORT Vals
  0183                =1   355     _8255_CNTRL_REG EQU     183H    ;Control Word Address
  0080                =1   356     _8255_CNTRL_VAL EQU     80H     ;Control Word Write val: MODE 0 for BOTH groups A & B
                      =1   357     
  0181                =1   358     PORTB           EQU     181H    ;Address of port B
                      =1   359     
                      =1   360     ; MOtor MASK vals
                      =1   361                                       
  0002                =1   362     FORWARD_M1          EQU     00000010B   ;   MASK FORWARD for Motor 1
  0003                =1   363     BACKWARD_M1     EQU     00000011B   ;   MASK BACKWARD for Motor 1
                      =1   364     
  0008                =1   365     FORWARD_M2          EQU     00001000B   ;   MASK FORWARD for Motor 2
  000C                =1   366     BACKWARD_M2     EQU     00001100B   ;   MASK BACKWARD for Motor 2
                      =1   367     
  0020                =1   368     FORWARD_M3          EQU     00100000B   ;   MASK FORWARD for Motor 3
  0030                =1   369     BACKWARD_M3     EQU     00110000B   ;   MASK BACKWARD for Motor 3
                      =1   370     
  00FD                =1   371     STOP_M1             EQU     11111101B   ;   MASK STOP for Motor 1 
  00F7                =1   372     STOP_M2             EQU     11110111B   ;   MASK STOP for Motor 2 
  00DF                =1   373     STOP_M3             EQU     11011111B   ;   MASK STOP for Motor 3 
                      =1   374     
  0080                =1   375     LASER_ON        EQU     10000000B   ;   OR MASK for laser ON (PortB)
  007F                =1   376     LASER_OFF       EQU     01111111B   ;   AND MASK for laser OFF (PortB)
                      =1   377     
                      =1   378     
                      =1   379     
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE    5


LOC  OBJ                  LINE     SOURCE

                      =1   380     
                           381 +1  $INCLUDE(display.inc); 
                      =1   382     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   383     ;                                                                               ;
                      =1   384     ;                                  Display.INC                                  ;
                      =1   385     ;                               Display Constants                           ;
                      =1   386     ;                                 Include File                              ;
                      =1   387     ;                                                                           ;
                      =1   388     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   389     
                      =1   390     ; This file contains the definitions for the display functions
                      =1   391     ;
                      =1   392     ; Revision History:
                      =1   393     ;    11/02/2013                 Created - Anjian Wu
                      =1   394     
                      =1   395     
                      =1   396     
                      =1   397     ; General Definitions
                      =1   398     
  0008                =1   399     Display_SIZE    EQU     8               ; Size of chars that can fit in display
  0000                =1   400     SEGMENT_NULL    EQU     0               ; Byte value for Sseg pattern of ASCII_NULL
  0001                =1   401     SegPTRAdjust    EQU     1               ; Since we want WORD, we need to adjust 
                      =1   402      
                      =1   403     
                      =1   404     ; Display Addresses
                      =1   405     
  0000                =1   406     LEDDisplay      EQU     0               ; Display is hardware mapped to 0 - 7H
  0008                =1   407     LEDDisplay2     EQU     8               ; 14- seg also hardware mapped to 8h - 0DH
                      =1   408     
                      =1   409     
----                  =1   410     DISPLAYSTRUC     STRUC                      ;structure containing all display buffers
0000                  =1   411         buffer              DB          Display_SIZE        DUP     (?) ;pointer to the f
                                   unction to get switch 
----                  =1   412     DISPLAYSTRUC      ENDS
                      =1   413     
                      =1   414     
                      =1   415     
                           416     
                           417     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           418     ;                                                                            ;
                           419     ;                                 HW8 Parser Functions                       ;
                           420     ;                                 EE51                                           ;
                           421     ;                                 Anjian Wu                                  ;
                           422     ;                                                                            ;
                           423     ;                                 TA: Pipe-Mazo                              ;
                           424     ;                                                                            ;
                           425     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           426     ;                                 What's in here?
                           427     ;
                           428     ;                          Code Segment (* indicates public)
                           429     ;
                           430     ;   ParseSerialChar*     -   Passed a char for processing in FSM
                           431     ;   ParseReset*          -   Resets all Parser variables
                           432     ;   GetTokenTypeVal      -   Grabs next token val and type
                           433     ;   Concat_Num           -   Used to prepare passed args to Motor Vars from 
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           434     ;                            parsed chars.
                           435     ;   FSM ACTION Functions:
                           436     ;   no_op               -   Just returns
                           437     ;   SetSpeed            -   Handles absolute speed setting
                           438     ;   SetRelSpeed         -   Handles relative speed setting
                           439     ;   SetDir              -   Handles direction setting
                           440     ;   RotRelTurrAng       -   Handles rel turret rotation setting
                           441     ;   RotAbsTurrAng       -   Handles abs turret rotation setting
                           442     ;   SetTurrEleAng       -   Handles turrent ele angle setting
                           443     ;   SetSign             -   Sets the sign accordingly
                           444     ;   SetError            -   Sets the errorflag
                           445     ;   LaserON             -   Turns laser ON
                           446     ;   LaserOff            -   Turns laser OFF
                           447     ;
                           448     ;                                   Data Segment
                           449     ;
                           450     ;   sign                -   Stores the sign of the num being processed
                           451     ;   magnitude           -   Stores the universal magnitude (can be speed, angle
                           452     ;                           ,etc.)
                           453     ;   errorflag           -   Stores errors
                           454     ;   FSM_state           -   Stores the current state
                           455     ;
                           456     ;                              What's was last edit?
                           457     ;               
                           458     ;                   Edits by Anjian Wu:
                           459     ;
                           460     ;                               Pseudo code     ->  12-01-2013
                           461     ;                   Wrote Assembly  ->  12-04-2013
                           462     ;                   Wrote Assembly  ->  12-05-2013
                           463     ;                   Working         ->  12-08-2013
                           464     ;
                           465     ;                   12-08-2013 -> Added to Robot 
                           466     ;                   12-08-2013 -> Added Speed and Direction shared var to store vals
                           467     ;                                 for serial returning status.
                           468     ;                   12-08-2013 -> Added Speed and Direction shared var to store vals
                           469     ;                                 for serial returning status.
                           470     ;                   
                           471     ;                   Edits by others:
                           472     ;
                           473     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           474     CGROUP  GROUP   CODE
                           475     DGROUP GROUP    DATA
                           476     
----                       477     CODE SEGMENT PUBLIC 'CODE'
                           478     
                           479             ASSUME  CS:CGROUP, DS:DGROUP
                           480             
                           481             EXTRN   SetMotorSpeed:NEAR          ; Sets motor speed and angle
                           482             EXTRN   GetMotorSpeed:NEAR          ; Grabs abs speed
                           483             EXTRN   GetMotorDirection:NEAR      ; Grabs movement angle
                           484             EXTRN   SetLaser:NEAR               ; Sets laser on or off
                           485             EXTRN   GetLaser:NEAR               ; Gets laser status
                           486                     EXTRN   SetTurretAngle:NEAR         ; Change abs turret angle
                           487             EXTRN   GetTurretAngle:NEAR         ; Get abs turret angle
                           488             EXTRN   SetRelTurretAngle:NEAR      ; Change relative turret angle
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           489                     EXTRN   SetTurretElevation:NEAR     ; Set turret ele angle
                           490                     EXTRN   GetTurretElevation:NEAR     ; Get current ele angle
                           491             EXTRN   SerialPutChar:NEAR
                           492             EXTRN   Dec2String:NEAR
                           493             EXTRN   StatusFeedback:NEAR
                           494                     EXTRN   no_op:NEAR     
                           495     
                           496     ;Procedure:                     ParseSerialChar
                           497     ;
                           498     ;Description:           Used pass char in AX to grab NEXT token val and type, and use
                                   s
                           499     ;                   that to calc the proper pointer to the function to be called
                           500     ;                   by the state machine. The token TYPE is used to find the abs
                           501     ;                   action function offset and the token TYPE is always passed as
                           502     ;                   (AL) into the action function. The action function, however, may
                           503     ;                   or may not use the passed token val. The next FSM state is also
                           504     ;                   saved in a shared variable FSM_state for the next time.
                           505     ;
                           506     ;                   If the state machine returns to ST_INITIAL then it also resets 
                           507     ;                   the parser variables. If there is an error detected after the act
                                   ion
                           508     ;                   function is call, then the function will also reset the parser 
                           509     ;                   variables.
                           510     ;                   
                           511     ;                   This function always returns error status in AX. See 'Error Handl
                                   ing'.
                           512     ;
                           513     ;Operation:         * Clear Errorflag, grab next token val and key using GetTokenType
                                   Val.
                           514     ;                   * offset = (NUM_TOKEN_TYPES * FSM_State + token type)* SIZE TRANS
                                   ITION_ENTRY
                           515     ;                   * Call Function (Action) using offset, passing token val in AL
                           516     ;                   * If Errorflag is true, store FSM_state and FSM_ERROR bytes into 
                                   AX for return
                           517     ;                       * Call ParseReset
                           518     ;                   * Else, grab nextstate using offset, store the next state into FS
                                   M_state
                           519     ;                       * If next state is ST_INITIAL, then Call ParseReset
                           520     ;                   * Return Errorflag in AX 
                           521     ;
                           522     ;Arguments:             AL   -> The next char to be parsed
                           523     ;
                           524     ;Return Values:         AX - > The errorflag
                           525     ;
                           526     ;Shared Variables:      Errorflag (WRITE/READ)
                           527     ;                   FSM_state (READ/WRITE)
                           528     ;
                           529     ;Local Variables:       AL      -   token val, char
                           530     ;                   AH      -   token type
                           531     ;                   AX      -   error, char
                           532     ;                   BX      -   table offset
                           533     ;                   DH      -   save token type
                           534     ;                   CH      -   save token val
                           535     ;                   
                           536     ;                   
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           537     ;Global Variables:      None.                                   
                           538     ;Input:                 none.
                           539     ;Output:                none.
                           540     ;Registers Used:        AX, BX, CH, DH
                           541     ;Stack Depth:           3 words
                           542     ;Known Bugs:            None.
                           543     ;Data Structures:       None.
                           544     ;Error Handling:        Errors come in two ways:
                           545     ;                   FSM TYPE 1. Symbol/Char error -> NEXTSTATE already is ST_INITIAL
                           546     ;                   FSM TYPE 2. Value error  -> NEXTSTATE may or may not be ST_INITIA
                                   L
                           547     ;                   These errors are treated the same in that the return value AX
                           548     ;                   will contain the FSM_State in AL and the FSM_ERROR key in AH. The
                                    FSM
                           549     ;                   will also RESET immediately if error is seen.
                           550     ;
                           551     ;Algorithms:        Call Table FSM look up. Table offset = NUM_TOKEN_TYPES * FSM_Stat
                                   e + token type
                           552     ;Limitations:           None.
                           553     ;Author:                        Anjian Wu
                           554     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                           555     ;                                       12-04-2013: Modified from Glen's floatptd.asm
                                    - Anjian Wu 
                           556     ;                   12-08-2013: Working - Anjian Wu
                           557     ;------------------------------------------------------------------------------
                           558     
0000                       559     ParseSerialChar         PROC    NEAR
                           560                                             PUBLIC  ParseSerialChar
                           561     
0000                       562     ParseSerialInit:
                           563     
0000 52                    564         PUSH        DX       ; Save all Regs
0001 53                    565             PUSH    BX
0002 51                    566             PUSH    CX              
                           567             
0003 C70600000000   R      568         MOV Errorflag, FALSE            ;Assume no errors
                           569             
0009                       570     ParseGrabTokens:        
0009 E84600                571             CALL    GetTokenTypeVal         ; Grab next token key and val
000C 8AF4                  572             MOV             DH, AH                      ; Save token type
000E 8AE8                  573             MOV             CH, AL                      ; Save token val
                           574             
0010                       575     ParseComputeTrans:                      ;figure out what transition to do
0010 B00D                  576             MOV             AL, NUM_TOKEN_TYPES     ;find row in the table
0012 F6260500       R      577             MUL             FSM_State           ;Get to current FSM state
0016 02C6                  578             ADD             AL, DH                  ;Calc abs transition inside that stat
                                   e
0018 80D400                579             ADC             AH, zero                     ;propagate low byte carry into h
                                   igh byte
                           580     
001B 6BD80390              581             IMUL    BX, AX, SIZE TRANSITION_ENTRY   ;now convert to table offset
                           582     
001F                       583     ParseDoActions:                             ;do the actions (don't affect regs)
                           584     
001F 8AC5                  585             MOV             AL, CH                      ;Pass Token Val (not always used 
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE    9


LOC  OBJ                  LINE     SOURCE

                                   by ACTION)
0021 2EFF97D301     R      586             CALL    CS:RobotFSMTable[BX].ACTION     ;do the actions
                           587     
0026                       588     ParseCheckError:
0026 833E000001     R      589         CMP     Errorflag, TRUE     ; Was there an error from the FSM action?
                           590                                     ; Errors can come in two ways
                           591                                     ; FSM TYPE 1. Symbol/Char error -> NEXTSTATE already 
                                   is ST_INITIAL
                           592                                     ; FSM TYPE 2. Value error  -> NEXTSTATE may or may no
                                   t be ST_INITIAL
002B 750B                  593         JNE     ParseNextTransition ; Nope, so grab the next one
                           594         ;JE     ParseRecordError    ; There was an error
                           595         
002D                       596     ParseRecordError:
002D A00500         R      597         MOV     AL, FSM_State       ; Store the current state before it is updated 
                           598                                     ; since it where there that error was found
0030 B404                  599         MOV     AH, FSM_ERROR       ; Indicate that this was an FSM error (This
                           600                                     ; differentiates a value of FALSE vs. error in FSM_St
                                   ate = 0)
                           601                                     
0032 A30000         R      602         MOV     Errorflag, AX       ; Store that state as an error-type
0035 EB1190                603         JMP     ParseNeedReset      ; We just got error, thus immediately exit this cmd p
                                   ath
                           604                                     ; and go back to ST_INITIAL to wait for VALID next cm
                                   d.
                           605                                     ; * Notice this IS redundant for FSM TYPE 1 errors si
                                   nce nxt state
                           606                                     ;   is already ST_INITIAL, however
                           607                                     ;   we treat all errors the same to simplify code.
                           608         
0038                       609     ParseNextTransition:                    ;now go to next state
                           610     
0038 2E8A8FD201     R      611             MOV             CL, CS:RobotFSMTable[BX].NEXTSTATE
003D 880E0500       R      612         MOV     FSM_state, CL   ; We need this nextstate stored for next time.
                           613         
0041 803E050000     R      614             CMP             FSM_state, ST_INITIAL   ; Did the state machine restart?
0046 7503                  615             JNE             ParseDone           ; If not then just continue.
                           616             ;JE             ParseNeedReset  ; Else we need to reset some parser variables
0048                       617     ParseNeedReset:
0048 E81A00                618             CALL    ParseReset              ; Reset parser variables (FSM_STATE, magnitud
                                   e, sign)
                           619         ;JMP    ParseDone       ;
004B                       620     ParseDone:
004B A10000         R      621         MOV     AX, Errorflag       ; Restore the error (if any) back into AX for return
                           622                                     ; AH - whether or not error happened, AL - FSM_state 
                                   (if error)
                           623         
004E 59                    624             POP  CX
004F 5B                    625             POP      BX
0050 5A                    626             POP  DX                     ; Restore used regs
                           627             
                           628         
0051 C3                    629         RET
                           630         
                           631     ParseSerialChar ENDP
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   10


LOC  OBJ                  LINE     SOURCE

                           632     
                           633     ; GetTokenTypeVal
                           634     ;
                           635     ; Description:      This procedure returns the token class and token value for
                           636     ;                   the passed character.  The character is truncated to
                           637     ;                   7-bits because the table only has 127 ASCII chars inside.
                           638     ;
                           639     ; Operation:        Looks up the passed character in two tables, one for token
                           640     ;                   types or classes, the other for token values.
                           641     ;
                           642     ; Arguments:        AL - character to look up.
                           643     ; Return Value:     AL - token value for the character.
                           644     ;                   AH - token type or class for the character.
                           645     ;
                           646     ; Local Variables:  BX - table pointer, points at lookup tables.
                           647     ; Shared Variables: None.
                           648     ; Global Variables: None.
                           649     ;
                           650     ; Input:            None.
                           651     ; Output:           None.
                           652     ;
                           653     ; Error Handling:   None.
                           654     ;
                           655     ; Algorithms:       Table lookup.
                           656     ; Data Structures:  Two tables, one containing token values and the other
                           657     ;                   containing token types.
                           658     ;
                           659     ; Registers Used:   AX, BX.
                           660     ; Stack Depth:      0 words.
                           661     ;
                           662     ; Author:           Anjian Wu
                           663     ; Last Modified:    12-02-2013: Adapted from Glen's floatptd.asm - Anjian Wu :)
                           664     ;                   12-08-2013: Add documentation to show understanding - Anjian Wu
                           665     
                           666     
0052                       667     GetTokenTypeVal PROC    NEAR
                           668     
                           669     
0052                       670     InitGetFPToken:                         ;setup for lookups
0052 247F                  671             AND     AL, TOKEN_MASK          ;strip unused bits (high bit) ONLY 127 CHARS 
                                   IN TABLE
0054 8AE0                  672             MOV     AH, AL                      ;and preserve value in AH
                           673     
                           674     ; TokenTypeTable and TokenValueTable's values are paired/mapped one to one
                           675     
0056                       676     TokenTypeLookup:                        ;get the token type
0056 BBB70490       R      677         MOV     BX, OFFSET(TokenTypeTable)  ;BX points at table
005A 2ED7                  678             XLAT    CS:TokenTypeTable               ;have token type in AL
005C 86E0                  679             XCHG    AH, AL                              ;token type in AH, character in A
                                   L
                           680     
005E                       681     TokenValueLookup:                                    ;get the token value
005E BB370590       R      682         MOV     BX, OFFSET(TokenValueTable)  ;BX points at table
0062 2ED7                  683             XLAT    CS:TokenValueTable               ;have token value in AL
                           684     
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   11


LOC  OBJ                  LINE     SOURCE

                           685     
0064                       686     EndGetFPToken:                               ;done looking up type and value
0064 C3                    687             RET
                           688     
                           689     
                           690     GetTokenTypeVal ENDP
                           691     
                           692     ;Function:                      ParseReset
                           693     ;Description:           Resets all Parser variables to initial state, zero magnitude,
                                    and pos sign     
                           694     ;Operation:         * Set sign as POS, set FSM_state as ST_INITIAL, and set magnitude
                                    as zero         
                           695     ;Arguments:             None.
                           696     ;Return Values:         none.
                           697     ;Shared Variables:      none.
                           698     ;Local Variables:       None.
                           699     ;Global Variables:      None.                   
                           700     ;Input:                 None.
                           701     ;Output:                None.
                           702     ;Registers Used:        none.
                           703     ;Stack Depth:           none.
                           704     ;Known Bugs:            None.
                           705     ;Data Structures:       None.
                           706     ;Error Handling:        None
                           707     ;Algorithms:            None.
                           708     ;Limitations:           None.
                           709     ;Author:                        Anjian Wu
                           710     ;Author:                        Anjian Wu
                           711     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                           712     ;                   12-08-2013: Documentation - Anjian Wu
                           713     ;------------------------------------------------------------------------------
0065                       714     ParseReset  PROC    NEAR
                           715                 PUBLIC  ParseReset
                           716                 
0065 C60604000190   R      717         MOV     sign, POS               ; Set default val as positive
006B C60605000090   R      718         MOV     FSM_state, ST_INITIAL   ; Set Default FSM machine state
0071 C70602000000   R      719         MOV     magnitude, zero         ; Assume magnitude is zero
                           720         
0077 E80100                721         CALL    UpdateStatus            ; Always send back status after FSM finishes
                           722         
007A C3                    723             RET
                           724             
                           725     ParseReset  ENDP       
                           726     
                           727     ;Function:                      UpdateStatus
                           728     ;Description:           Resets all Parser variables to initial state, zero magnitude,
                                    and pos sign     
                           729     ;Operation:         * Set sign as POS, set FSM_state as ST_INITIAL, and set magnitude
                                    as zero         
                           730     ;Arguments:             None.
                           731     ;Return Values:         none.
                           732     ;Shared Variables:      none.
                           733     ;Local Variables:       None.
                           734     ;Global Variables:      None.                   
                           735     ;Input:                 None.
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   12


LOC  OBJ                  LINE     SOURCE

                           736     ;Output:                None.
                           737     ;Registers Used:        none.
                           738     ;Stack Depth:           none.
                           739     ;Known Bugs:            None.
                           740     ;Data Structures:       None.
                           741     ;Error Handling:        None
                           742     ;Algorithms:            None.
                           743     ;Limitations:           None.
                           744     ;Author:                        Anjian Wu
                           745     ;Author:                        Anjian Wu
                           746     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                           747     ;                   12-08-2013: Documentation - Anjian Wu
                           748     ;------------------------------------------------------------------------------
007B                       749     UpdateStatus  PROC    NEAR
                           750                 
007B B85300                751         MOV     AX, 'S'                 ;
007E E80000         E      752         CALL    SerialPutChar           ;
                           753         ; 'S'
0081 E80000         E      754         CALL    GetMotorSpeed           ; Got the current speed
0084 8D360F00       R      755         LEA     SI, Spd_Buffer           ; Prepare to convert it to a string
0088 E80000         E      756         CALL    Dec2String              ; Convert the dec to string into Spd_Buffer
                           757         ; 'S...val...'
008B 8CD8                  758         MOV     AX, DS                  ; String is in data segment
008D 8EC0                  759         MOV     ES, AX                  ;
008F E80000         E      760         CALL    StatusFeedback          ; Now output the string body (ASCII_NULL terminat
                                   ed)
0092 B80D00                761         MOV     AX, CAR_RETURN          ;
0095 E80000         E      762         CALL    SerialPutChar           ;
                           763         ; 'S...val...<CR>'  
                           764         
                           765         
0098 B84400                766         MOV     AX, 'D'                 ;
009B E80000         E      767         CALL    SerialPutChar           ;
                           768         ; 'D'
009E E80000         E      769         CALL    GetMotorDirection       ; Got the current direction
00A1 8D360600       R      770         LEA     SI, Dir_Buffer           ; Prepare to convert it to a string
00A5 E80000         E      771         CALL    Dec2String              ; Convert the dec to string into Dir_Buffer
                           772     
00A8 8CD8                  773         MOV     AX, DS                  ; String is in data segment
00AA 8EC0                  774         MOV     ES, AX                  ;
00AC E80000         E      775         CALL    StatusFeedback          ; Now output the string body (ASCII_NULL terminat
                                   ed)
                           776         ; 'D...val...'
                           777         
00AF B80D00                778         MOV     AX, CAR_RETURN          ;
00B2 E80000         E      779         CALL    SerialPutChar           ;
                           780         ; 'D...val...<CR>'  
00B5 C3                    781             RET               ;
                           782             
                           783     UpdateStatus  ENDP                
                           784     
                           785     ;Procedure:                     Concat_Num
                           786     ;
                           787     ;Description:           Takes the token value (which should be the digit val) and ins
                                   erts
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   13


LOC  OBJ                  LINE     SOURCE

                           788     ;                   that digit into the 1's (base 10) digit of the current magnitude.
                           789     ;                   IF the magnitude, during the calc, is determined to be too big
                           790     ;                   then the errorflag is raised, else the magnitude is stored.
                           791     ;                           
                           792     ;Operation:         * Multiply stored magnitude by DIGIT 
                           793     ;                   * Check if overflow
                           794     ;                   * ADD next digit's val (the arg)
                           795     ;                   * Check if carry
                           796     ;                   * Check if value is at MAX_MAG + 1 (which is OK if sign is NEG)
                           797     ;                       * If equal, then check if this is special case -(MAX_MAG + 1 
                                   )
                           798     ;                           * If so then continue to store it
                           799     ;                           * Else CALL SetError
                           800     ;                       * If greater than CALL SetError
                           801     ;                   * Else it is OK and store the new magnitude
                           802     ;                   * Return
                           803     ;
                           804     ;Arguments:             AL = token val/next digit
                           805     ;Return Values:         none.
                           806     ;Shared Variables:      magnitude(READ/WRITE)
                           807     ;Local Variables:       AX  - stores digit, magnitude
                           808     ;                   BX  - copy of digit
                           809     ;                   DX  - operand of multiply 
                           810     ;Global Variables:      None.                   
                           811     ;Input:                 None.
                           812     ;Output:                None.
                           813     ;Registers Used:        AX, BX, DX
                           814     ;Stack Depth:           3 words
                           815     ;Known Bugs:            None.
                           816     ;Data Structures:       None.
                           817     ;Error Handling:        If during the calculation, the magnitude is...
                           818     ;                   1. Greater than 16-bits
                           819     ;                   2. Greater than MAX_MAG
                           820     ;                   Then the digit cannot be added. Thus just return with errorflag r
                                   aised.
                           821     ;Algorithms:            new magnitude = magnitude * 10 + digit
                           822     ;Limitations:           None.
                           823     ;Author:                        Anjian Wu
                           824     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                           825     ;                   12-08-2013: Documentation - Anjian Wu
                           826     ;------------------------------------------------------------------------------
00B6                       827     Concat_Num  PROC    NEAR
                           828     
00B6 50                    829         PUSH    AX                      ; Store used regs
00B7 53                    830         PUSH    BX                      ;
00B8 52                    831         PUSH    DX                      ;
                           832         
00B9                       833     Concat_NumInit:
00B9 33DB                  834         XOR     BX, BX                  ; 
00BB 8AD8                  835         MOV     BL, AL                  ; Store the digit for later
                           836         
00BD                       837     Concat_Num_Test:   
00BD A10200         R      838         MOV     AX, magnitude           ; Copy mag for math
00C0 BA0A00                839         MOV     DX, DIGIT               ; We need a new spot for the next digit insertion
00C3 F7E2                  840         MUL     DX                      ; Add a 0's into magnitudes one's digit
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   14


LOC  OBJ                  LINE     SOURCE

00C5 7018                  841         JO      Concat_MagTooBig        ; Did the mag get too large? if so error
                           842         
00C7 03C3                  843         ADD     AX, BX                  ; Fill the new one's digit place with the passed 
                                   digit
00C9 7214                  844         JC      Concat_MagTooBig        ; Did the mag get too large? if so error
                           845         
00CB 3D0080                846         CMP     AX, MAX_MAG + 1         ; Does the mag fit the # of bits restriction?
00CE 7408                  847         JE      Concat_MagMaybeTooBig   ; It is exactly MAX_MAG + 1 , check if special ca
                                   se
00D0 770D                  848             JA              Concat_MagTooBig                ; Too large, report error
                           849         ;JLE    Concat_success          ; Everything ok, store the new mag
                           850         
00D2                       851     Concat_success:
00D2 A30200         R      852         MOV     magnitude, AX           ; Store new magnitude
00D5 EB0B90                853         JMP     Concat_done             ; Done
                           854     
                           855     ;   Since we are concatenating string rep of a 16-bit signed, the
                           856     ;   -(MAX_MAG + 1) is handled as a special case. 
                           857     
00D8                       858     Concat_MagMaybeTooBig:
00D8 803E0400FF     R      859             CMP             sign, NEGA                              ; Are we dealing with
                                    negative number?
00DD 74F3                  860             JE              Concat_success                  ;
                           861             ;JMP    Concat_MagTooBig                ;
                           862             
00DF                       863     Concat_MagTooBig:
00DF E80800                864         CALL    SetError                ; The new Mag is too large
00E2                       865     Concat_done:
                           866     
00E2 5A                    867         POP     DX
00E3 5B                    868         POP     BX
00E4 58                    869         POP     AX                      ; Restore used regs
                           870         
00E5 C3                    871         RET
                           872         
                           873     Concat_Num  ENDP
                           874     
                           875     ;Procedure:                     SetSign
                           876     ;
                           877     ;Description:           Sets sign based on passed token val. The token val is exactly
                           878     ;                   the sign we want.
                           879     ;Operation:         *sign = token val
                           880     ;Arguments:             AL - Token val containing sign
                           881     ;Return Values:         none.
                           882     ;Shared Variables:      sign(write)
                           883     ;Local Variables:       None.
                           884     ;Global Variables:      None.                   
                           885     ;Input:                 None.
                           886     ;Output:                None.
                           887     ;Registers Used:        AL
                           888     ;Stack Depth:           none.
                           889     ;Known Bugs:            None.
                           890     ;Data Structures:       None.
                           891     ;Error Handling:        None
                           892     ;Algorithms:            None.
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   15


LOC  OBJ                  LINE     SOURCE

                           893     ;Limitations:           None.
                           894     ;Author:                        Anjian Wu
                           895     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                           896     ;                   12-08-2013: Documentation - Anjian Wu
                           897     ;------------------------------------------------------------------------------
00E6                       898     SetSign     PROC    NEAR
                           899         
00E6 A20400         R      900         MOV     sign, AL    ; The passed token val itself is already the sign
                           901         
00E9 C3                    902         RET
                           903         
                           904     SetSign ENDP
                           905     
                           906     ;Procedure:                     SetError
                           907     ;
                           908     ;Description:           An error has occurred, so set the error flag true.
                           909     ;
                           910     ;Operation:         * Errorflag = TRUE
                           911     ;        
                           912     ;Arguments:             None.
                           913     ;Return Values:         none.
                           914     ;Shared Variables:      Errorflag(write)
                           915     ;Local Variables:       None.
                           916     ;Global Variables:      None.                   
                           917     ;Input:                 None.
                           918     ;Output:                None.
                           919     ;Registers Used:        AH, AL
                           920     ;Stack Depth:           none.
                           921     ;Known Bugs:            None.
                           922     ;Data Structures:       None.
                           923     ;Error Handling:        None
                           924     ;Algorithms:            None.
                           925     ;Limitations:           None.
                           926     ;Author:                        Anjian Wu
                           927     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                           928     ;                   12-08-2013: Documentation - Anjian Wu
                           929     ;------------------------------------------------------------------------------
00EA                       930     SetError        PROC    NEAR
                           931     
00EA C70600000100   R      932         MOV     Errorflag, TRUE     ; An error has occurred
                           933     
00F0 C3                    934         RET
                           935         
                           936     SetError ENDP
                           937     
                           938     
                           939     ;Procedure:                     SetSpeed
                           940     ;
                           941     ;Description:           Sets the speed only, and does not change angle. The speed is 
                           942     ;                   exactly the magnitude.
                           943     ;
                           944     ;Operation:         * SetMotorSpeed(magnitude, NO_ANGLE_CHANGED)
                           945     ;                
                           946     ;Arguments:             None.
                           947     ;Return Values:         none.
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   16


LOC  OBJ                  LINE     SOURCE

                           948     ;Shared Variables:      magnitude (READ)
                           949     ;Local Variables:       None.
                           950     ;Global Variables:      None.                   
                           951     ;Input:                 None.
                           952     ;Output:                None.
                           953     ;Registers Used:        AX, BX
                           954     ;Stack Depth:           none.
                           955     ;Known Bugs:            None.
                           956     ;Data Structures:       None.
                           957     ;Error Handling:        None
                           958     ;Algorithms:            None.
                           959     ;Limitations:           None.
                           960     ;Author:                        Anjian Wu
                           961     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                           962     ;                   12-08-2013: Documentation - Anjian Wu
                           963     ;------------------------------------------------------------------------------
00F1                       964     SetSpeed        PROC    NEAR
                           965     
00F1 50                    966             PUSH    AX                  ; Saved used regs
00F2 53                    967             PUSH    BX
                           968                     
00F3 A10200         R      969         MOV     AX, magnitude       ; Concat_Num already ensures magnitude is VALID val
                           970                                     ; thus just directly set it
00F6 BB0080                971         MOV     BX, NO_ANGLE_CHANGE ;
00F9 E80000         E      972         CALL    SetMotorSpeed       ;
                           973         
                           974     
00FC 5B                    975             POP             BX
00FD 58                    976             POP             AX                  ; Restore used regs
                           977             
00FE C3                    978         RET
                           979         
                           980     SetSpeed    ENDP
                           981     
                           982     ;Procedure:                     SetRelSpeed
                           983     ;
                           984     ;Description:           Sets the relative speed passed on stored values of magnitude 
                                   and sign.
                           985     ;                   If magnitude * sign's change in speed is beyond MIN or MAX ABS_SP
                                   EED,
                           986     ;                   then CAP the value at exactly the MIN or MAX_ABS_SPEED.
                           987     ;
                           988     ;Operation:         * Grab motor speed
                           989     ;                   * If (sign is POS)
                           990     ;                       * next speed = current speed + magnitude 
                           991     ;                   * Else
                           992     ;                       * next speed = current speed - magnitude 
                           993     ;                   * If either previous operations exceeded 16-bits (carry flag)
                           994     ;                     then set next speed to MAX_ABS_SPEED and MIN_ABS_SPEED 
                           995     ;                     respectively.
                           996     ;                   * Also if next speed happens to be NO_SPEED_CHANGE, then also
                           997     ;                     set next speed as MAX_ABS_SPEED.
                           998     ;                   * Finally SetMotorSpeed(next speed, NO_ANGLE_CHANGE).
                           999     ;                
                          1000     ;Arguments:             None.
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   17


LOC  OBJ                  LINE     SOURCE

                          1001     ;Return Values:         none.
                          1002     ;Shared Variables:      magnitude (READ)
                          1003     ;                   sign (READ)
                          1004     ;Local Variables:       AX - next speed
                          1005     ;Global Variables:      None.                   
                          1006     ;Input:                 None.
                          1007     ;Output:                None.
                          1008     ;Registers Used:        AX, BX
                          1009     ;Stack Depth:           2 words
                          1010     ;Known Bugs:            None.
                          1011     ;Data Structures:       None.
                          1012     ;Error Handling:        If change in speed results in exceeding 16-bits (carry flag)
                          1013     ;                   then set next speed to MAX_ABS_SPEED and MIN_ABS_SPEED 
                          1014     ;                   respectively. Also if next speed happens to be NO_SPEED_CHANGE, 
                          1015     ;                   then also set next speed as MAX_ABS_SPEED.
                          1016     ;Algorithms:            next speed = current speed +- magnitude
                          1017     ;Limitations:           None.
                          1018     ;Author:                        Anjian Wu
                          1019     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1020     ;                   12-04-2013: Initial assembly - Anjian Wu
                          1021     ;                   12-08-2013: Documentation - Anjian Wu
                          1022     ;------------------------------------------------------------------------------
00FF                      1023     SetRelSpeed     PROC    NEAR
                          1024     
00FF 50                   1025         PUSH    AX                      ; Save Used Regs
0100 53                   1026         PUSH    BX
                          1027     
0101                      1028     SetRelSpeedInit:
0101 E80000         E     1029         CALL    GetMotorSpeed           ; Current Speed now in AX
0104 803E040001     R     1030         CMP     sign, POS               ; Is this positive speed change?
0109 740C                 1031         JE      SetRelSpeedPos          ; Yes
                          1032         ;JNE    SetRelSpeedNeg          ; No
                          1033         
010B                      1034     SetRelSpeedNeg:
010B 2B060200       R     1035         SUB     AX, magnitude           ; next speed = current speed - magnitude
010F 7314                 1036         JNC     SetRelSpeedWrite        ; Speed is valid?
                          1037         ;JC      SetRelWentNeg          ; Speed went 'negative' and not valid
0111                      1038     SetRelWentNeg:
0111 B80000               1039         MOV     AX, MIN_ABS_SPEED       ; Just make the robot at lowest speed
0114 EB0F90               1040         JMP     SetRelSpeedWrite        ;
                          1041         
0117                      1042     SetRelSpeedPos:
0117 03060200       R     1043         ADD     AX, magnitude           ; next speed = current speed + magnitude
011B 7205                 1044         JC      SetRelWentOver          ; Is speed is within 16-bits? 
011D 3DFFFF               1045             CMP             AX, NO_SPEED_CHANGE             ; Is speed at reserved NO_SPE
                                   ED_CHANGE val?
0120 7503                 1046             JNE             SetRelSpeedWrite                ; Speed is valid
                          1047         ;JE      SetRelWentOver         ; Speed is valid 16-bit num, but went 
                          1048                                                                             ; to the val 
                                   of NO_SPEED_CHANGE, which is 
                          1049                                                                             ; reserved
                          1050         
0122                      1051     SetRelWentOver:                    
0122 B8FEFF               1052         MOV     AX, MAX_ABS_SPEED       ; Just make the robot at max speed
                          1053         ;JMP     SetRelSpeedWrite        
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   18


LOC  OBJ                  LINE     SOURCE

                          1054         
0125                      1055     SetRelSpeedWrite:                   ; Speed is valid, so store it
0125 BB0080               1056         MOV     BX, NO_ANGLE_CHANGE     ; Just speed change, not angle
0128 E80000         E     1057         CALL    SetMotorSpeed           ; Set new speed
                          1058         
012B 5B                   1059         POP     BX
012C 58                   1060         POP     AX                      ; Restore used regs
                          1061         
012D C3                   1062         RET
                          1063         
                          1064     SetRelSpeed ENDP
                          1065     
                          1066     ;Procedure:                     SetDir
                          1067     ;
                          1068     ;
                          1069     ;Description:           Sets the signed angle direction of the robot without changing
                                    speed.
                          1070     ;                   Since magnitude is now in degrees, this function transforms
                          1071     ;                   the magnitude into it's equivalent degrees in [-360,+360].
                          1072     ;                   This approach violates the HW8tests, but passes equivalent
                          1073     ;                   angle vals.
                          1074     ;
                          1075     ;Operation:         * DeltaAngle = MOD((sign*magnitude), FULL_ANGLE)
                          1076     ;                   * NewAngle = GetMotorSpeed + DeltaAngle
                          1077     ;                   * SetMotorSpeed(NO_SPEED_CHANGE, NewAngle)
                          1078     ;                
                          1079     ;Arguments:             None.
                          1080     ;Return Values:         none.
                          1081     ;Shared Variables:      magnitude (READ)
                          1082     ;                   sign (READ)
                          1083     ;Local Variables:       AX  - delta angle
                          1084     ;                   BX  - NO_SPEED_CHANGE
                          1085     ;                   DX  - current angle
                          1086     ;Global Variables:      None.                   
                          1087     ;Input:                 None.
                          1088     ;Output:                None.
                          1089     ;Registers Used:        AX, BX, DX
                          1090     ;Stack Depth:           3 words
                          1091     ;Known Bugs:            None.
                          1092     ;Data Structures:       None.
                          1093     ;Error Handling:        None
                          1094     ;Algorithms:            DeltaAngle = MOD((sign*magnitude), FULL_ANGLE)
                          1095     ;Limitations:           None.
                          1096     ;Author:                        Anjian Wu
                          1097     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1098     ;                   12-04-2013: Initial assembly - Anjian Wu
                          1099     ;                   12-08-2013: Documentation - Anjian Wu
                          1100     ;------------------------------------------------------------------------------
012E                      1101     SetDir      PROC    NEAR
                          1102     
012E 50                   1103         PUSH    AX                      ; Save Used Regs
012F 53                   1104         PUSH    BX
0130 52                   1105         PUSH    DX
                          1106      
                          1107 +1          
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   19


LOC  OBJ                  LINE     SOURCE

0131 8B1E0200       R     1108 +2          MOV             BX,  magnitude                  ; Grab the magnitude (unsigne
                                   d 15-bit)
0135 A00400         R     1109 +2      MOV     AL, sign                ; Grab the sign 
0138 98                   1110 +1      CBW                             ; Sign is actually a DB, so convert to DW equiv
                          1111 +1      
0139 F7EB                 1112 +1      IMUL    BX                      ; Convert 15-bit unsigned to 16-bit signed ANGLE
                          1113 +1                                      ; in AX
                          1114 +1  
013B BB6801               1115 +1      MOV     BX, FULL_ANGLE          ; 
013E 99                   1116 +1      CWD                             ; Prepare for signed DIV
013F F7FB                 1117 +1      IDIV    BX                          ; Take the MOD to Full angle -> DX
                          1118 +1   ; Calc signed angle value
                          1119         
                          1120         ; EQuivalent Angle now in DX with value in range [-360,360]
                          1121         
                          1122         ; We grab a small magnitude equivalent angle because now we can ADD the signed
                          1123         ; angles safely without worrying about truncation.
                          1124         
0141 E80000         E     1125         CALL    GetMotorDirection       ; Grab current angle [-360,360] in AX
                          1126         
0144 03C2                 1127         ADD     AX, DX                  ; Combine to get overall new angle (fits in signe
                                   d 16-bit for sure)
                          1128                                         ; [-360*2,+360*2]
                          1129       
0146                      1130      SetDirSend:
0146 BBFFFF               1131         MOV     BX, NO_SPEED_CHANGE     ; We just want angle changed, not speed
                          1132         
0149 93                   1133         XCHG    AX, BX                  ; Actually want args passed swapped
                          1134     
014A E80000         E     1135         CALL    SetMotorSpeed           ; Change Angle only
                          1136         
014D 5A                   1137         POP     DX
014E 5B                   1138         POP     BX
014F 58                   1139         POP     AX                      ; Restore used regs
                          1140     
0150 C3                   1141         RET
                          1142         
                          1143     SetDir  ENDP
                          1144     
                          1145     ;Procedure:                     RotAbsTurrAng
                          1146     ;
                          1147     ;Description:           Sets the signed angle of the robot turret.
                          1148     ;                   Since magnitude is now in degrees, this function transforms
                          1149     ;                   the magnitude into it's equivalent degrees in [-360,+360].
                          1150     ;                   This approach violates the HW8tests, but passes equivalent
                          1151     ;                   angle vals.
                          1152     ;
                          1153     ;Operation:         * NewAngle = MOD((sign*magnitude), FULL_ANGLE)
                          1154     ;                   * SetTurretAngle(NewAngle)
                          1155     ;                
                          1156     ;Arguments:             None.
                          1157     ;Return Values:         none.
                          1158     ;Shared Variables:      magnitude (READ)
                          1159     ;                   sign (READ)
                          1160     ;Local Variables:       AX  - NewAngle angle
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   20


LOC  OBJ                  LINE     SOURCE

                          1161     ;                   DX  - NewAngle angle
                          1162     ;Global Variables:      None.                   
                          1163     ;Input:                 None.
                          1164     ;Output:                None.
                          1165     ;Registers Used:        AX, DX
                          1166     ;Stack Depth:           3 words
                          1167     ;Known Bugs:            None.
                          1168     ;Data Structures:       None.
                          1169     ;Error Handling:        None
                          1170     ;Algorithms:            NewAngle = MOD((sign*magnitude), FULL_ANGLE)
                          1171     ;Limitations:           None.
                          1172     ;Author:                        Anjian Wu
                          1173     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1174     ;                   12-04-2013: Initial assembly - Anjian Wu
                          1175     ;                   12-08-2013: Documentation - Anjian Wu
                          1176     ;------------------------------------------------------------------------------
0151                      1177     RotAbsTurrAng       PROC    NEAR
                          1178         
0151 50                   1179         PUSH    AX                      ; Save Used Regs
0152 53                   1180         PUSH    BX
0153 52                   1181         PUSH    DX
                          1182         
                          1183 +1          
0154 8B1E0200       R     1184 +2          MOV             BX,  magnitude                  ; Grab the magnitude (unsigne
                                   d 15-bit)
0158 A00400         R     1185 +2      MOV     AL, sign                ; Grab the sign 
015B 98                   1186 +1      CBW                             ; Sign is actually a DB, so convert to DW equiv
                          1187 +1      
015C F7EB                 1188 +1      IMUL    BX                      ; Convert 15-bit unsigned to 16-bit signed ANGLE
                          1189 +1                                      ; in AX
                          1190 +1  
015E BB6801               1191 +1      MOV     BX, FULL_ANGLE          ; 
0161 99                   1192 +1      CWD                             ; Prepare for signed DIV
0162 F7FB                 1193 +1      IDIV    BX                          ; Take the MOD to Full angle -> DX
                          1194 +1   ; Calc signed angle value
                          1195         
                          1196         ; EQuivalent Angle now in DX with value in range [0,360]
                          1197         ;
                          1198         ; We grab a small magnitude equivalent angle because now we can ADD the signed
                          1199         ; angles safely without worrying about truncation.
                          1200         ; Also we know it is positive since this function is for ABS angle and 
                          1201         ; magnitude = 15-bit, so just reused SignAngleMod_DX.
                          1202         
0164 8BC2                 1203         MOV     AX, DX                  ;  Prepare to pass angle
                          1204                     
0166 E80000         E     1205         CALL    SetTurretAngle       ;  Pass angle in AX [0 to 360]
                          1206     
0169 5A                   1207         POP     DX
016A 5B                   1208         POP     BX
016B 58                   1209         POP     AX                      ; Restore used regs
                          1210         
016C C3                   1211         RET                             ;
                          1212         
                          1213         
                          1214     RotAbsTurrAng   ENDP
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   21


LOC  OBJ                  LINE     SOURCE

                          1215     
                          1216     ;Procedure:                     RotRelTurrAng
                          1217     ;
                          1218     ;Description:           Sets the relative change signed angle of the robot turret.
                          1219     ;                   Since magnitude is now in degrees, this function transforms
                          1220     ;                   the magnitude into it's equivalent degrees in [-360,+360].
                          1221     ;                   This approach violates the HW8tests, but passes equivalent
                          1222     ;                   angle vals.
                          1223     ;
                          1224     ;Operation:         * Deltangle = MOD((sign*magnitude), FULL_ANGLE)
                          1225     ;                   * SetRelTurretAngle(Deltangle)
                          1226     ;                
                          1227     ;Arguments:             None.
                          1228     ;Return Values:         none.
                          1229     ;Shared Variables:      magnitude (READ)
                          1230     ;                   sign (READ)
                          1231     ;Local Variables:       AX  - delta angle
                          1232     ;                   DX  - current angle
                          1233     ;Global Variables:      None.                   
                          1234     ;Input:                 None.
                          1235     ;Output:                None.
                          1236     ;Registers Used:        AX, DX
                          1237     ;Stack Depth:           3 words
                          1238     ;Known Bugs:            None.
                          1239     ;Data Structures:       None.
                          1240     ;Error Handling:        None
                          1241     ;Algorithms:            Deltangle = MOD((sign*magnitude), FULL_ANGLE)
                          1242     ;Limitations:           None.
                          1243     ;Author:                        Anjian Wu
                          1244     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1245     ;                   12-04-2013: Initial assembly - Anjian Wu
                          1246     ;                   12-08-2013: Documentation - Anjian Wu
                          1247     ;------------------------------------------------------------------------------
016D                      1248     RotRelTurrAng   PROC    NEAR
016D 50                   1249         PUSH    AX                      ; Save Used Regs
016E 53                   1250         PUSH    BX
016F 52                   1251         PUSH    DX
                          1252         
                          1253 +1          
0170 8B1E0200       R     1254 +2          MOV             BX,  magnitude                  ; Grab the magnitude (unsigne
                                   d 15-bit)
0174 A00400         R     1255 +2      MOV     AL, sign                ; Grab the sign 
0177 98                   1256 +1      CBW                             ; Sign is actually a DB, so convert to DW equiv
                          1257 +1      
0178 F7EB                 1258 +1      IMUL    BX                      ; Convert 15-bit unsigned to 16-bit signed ANGLE
                          1259 +1                                      ; in AX
                          1260 +1  
017A BB6801               1261 +1      MOV     BX, FULL_ANGLE          ; 
017D 99                   1262 +1      CWD                             ; Prepare for signed DIV
017E F7FB                 1263 +1      IDIV    BX                          ; Take the MOD to Full angle -> DX
                          1264 +1   ; Calc signed angle value
                          1265         
0180 8BC2                 1266         MOV     AX, DX                  ; Prepare to pass angle ARG
0182 E80000         E     1267         CALL    SetRelTurretAngle       ; Pass the SIGNED relative angle [ -360,+ 360]
                          1268     
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   22


LOC  OBJ                  LINE     SOURCE

0185 5A                   1269         POP     DX
0186 5B                   1270         POP     BX
0187 58                   1271         POP     AX                      ; Restore used regs
                          1272         
0188 C3                   1273         RET
                          1274         
                          1275     RotRelTurrAng   ENDP
                          1276     
                          1277     ;Procedure:                     SetTurrEleAng
                          1278     ;
                          1279     ;Description:           Sets the signed angle elevation of the robot turret.
                          1280     ;                   Since magnitude is now in degrees, this function transforms
                          1281     ;                   the magnitude into it's equivalent degrees in [-360,+360].
                          1282     ;                   This approach violates the HW8tests, but passes equivalent
                          1283     ;                   angle vals.
                          1284     ;   
                          1285     ;                   Also ensures that the NewAngle is within [MIN_ELEVATION,MAX_ELEVA
                                   TION]
                          1286     ;
                          1287     ;Operation:         * NewAngle = MOD((sign*magnitude), FULL_ANGLE)
                          1288     ;                   * IF NewAngle is > MAX_ELEVATION or < MIN_ELEVATION
                          1289     ;                       then NewAngle = MAX_ELEVATION, MIN_ELEVATION respectively
                          1290     ;                   * SetTurretAngle(NewAngle)
                          1291     ;                
                          1292     ;Arguments:             None.
                          1293     ;Return Values:         none.
                          1294     ;Shared Variables:      magnitude (READ)
                          1295     ;                   sign (READ)
                          1296     ;Local Variables:       AX  - delta angle
                          1297     ;                   DX  - current angle
                          1298     ;Global Variables:      None.                   
                          1299     ;Input:                 None.
                          1300     ;Output:                None.
                          1301     ;Registers Used:        AX, DX
                          1302     ;Stack Depth:           3 words
                          1303     ;Known Bugs:            None.
                          1304     ;Data Structures:       None.
                          1305     ;Error Handling:        IF NewAngle is > MAX_ELEVATION or < MIN_ELEVATION
                          1306     ;                   then NewAngle = MAX_ELEVATION, MIN_ELEVATION respectively
                          1307     ;
                          1308     ;Algorithms:            Deltangle = MOD((sign*magnitude), FULL_ANGLE)
                          1309     ;Limitations:           None.
                          1310     ;Author:                        Anjian Wu
                          1311     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1312     ;                   12-04-2013: Initial assembly - Anjian Wu
                          1313     ;                   12-08-2013: Documentation - Anjian Wu
                          1314     ;------------------------------------------------------------------------------
0189                      1315     SetTurrEleAng       PROC    NEAR
0189 50                   1316         PUSH    AX                          ; Save Used Regs
018A 53                   1317         PUSH    BX
018B 52                   1318         PUSH    DX
                          1319         
                          1320 +1          
018C 8B1E0200       R     1321 +2          MOV             BX,  magnitude                  ; Grab the magnitude (unsigne
                                   d 15-bit)
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   23


LOC  OBJ                  LINE     SOURCE

0190 A00400         R     1322 +2      MOV     AL, sign                ; Grab the sign 
0193 98                   1323 +1      CBW                             ; Sign is actually a DB, so convert to DW equiv
                          1324 +1      
0194 F7EB                 1325 +1      IMUL    BX                      ; Convert 15-bit unsigned to 16-bit signed ANGLE
                          1326 +1                                      ; in AX
                          1327 +1  
0196 BB6801               1328 +1      MOV     BX, FULL_ANGLE          ; 
0199 99                   1329 +1      CWD                             ; Prepare for signed DIV
019A F7FB                 1330 +1      IDIV    BX                          ; Take the MOD to Full angle -> DX
                          1331 +1     ; Calc signed angle value
                          1332         
019C 83FA3C               1333         CMP     DX, MAX_ELEVATION           ; Is the angle too big?
019F 7F12                 1334         JG      SetTurrEleAngMAX            ; Yes          
01A1 83FAC4               1335         CMP     DX, MIN_ELEVATION           ; Is the angle too small?
01A4 7C08                 1336         JL      SetTurrEleAngMIN            ; Yes
                          1337         ;JMP    SetTurrEleAngSET            ; It is neither too small or too big
                          1338         
01A6                      1339     SetTurrEleAngSET:
01A6 8BC2                 1340         MOV     AX, DX                      ; Prepare to set angle
01A8 E80000         E     1341         CALL    SetTurretElevation          ; Pass signed angle
01AB EB0B90               1342         JMP     SetTurrEleAngDONE           ; Done
                          1343         
01AE                      1344     SetTurrEleAngMIN:
01AE BA3C00               1345         MOV     DX, MAX_ELEVATION           ; Too big -> just set at MAX_ELEVATION
01B1 EBF3                 1346         JMP     SetTurrEleAngSET            ; Set it
01B3                      1347     SetTurrEleAngMAX:
01B3 BAC4FF               1348         MOV     DX, MIN_ELEVATION           ; Too small -> just set at MIN_ELEVATION
01B6 EBEE                 1349         JMP     SetTurrEleAngSET            ;
                          1350         
01B8                      1351     SetTurrEleAngDONE:
                          1352         
01B8 5A                   1353         POP     DX
01B9 5B                   1354         POP     BX
01BA 58                   1355         POP     AX                          ; Restore used regs
                          1356        
01BB C3                   1357         RET
                          1358     SetTurrEleAng   ENDP
                          1359     
                          1360     ;Procedure:                     LaserON
                          1361     ;
                          1362     ;Description:           Turns the laser ON
                          1363     ;
                          1364     ;Operation:         * SetLaser(TRUE)
                          1365     ;                
                          1366     ;Arguments:         None.
                          1367     ;Return Values:         None.
                          1368     ;Shared Variables:      None.
                          1369     ;Local Variables:       None.
                          1370     ;Global Variables:      None.                   
                          1371     ;Input:                 None.
                          1372     ;Output:                None.
                          1373     ;Registers Used:        None.
                          1374     ;Stack Depth:           none.
                          1375     ;Known Bugs:            None.
                          1376     ;Data Structures:       None.
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   24


LOC  OBJ                  LINE     SOURCE

                          1377     ;Error Handling:        None.
                          1378     ;Algorithms:            None.
                          1379     ;Limitations:           None.
                          1380     ;Author:                        Anjian Wu
                          1381     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1382     ;                   12-04-2013: Initial assembly - Anjian Wu
                          1383     ;                   12-08-2013: Documentation - Anjian Wu
                          1384     ;------------------------------------------------------------------------------
01BC                      1385     LaserON    PROC    NEAR
                          1386     
01BC 50                   1387             PUSH    AX
01BD 53                   1388             PUSH    BX
                          1389             
01BE                      1390     LaserControlON:
01BE B80100               1391             MOV             AX, TRUE                ;
                          1392     
01C1                      1393     LaserOnDONE:    
01C1 E80000         E     1394         CALL    SetLaser        ; So just pass in AX
                          1395             
01C4 5B                   1396             POP             BX
01C5 58                   1397             POP             AX
                          1398             
01C6 C3                   1399         RET                     ;
                          1400     
                          1401     LaserON    ENDP
                          1402     
                          1403     ;Procedure:                     LaserOFF
                          1404     ;
                          1405     ;Description:           Turns the laser OFF
                          1406     ;
                          1407     ;Operation:         * SetLaser(FALSE)  
                          1408     ;Arguments:         None.
                          1409     ;Return Values:         None.
                          1410     ;Shared Variables:      None.
                          1411     ;Local Variables:       None.
                          1412     ;Global Variables:      None.                   
                          1413     ;Input:                 None.
                          1414     ;Output:                None.
                          1415     ;Registers Used:        None.
                          1416     ;Stack Depth:           none.
                          1417     ;Known Bugs:            None.
                          1418     ;Data Structures:       None.
                          1419     ;Error Handling:        None.
                          1420     ;Algorithms:            None.
                          1421     ;Limitations:           None.
                          1422     ;Author:                        Anjian Wu
                          1423     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1424     ;                   12-04-2013: Initial assembly - Anjian Wu
                          1425     ;                   12-08-2013: Documentation - Anjian Wu
                          1426     ;------------------------------------------------------------------------------
01C7                      1427     LaserOFF    PROC    NEAR
                          1428     
01C7 50                   1429             PUSH    AX
01C8 53                   1430             PUSH    BX
                          1431             
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   25


LOC  OBJ                  LINE     SOURCE

01C9                      1432     LaserControlOff:
01C9 B80000               1433             MOV             AX, FALSE               ;
                          1434     
01CC                      1435     LaserOffDONE:   
01CC E80000         E     1436         CALL    SetLaser        ; So just pass in AX
                          1437             
01CF 5B                   1438             POP             BX
01D0 58                   1439             POP             AX
                          1440             
01D1 C3                   1441         RET                     ;
                          1442     
                          1443     LaserOFF    ENDP
                          1444     
                          1445     ; RobotFSMTable
                          1446     ;
                          1447     ; Description:      This is the state transition table for the robot side.
                          1448     ;                   Each entry consists of the next state and action^s for that
                          1449     ;                   transition.  The rows are associated with the current
                          1450     ;                   state and the columns with the input type.
                          1451     ;
                          1452     ; Author:           Anjian Wu
                          1453     ; Last Modified:    12-02-2013:
                          1454     ;                   12-05-2013: Fixed Laser state - Anjian Wu
                          1455     
                          1456     
----                      1457     TRANSITION_ENTRY        STRUC           ;structure used to define table
0000                      1458         NEXTSTATE   DB      ?               ;the next state for the transition
0001                      1459         ACTION      DW      ?               ;action for the transition
----                      1460     TRANSITION_ENTRY      ENDS
                          1461     
                          1462     
                          1463     ;define a macro to make table a little more readable
                          1464     ;macro just does an offset of the action routine entries to build the STRUC
                          1465     
                          1466     
                          1467     
01D2                      1468     RobotFSMTable   LABEL   TRANSITION_ENTRY
                          1469     
                          1470             ;Current State = ST_INITIAL: Waiting for command    
                          1471                                                 ;Input Token Type
                          1472 +1          
01D2 01             E     1473 +2      TRANSITION_ENTRY< ST_SAS_INIT, OFFSET( no_op) >
01D3 0000
                          1474 +1              ;TOKEN_S - Set Speed
                          1475 +1          
01D5 04             E     1476 +2      TRANSITION_ENTRY< ST_SRS_INIT, OFFSET( no_op) >
01D6 0000
                          1477 +1       ;TOKEN_V - Set Rel Speed
                          1478 +1          
01D8 07             E     1479 +2      TRANSITION_ENTRY< ST_DIR_INIT, OFFSET( no_op) >
01D9 0000
                          1480 +1              ;TOKEN_D - Set Dir
                          1481 +1          
01DB 0A             E     1482 +2      TRANSITION_ENTRY< ST_RTR_INIT, OFFSET( no_op) >
01DC 0000
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   26


LOC  OBJ                  LINE     SOURCE

                          1483 +1              ;TOKEN_T - Rot Turr Angl
                          1484 +1          
01DE 0E             E     1485 +2      TRANSITION_ENTRY< ST_STEA_INIT, OFFSET( no_op) >
01DF 0000
                          1486 +1          ;TOKEN_E - Set Turr Ele
                          1487 +1          
01E1 11             E     1488 +2      TRANSITION_ENTRY< ST_LAZON, OFFSET( no_op) >
01E2 0000
                          1489 +1              ;TOKEN_F - Laser On
                          1490 +1          
01E4 12             E     1491 +2      TRANSITION_ENTRY< ST_LAZOFF, OFFSET( no_op) >
01E5 0000
                          1492 +1         ;TOKEN_O - Laser Off
                          1493 +1          
01E7 00             R     1494 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01E8 EA00
                          1495 +1          ;TOKEN_NUM - A digit
                          1496 +1          
01EA 00             R     1497 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01EB EA00
                          1498 +1          ;TOKEN_POS - '+'
                          1499 +1          
01ED 00             R     1500 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01EE EA00
                          1501 +1          ;TOKEN_NEG - '-'
                          1502 +1          
01F0 00             E     1503 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( no_op) >
01F1 0000
                          1504 +1                  ;TOKEN_IGNORE
                          1505 +1          
01F3 00             E     1506 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( no_op) >
01F4 0000
                          1507 +1                  ;TOKEN_END - Return
                          1508 +1          
01F6 00             R     1509 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01F7 EA00
                          1510 +1          ;TOKEN_OTHER    
                          1511             
                          1512     ;-----------------------------Setting Absolute Speed---------------------------------
                                   -  
                          1513             ;Current State = ST_SAS_INIT: Waiting for digit to srat      
                          1514                                                 ;Input Token Type
                          1515 +1          
01F9 00             R     1516 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01FA EA00
                          1517 +1          ;TOKEN_S 
                          1518 +1          
01FC 00             R     1519 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01FD EA00
                          1520 +1     ;TOKEN_V
                          1521 +1          
01FF 00             R     1522 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0200 EA00
                          1523 +1          ;TOKEN_D 
                          1524 +1          
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   27


LOC  OBJ                  LINE     SOURCE

0202 00             R     1525 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0203 EA00
                          1526 +1          ;TOKEN_T 
                          1527 +1          
0205 00             R     1528 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0206 EA00
                          1529 +1          ;TOKEN_E 
                          1530 +1          
0208 00             R     1531 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0209 EA00
                          1532 +1          ;TOKEN_F
                          1533 +1          
020B 00             R     1534 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
020C EA00
                          1535 +1     ;TOKEN_O
                          1536             
                          1537 +1          
020E 03             R     1538 +2      TRANSITION_ENTRY< ST_SAS, OFFSET( Concat_Num) >
020F B600
                          1539 +1       ;TOKEN_NUM - A digit - thus concatenate it
                          1540             
                          1541 +1          
0211 02             E     1542 +2      TRANSITION_ENTRY< ST_SAS_SIGN, OFFSET( no_op) >
0212 0000
                          1543 +1                  ;TOKEN_POS - '+' Accepted, but effectively ignored
                          1544 +1          
0214 00             R     1545 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0215 EA00
                          1546 +1     ;TOKEN_NEG - '-'
                          1547 +1          
0217 01             E     1548 +2      TRANSITION_ENTRY< ST_SAS_INIT, OFFSET( no_op) >
0218 0000
                          1549 +1              ;TOKEN_IGNORE - Keep Waiting for start of digit
                          1550 +1          
021A 00             R     1551 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
021B EA00
                          1552 +1          ;TOKEN_END - Return
                          1553 +1          
021D 00             R     1554 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
021E EA00
                          1555 +1          ;TOKEN_OTHER    
                          1556             
                          1557             ;Current State = ST_SAS_SIGN: Waiting for digit to srat      
                          1558                                                 ;Input Token Type
                          1559 +1          
0220 00             R     1560 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0221 EA00
                          1561 +1          ;TOKEN_S 
                          1562 +1          
0223 00             R     1563 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0224 EA00
                          1564 +1     ;TOKEN_V
                          1565 +1          
0226 00             R     1566 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0227 EA00
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   28


LOC  OBJ                  LINE     SOURCE

                          1567 +1          ;TOKEN_D 
                          1568 +1          
0229 00             R     1569 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
022A EA00
                          1570 +1          ;TOKEN_T 
                          1571 +1          
022C 00             R     1572 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
022D EA00
                          1573 +1          ;TOKEN_E 
                          1574 +1          
022F 00             R     1575 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0230 EA00
                          1576 +1          ;TOKEN_F
                          1577 +1          
0232 00             R     1578 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0233 EA00
                          1579 +1     ;TOKEN_O
                          1580             
                          1581 +1          
0235 03             R     1582 +2      TRANSITION_ENTRY< ST_SAS, OFFSET( Concat_Num) >
0236 B600
                          1583 +1       ;TOKEN_NUM - A digit - thus concatenate it
                          1584             
                          1585 +1          
0238 00             R     1586 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0239 EA00
                          1587 +1          ;TOKEN_POS - '+' Accepted, but effectively ignored
                          1588 +1          
023B 00             R     1589 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
023C EA00
                          1590 +1     ;TOKEN_NEG - '-'
                          1591 +1          
023E 02             E     1592 +2      TRANSITION_ENTRY< ST_SAS_SIGN, OFFSET( no_op) >
023F 0000
                          1593 +1              ;TOKEN_IGNORE - Keep Waiting for start of digit
                          1594 +1          
0241 00             R     1595 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0242 EA00
                          1596 +1     ;TOKEN_END - Return
                          1597 +1          
0244 00             R     1598 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0245 EA00
                          1599 +1          ;TOKEN_OTHER    
                          1600     
                          1601             ;Current State = ST_SAS: Keep grabbing digit until return   
                          1602                                                 ;Input Token Type
                          1603 +1          
0247 00             R     1604 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0248 EA00
                          1605 +1          ;TOKEN_S - Set Speed
                          1606 +1          
024A 00             R     1607 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
024B EA00
                          1608 +1     ;TOKEN_V - Set Rel Speed
                          1609 +1          
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   29


LOC  OBJ                  LINE     SOURCE

024D 00             R     1610 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
024E EA00
                          1611 +1          ;TOKEN_D - Set Dir
                          1612 +1          
0250 00             R     1613 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0251 EA00
                          1614 +1          ;TOKEN_T - Rot Turr Angl
                          1615 +1          
0253 00             R     1616 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0254 EA00
                          1617 +1          ;TOKEN_E - Set Turr Ele
                          1618 +1          
0256 00             R     1619 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0257 EA00
                          1620 +1          ;TOKEN_F - Laser On
                          1621 +1          
0259 00             R     1622 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
025A EA00
                          1623 +1     ;TOKEN_O - Laser Off
                          1624             
                          1625 +1          
025C 03             R     1626 +2      TRANSITION_ENTRY< ST_SAS, OFFSET( Concat_Num) >
025D B600
                          1627 +1       ;TOKEN_NUM - A digit - thus concatenate it
                          1628             
                          1629 +1          
025F 00             R     1630 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0260 EA00
                          1631 +1          ;TOKEN_POS - '+'
                          1632 +1          
0262 00             R     1633 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0263 EA00
                          1634 +1          ;TOKEN_NEG - '-'
                          1635 +1          
0265 03             E     1636 +2      TRANSITION_ENTRY< ST_SAS, OFFSET( no_op) >
0266 0000
                          1637 +1                  ;TOKEN_IGNORE - Keep Waiting for start of digit
                          1638 +1          
0268 00             R     1639 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetSpeed) >
0269 F100
                          1640 +1          ;TOKEN_END - Return
                          1641 +1          
026B 00             R     1642 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
026C EA00
                          1643 +1          ;TOKEN_OTHER
                          1644             
                          1645     ;-----------------------------Setting Relative Speed---------------------------------
                                   -  
                          1646     
                          1647             ;Current State = ST_SRS_INIT: Waiting for DIGIT or Sign           
                          1648                                                 ;Input Token Type
                          1649 +1          
026E 00             R     1650 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
026F EA00
                          1651 +1          ;TOKEN_S 
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   30


LOC  OBJ                  LINE     SOURCE

                          1652 +1          
0271 00             R     1653 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0272 EA00
                          1654 +1     ;TOKEN_V 
                          1655 +1          
0274 00             R     1656 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0275 EA00
                          1657 +1          ;TOKEN_D 
                          1658 +1          
0277 00             R     1659 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0278 EA00
                          1660 +1          ;TOKEN_T
                          1661 +1          
027A 00             R     1662 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
027B EA00
                          1663 +1          ;TOKEN_E
                          1664 +1          
027D 00             R     1665 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
027E EA00
                          1666 +1          ;TOKEN_F
                          1667 +1          
0280 00             R     1668 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0281 EA00
                          1669 +1     ;TOKEN_O
                          1670             
                          1671 +1          
0283 06             R     1672 +2      TRANSITION_ENTRY< ST_SRS, OFFSET( Concat_Num) >
0284 B600
                          1673 +1       ;TOKEN_NUM: A digit - thus concatenate it
                          1674             
                          1675 +1          
0286 05             R     1676 +2      TRANSITION_ENTRY< ST_SRS_SIGN, OFFSET( SetSign) >
0287 E600
                          1677 +1     ;TOKEN_POS - '+' Wait for sign
                          1678 +1          
0289 05             R     1679 +2      TRANSITION_ENTRY< ST_SRS_SIGN, OFFSET( SetSign) >
028A E600
                          1680 +1     ;TOKEN_NEG - '-' Wait for sign
                          1681 +1          
028C 04             E     1682 +2      TRANSITION_ENTRY< ST_SRS_INIT, OFFSET( no_op) >
028D 0000
                          1683 +1              ;TOKEN_IGNORE 
                          1684 +1          
028F 00             R     1685 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0290 EA00
                          1686 +1          ;TOKEN_END
                          1687 +1          
0292 00             R     1688 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0293 EA00
                          1689 +1          ;TOKEN_OTHER    
                          1690     
                          1691             ;Current State = ST_SRS_SIGN: Waiting for DIGIT or Sign           
                          1692                                                 ;Input Token Type
                          1693 +1          
0295 00             R     1694 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   31


LOC  OBJ                  LINE     SOURCE

0296 EA00
                          1695 +1          ;TOKEN_S 
                          1696 +1          
0298 00             R     1697 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0299 EA00
                          1698 +1     ;TOKEN_V 
                          1699 +1          
029B 00             R     1700 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
029C EA00
                          1701 +1          ;TOKEN_D 
                          1702 +1          
029E 00             R     1703 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
029F EA00
                          1704 +1          ;TOKEN_T
                          1705 +1          
02A1 00             R     1706 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02A2 EA00
                          1707 +1          ;TOKEN_E
                          1708 +1          
02A4 00             R     1709 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02A5 EA00
                          1710 +1          ;TOKEN_F
                          1711 +1          
02A7 00             R     1712 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02A8 EA00
                          1713 +1      ;TOKEN_O
                          1714             
                          1715 +1          
02AA 06             R     1716 +2      TRANSITION_ENTRY< ST_SRS, OFFSET( Concat_Num) >
02AB B600
                          1717 +1       ;TOKEN_NUM: A digit - thus concatenate it
                          1718             
                          1719 +1          
02AD 00             R     1720 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02AE EA00
                          1721 +1     ;TOKEN_POS - '+' Wait for sign
                          1722 +1          
02B0 00             R     1723 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02B1 EA00
                          1724 +1     ;TOKEN_NEG - '-' Wait for sign
                          1725 +1          
02B3 05             E     1726 +2      TRANSITION_ENTRY< ST_SRS_SIGN, OFFSET( no_op) >
02B4 0000
                          1727 +1              ;TOKEN_IGNORE 
                          1728 +1          
02B6 00             R     1729 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02B7 EA00
                          1730 +1     ;TOKEN_END
                          1731 +1          
02B9 00             R     1732 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02BA EA00
                          1733 +1          ;TOKEN_OTHER    
                          1734                     ;Current State = ST_SRS : Digit started, thus keep grabbing until ret
                                   urn       
                          1735                                                 ;Input Token Type
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   32


LOC  OBJ                  LINE     SOURCE

                          1736 +1          
02BC 00             R     1737 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02BD EA00
                          1738 +1          ;TOKEN_S - Set Speed
                          1739 +1          
02BF 00             R     1740 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02C0 EA00
                          1741 +1     ;TOKEN_V - Set Rel Speed
                          1742 +1          
02C2 00             R     1743 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02C3 EA00
                          1744 +1          ;TOKEN_D - Set Dir
                          1745 +1          
02C5 00             R     1746 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02C6 EA00
                          1747 +1          ;TOKEN_T - Rot Turr Angl
                          1748 +1          
02C8 00             R     1749 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02C9 EA00
                          1750 +1          ;TOKEN_E - Set Turr Ele
                          1751 +1          
02CB 00             R     1752 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02CC EA00
                          1753 +1          ;TOKEN_F - Laser On
                          1754 +1          
02CE 00             R     1755 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02CF EA00
                          1756 +1      ;TOKEN_O - Laser Off
                          1757             
                          1758 +1          
02D1 06             R     1759 +2      TRANSITION_ENTRY< ST_SRS, OFFSET( Concat_Num) >
02D2 B600
                          1760 +1       ;TOKEN_NUM - A digit - thus concatenate it
                          1761             
                          1762 +1          
02D4 00             R     1763 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02D5 EA00
                          1764 +1          ;TOKEN_POS - '+'
                          1765 +1          
02D7 00             R     1766 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02D8 EA00
                          1767 +1          ;TOKEN_NEG - '-'
                          1768 +1          
02DA 06             E     1769 +2      TRANSITION_ENTRY< ST_SRS, OFFSET( no_op) >
02DB 0000
                          1770 +1                  ;TOKEN_IGNORE - Keep Waiting for start of digit
                          1771 +1          
02DD 00             R     1772 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetRelSpeed) >
02DE FF00
                          1773 +1  ;TOKEN_END - Return
                          1774 +1          
02E0 00             R     1775 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02E1 EA00
                          1776 +1          ;TOKEN_OTHER
                          1777     
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   33


LOC  OBJ                  LINE     SOURCE

                          1778     
                          1779     ;-----------------------------Setting Direction Speed--------------------------------
                                   -- 
                          1780     
                          1781             ;Current State = ST_DIR_INIT: Waiting for DIGIT or Sign           
                          1782                                                     ;Input Token Type
                          1783 +1          
02E3 00             R     1784 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02E4 EA00
                          1785 +1              ;TOKEN_S 
                          1786 +1          
02E6 00             R     1787 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02E7 EA00
                          1788 +1         ;TOKEN_V 
                          1789 +1          
02E9 00             R     1790 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02EA EA00
                          1791 +1              ;TOKEN_D 
                          1792 +1          
02EC 00             R     1793 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02ED EA00
                          1794 +1              ;TOKEN_T
                          1795 +1          
02EF 00             R     1796 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02F0 EA00
                          1797 +1              ;TOKEN_E
                          1798 +1          
02F2 00             R     1799 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02F3 EA00
                          1800 +1              ;TOKEN_F
                          1801 +1          
02F5 00             R     1802 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02F6 EA00
                          1803 +1         ;TOKEN_O
                          1804             
                          1805 +1          
02F8 09             R     1806 +2      TRANSITION_ENTRY< ST_DIR, OFFSET( Concat_Num) >
02F9 B600
                          1807 +1           ;TOKEN_NUM: A digit - thus concatenate it
                          1808             
                          1809 +1          
02FB 08             R     1810 +2      TRANSITION_ENTRY< ST_DIR_SIGN, OFFSET( SetSign) >
02FC E600
                          1811 +1         ;TOKEN_POS - '+' Wait for sign
                          1812 +1          
02FE 08             R     1813 +2      TRANSITION_ENTRY< ST_DIR_SIGN, OFFSET( SetSign) >
02FF E600
                          1814 +1         ;TOKEN_NEG - '-' Wait for sign
                          1815 +1          
0301 07             E     1816 +2      TRANSITION_ENTRY< ST_DIR_INIT, OFFSET( no_op) >
0302 0000
                          1817 +1                  ;TOKEN_IGNORE 
                          1818 +1          
0304 00             R     1819 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0305 EA00
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   34


LOC  OBJ                  LINE     SOURCE

                          1820 +1                  ;TOKEN_END
                          1821 +1          
0307 00             R     1822 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0308 EA00
                          1823 +1                  ;TOKEN_OTHER    
                          1824     
                          1825             ;Current State = ST_DIR_SIGN: Waiting for DIGIT or Sign           
                          1826                                                     ;Input Token Type
                          1827 +1          
030A 00             R     1828 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
030B EA00
                          1829 +1              ;TOKEN_S 
                          1830 +1          
030D 00             R     1831 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
030E EA00
                          1832 +1         ;TOKEN_V 
                          1833 +1          
0310 00             R     1834 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0311 EA00
                          1835 +1              ;TOKEN_D 
                          1836 +1          
0313 00             R     1837 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0314 EA00
                          1838 +1              ;TOKEN_T
                          1839 +1          
0316 00             R     1840 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0317 EA00
                          1841 +1              ;TOKEN_E
                          1842 +1          
0319 00             R     1843 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
031A EA00
                          1844 +1              ;TOKEN_F
                          1845 +1          
031C 00             R     1846 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
031D EA00
                          1847 +1         ;TOKEN_O
                          1848             
                          1849 +1          
031F 09             R     1850 +2      TRANSITION_ENTRY< ST_DIR, OFFSET( Concat_Num) >
0320 B600
                          1851 +1           ;TOKEN_NUM: A digit - thus concatenate it
                          1852             
                          1853 +1          
0322 00             R     1854 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0323 EA00
                          1855 +1         ;TOKEN_POS - '+' Wait for sign
                          1856 +1          
0325 00             R     1857 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0326 EA00
                          1858 +1         ;TOKEN_NEG - '-' Wait for sign
                          1859 +1          
0328 08             E     1860 +2      TRANSITION_ENTRY< ST_DIR_SIGN, OFFSET( no_op) >
0329 0000
                          1861 +1                  ;TOKEN_IGNORE 
                          1862 +1          
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   35


LOC  OBJ                  LINE     SOURCE

032B 00             R     1863 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
032C EA00
                          1864 +1                  ;TOKEN_END
                          1865 +1          
032E 00             R     1866 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
032F EA00
                          1867 +1                  ;TOKEN_OTHER    
                          1868             
                          1869                     ;Current State = ST_DIR : Digit started, thus keep grabbing until ret
                                   urn       
                          1870                                                     ;Input Token Type
                          1871 +1          
0331 00             R     1872 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0332 EA00
                          1873 +1              ;TOKEN_S
                          1874 +1          
0334 00             R     1875 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0335 EA00
                          1876 +1         ;TOKEN_V
                          1877 +1          
0337 00             R     1878 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0338 EA00
                          1879 +1              ;TOKEN_D
                          1880 +1          
033A 00             R     1881 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
033B EA00
                          1882 +1              ;TOKEN_T 
                          1883 +1          
033D 00             R     1884 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
033E EA00
                          1885 +1              ;TOKEN_E 
                          1886 +1          
0340 00             R     1887 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0341 EA00
                          1888 +1              ;TOKEN_F 
                          1889 +1          
0343 00             R     1890 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0344 EA00
                          1891 +1         ;TOKEN_O
                          1892             
                          1893 +1          
0346 09             R     1894 +2      TRANSITION_ENTRY< ST_DIR, OFFSET( Concat_Num) >
0347 B600
                          1895 +1           ;TOKEN_NUM - A digit - thus concatenate it
                          1896                 
                          1897 +1          
0349 00             R     1898 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
034A EA00
                          1899 +1                  ;TOKEN_POS - '+'
                          1900 +1          
034C 00             R     1901 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
034D EA00
                          1902 +1                  ;TOKEN_NEG - '-'
                          1903 +1          
034F 09             E     1904 +2      TRANSITION_ENTRY< ST_DIR, OFFSET( no_op) >
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   36


LOC  OBJ                  LINE     SOURCE

0350 0000
                          1905 +1                      ;TOKEN_IGNORE - Keep Waiting for start of digit
                          1906 +1          
0352 00             R     1907 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetDir) >
0353 2E01
                          1908 +1            ;TOKEN_END - Return
                          1909 +1          
0355 00             R     1910 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0356 EA00
                          1911 +1                  ;TOKEN_OTHER
                          1912     
                          1913     ;-----------------------------Rotating Turrent Angle---------------------------------
                                   -  
                          1914     
                          1915             ;Current State = ST_RTR_INIT: Waiting for DIGIT or Sign           
                          1916                                                     ;Input Token Type
                          1917 +1          
0358 00             R     1918 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0359 EA00
                          1919 +1              ;TOKEN_S 
                          1920 +1          
035B 00             R     1921 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
035C EA00
                          1922 +1          ;TOKEN_V 
                          1923 +1          
035E 00             R     1924 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
035F EA00
                          1925 +1              ;TOKEN_D 
                          1926 +1          
0361 00             R     1927 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0362 EA00
                          1928 +1              ;TOKEN_T
                          1929 +1          
0364 00             R     1930 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0365 EA00
                          1931 +1              ;TOKEN_E
                          1932 +1          
0367 00             R     1933 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0368 EA00
                          1934 +1              ;TOKEN_F
                          1935 +1          
036A 00             R     1936 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
036B EA00
                          1937 +1          ;TOKEN_O
                          1938 +1          
036D 0C             R     1939 +2      TRANSITION_ENTRY< ST_RTA_ABS, OFFSET( Concat_Num) >
036E B600
                          1940 +1       ;TOKEN_NUM: A digit - thus concatenate it  
                          1941 +1          
0370 0B             R     1942 +2      TRANSITION_ENTRY< ST_RTR_SIGN, OFFSET( SetSign) >
0371 E600
                          1943 +1         ;TOKEN_POS - '+' Wait for sign
                          1944 +1          
0373 0B             R     1945 +2      TRANSITION_ENTRY< ST_RTR_SIGN, OFFSET( SetSign) >
0374 E600
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   37


LOC  OBJ                  LINE     SOURCE

                          1946 +1         ;TOKEN_NEG - '-' Wait for sign
                          1947 +1          
0376 0A             E     1948 +2      TRANSITION_ENTRY< ST_RTR_INIT, OFFSET( no_op) >
0377 0000
                          1949 +1                  ;TOKEN_IGNORE 
                          1950 +1          
0379 00             R     1951 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
037A EA00
                          1952 +1                  ;TOKEN_END
                          1953 +1          
037C 00             R     1954 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
037D EA00
                          1955 +1                  ;TOKEN_OTHER    
                          1956     
                          1957             ;Current State = ST_RTR_SIGN: Waiting for DIGIT or Sign           
                          1958                                                     ;Input Token Type
                          1959 +1          
037F 00             R     1960 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0380 EA00
                          1961 +1              ;TOKEN_S 
                          1962 +1          
0382 00             R     1963 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0383 EA00
                          1964 +1          ;TOKEN_V 
                          1965 +1          
0385 00             R     1966 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0386 EA00
                          1967 +1              ;TOKEN_D 
                          1968 +1          
0388 00             R     1969 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0389 EA00
                          1970 +1              ;TOKEN_T
                          1971 +1          
038B 00             R     1972 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
038C EA00
                          1973 +1              ;TOKEN_E
                          1974 +1          
038E 00             R     1975 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
038F EA00
                          1976 +1              ;TOKEN_F
                          1977 +1          
0391 00             R     1978 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0392 EA00
                          1979 +1          ;TOKEN_O
                          1980 +1          
0394 0D             R     1981 +2      TRANSITION_ENTRY< ST_RTA_REL, OFFSET( Concat_Num) >
0395 B600
                          1982 +1       ;TOKEN_NUM: A digit - thus concatenate it  
                          1983 +1          
0397 00             R     1984 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0398 EA00
                          1985 +1         ;TOKEN_POS - '+' Wait for sign
                          1986 +1          
039A 00             R     1987 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
039B EA00
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   38


LOC  OBJ                  LINE     SOURCE

                          1988 +1         ;TOKEN_NEG - '-' Wait for sign
                          1989 +1          
039D 0B             E     1990 +2      TRANSITION_ENTRY< ST_RTR_SIGN, OFFSET( no_op) >
039E 0000
                          1991 +1                  ;TOKEN_IGNORE 
                          1992 +1          
03A0 00             R     1993 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03A1 EA00
                          1994 +1                  ;TOKEN_END
                          1995 +1          
03A3 00             R     1996 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03A4 EA00
                          1997 +1                  ;TOKEN_OTHER    
                          1998             
                          1999         ;Current State = ST_RTA_ABS : Digit started, thus keep grabbing until return     
                                     
                          2000                                                     ;Input Token Type
                          2001 +1          
03A6 00             R     2002 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03A7 EA00
                          2003 +1              ;TOKEN_S
                          2004 +1          
03A9 00             R     2005 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03AA EA00
                          2006 +1         ;TOKEN_V
                          2007 +1          
03AC 00             R     2008 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03AD EA00
                          2009 +1              ;TOKEN_D
                          2010 +1          
03AF 00             R     2011 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03B0 EA00
                          2012 +1              ;TOKEN_T 
                          2013 +1          
03B2 00             R     2014 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03B3 EA00
                          2015 +1              ;TOKEN_E 
                          2016 +1          
03B5 00             R     2017 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03B6 EA00
                          2018 +1              ;TOKEN_F 
                          2019 +1          
03B8 00             R     2020 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03B9 EA00
                          2021 +1         ;TOKEN_O
                          2022             
                          2023 +1          
03BB 0C             R     2024 +2      TRANSITION_ENTRY< ST_RTA_ABS, OFFSET( Concat_Num) >
03BC B600
                          2025 +1        ;TOKEN_NUM - A digit - thus concatenate it
                          2026             
                          2027 +1          
03BE 00             R     2028 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03BF EA00
                          2029 +1                  ;TOKEN_POS - '+'
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   39


LOC  OBJ                  LINE     SOURCE

                          2030 +1          
03C1 00             R     2031 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03C2 EA00
                          2032 +1                  ;TOKEN_NEG - '-'
                          2033 +1          
03C4 0C             E     2034 +2      TRANSITION_ENTRY< ST_RTA_ABS, OFFSET( no_op) >
03C5 0000
                          2035 +1                  ;TOKEN_IGNORE - Keep Waiting for start of digit
                          2036 +1          
03C7 00             R     2037 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( RotAbsTurrAng) >
03C8 5101
                          2038 +1    ;TOKEN_END - Return
                          2039 +1          
03CA 00             R     2040 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03CB EA00
                          2041 +1                  ;TOKEN_OTHER
                          2042             
                          2043         ;Current State = ST_RTA_REL : Digit started, thus keep grabbing until return     
                                     
                          2044                                                     ;Input Token Type
                          2045 +1          
03CD 00             R     2046 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03CE EA00
                          2047 +1              ;TOKEN_S
                          2048 +1          
03D0 00             R     2049 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03D1 EA00
                          2050 +1         ;TOKEN_V
                          2051 +1          
03D3 00             R     2052 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03D4 EA00
                          2053 +1               ;TOKEN_D
                          2054 +1          
03D6 00             R     2055 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03D7 EA00
                          2056 +1              ;TOKEN_T 
                          2057 +1          
03D9 00             R     2058 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03DA EA00
                          2059 +1              ;TOKEN_E 
                          2060 +1          
03DC 00             R     2061 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03DD EA00
                          2062 +1              ;TOKEN_F 
                          2063 +1          
03DF 00             R     2064 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03E0 EA00
                          2065 +1         ;TOKEN_O
                          2066             
                          2067 +1          
03E2 0D             R     2068 +2      TRANSITION_ENTRY< ST_RTA_REL, OFFSET( Concat_Num) >
03E3 B600
                          2069 +1        ;TOKEN_NUM - A digit - thus concatenate it
                          2070             
                          2071 +1          
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   40


LOC  OBJ                  LINE     SOURCE

03E5 00             R     2072 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03E6 EA00
                          2073 +1                  ;TOKEN_POS - '+'
                          2074 +1          
03E8 00             R     2075 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03E9 EA00
                          2076 +1                  ;TOKEN_NEG - '-'
                          2077 +1          
03EB 0D             E     2078 +2      TRANSITION_ENTRY< ST_RTA_REL, OFFSET( no_op) >
03EC 0000
                          2079 +1                  ;TOKEN_IGNORE - Keep Waiting for start of digit
                          2080 +1          
03EE 00             R     2081 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( RotRelTurrAng) >
03EF 6D01
                          2082 +1    ;TOKEN_END - Return
                          2083 +1          
03F1 00             R     2084 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03F2 EA00
                          2085 +1                  ;TOKEN_OTHER
                          2086             
                          2087     ;-----------------------------Elevation of Turret----------------------------------
                                      
                          2088     
                          2089             ;Current State = ST_STEA_INIT: Waiting for DIGIT or Sign           
                          2090                                                     ;Input Token Type
                          2091 +1          
03F4 00             R     2092 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03F5 EA00
                          2093 +1              ;TOKEN_S 
                          2094 +1          
03F7 00             R     2095 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03F8 EA00
                          2096 +1        ;TOKEN_V 
                          2097 +1          
03FA 00             R     2098 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03FB EA00
                          2099 +1              ;TOKEN_D 
                          2100 +1          
03FD 00             R     2101 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03FE EA00
                          2102 +1              ;TOKEN_T
                          2103 +1          
0400 00             R     2104 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0401 EA00
                          2105 +1              ;TOKEN_E
                          2106 +1          
0403 00             R     2107 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0404 EA00
                          2108 +1              ;TOKEN_F
                          2109 +1          
0406 00             R     2110 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0407 EA00
                          2111 +1        ;TOKEN_O
                          2112 +1          
0409 10             R     2113 +2      TRANSITION_ENTRY< ST_STEA, OFFSET( Concat_Num) >
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   41


LOC  OBJ                  LINE     SOURCE

040A B600
                          2114 +1          ;TOKEN_NUM: A digit - thus concatenate it       
                          2115 +1          
040C 0F             R     2116 +2      TRANSITION_ENTRY< ST_STEA_SIGN, OFFSET( SetSign) >
040D E600
                          2117 +1         ;TOKEN_POS - '+' Wait for sign
                          2118 +1          
040F 0F             R     2119 +2      TRANSITION_ENTRY< ST_STEA_SIGN, OFFSET( SetSign) >
0410 E600
                          2120 +1        ;TOKEN_NEG - '-' Wait for sign
                          2121 +1          
0412 0E             E     2122 +2      TRANSITION_ENTRY< ST_STEA_INIT, OFFSET( no_op) >
0413 0000
                          2123 +1              ;TOKEN_IGNORE 
                          2124 +1          
0415 00             R     2125 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0416 EA00
                          2126 +1                  ;TOKEN_END
                          2127 +1          
0418 00             R     2128 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0419 EA00
                          2129 +1                  ;TOKEN_OTHER    
                          2130             
                          2131             ;Current State = ST_STEA_SIGN: Waiting for DIGIT or Sign           
                          2132                                                      ;Input Token Type
                          2133 +1          
041B 00             R     2134 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
041C EA00
                          2135 +1              ;TOKEN_S 
                          2136 +1          
041E 00             R     2137 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
041F EA00
                          2138 +1        ;TOKEN_V 
                          2139 +1          
0421 00             R     2140 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0422 EA00
                          2141 +1              ;TOKEN_D 
                          2142 +1          
0424 00             R     2143 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0425 EA00
                          2144 +1              ;TOKEN_T
                          2145 +1          
0427 00             R     2146 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0428 EA00
                          2147 +1              ;TOKEN_E
                          2148 +1          
042A 00             R     2149 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
042B EA00
                          2150 +1              ;TOKEN_F
                          2151 +1          
042D 00             R     2152 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
042E EA00
                          2153 +1        ;TOKEN_O
                          2154 +1          
0430 10             R     2155 +2      TRANSITION_ENTRY< ST_STEA, OFFSET( Concat_Num) >
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   42


LOC  OBJ                  LINE     SOURCE

0431 B600
                          2156 +1          ;TOKEN_NUM: A digit - thus concatenate it       
                          2157 +1          
0433 00             R     2158 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0434 EA00
                          2159 +1          ;TOKEN_POS - '+' Wait for sign
                          2160 +1          
0436 00             R     2161 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0437 EA00
                          2162 +1         ;TOKEN_NEG - '-' Wait for sign
                          2163 +1          
0439 0E             E     2164 +2      TRANSITION_ENTRY< ST_STEA_INIT, OFFSET( no_op) >
043A 0000
                          2165 +1              ;TOKEN_IGNORE 
                          2166 +1          
043C 00             R     2167 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
043D EA00
                          2168 +1                  ;TOKEN_END
                          2169 +1          
043F 00             R     2170 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0440 EA00
                          2171 +1                  ;TOKEN_OTHER    
                          2172             
                          2173                     ;Current State = ST_STEA : Digit started, thus keep grabbing until re
                                   turn       
                          2174                                                     ;Input Token Type
                          2175 +1          
0442 00             R     2176 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0443 EA00
                          2177 +1              ;TOKEN_S
                          2178 +1          
0445 00             R     2179 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0446 EA00
                          2180 +1        ;TOKEN_V
                          2181 +1          
0448 00             R     2182 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0449 EA00
                          2183 +1              ;TOKEN_D
                          2184 +1          
044B 00             R     2185 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
044C EA00
                          2186 +1              ;TOKEN_T 
                          2187 +1          
044E 00             R     2188 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
044F EA00
                          2189 +1              ;TOKEN_E 
                          2190 +1          
0451 00             R     2191 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0452 EA00
                          2192 +1              ;TOKEN_F 
                          2193 +1          
0454 00             R     2194 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0455 EA00
                          2195 +1        ;TOKEN_O
                          2196             
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   43


LOC  OBJ                  LINE     SOURCE

                          2197 +1          
0457 10             R     2198 +2      TRANSITION_ENTRY< ST_STEA, OFFSET( Concat_Num) >
0458 B600
                          2199 +1          ;TOKEN_NUM - A digit - thus concatenate it
                          2200             
                          2201 +1          
045A 00             R     2202 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
045B EA00
                          2203 +1                  ;TOKEN_POS - '+'
                          2204 +1          
045D 00             R     2205 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
045E EA00
                          2206 +1                  ;TOKEN_NEG - '-'
                          2207 +1          
0460 10             E     2208 +2      TRANSITION_ENTRY< ST_STEA, OFFSET( no_op) >
0461 0000
                          2209 +1                      ;TOKEN_IGNORE - Keep Waiting for start of digit
                          2210 +1          
0463 00             R     2211 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetTurrEleAng) >
0464 8901
                          2212 +1     ;TOKEN_END - Return
                          2213 +1          
0466 00             R     2214 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0467 EA00
                          2215 +1                  ;TOKEN_OTHER
                          2216             
                          2217     ;-----------------------------Fire Laser----------------------------------      
                          2218     
                          2219             ;Current State = ST_LAZON: Waiting for return       
                          2220                                                     ;Input Token Type
                          2221 +1          
0469 00             R     2222 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
046A EA00
                          2223 +1              ;TOKEN_S 
                          2224 +1          
046C 00             R     2225 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
046D EA00
                          2226 +1        ;TOKEN_V 
                          2227 +1          
046F 00             R     2228 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0470 EA00
                          2229 +1              ;TOKEN_D 
                          2230 +1          
0472 00             R     2231 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0473 EA00
                          2232 +1              ;TOKEN_T
                          2233 +1          
0475 00             R     2234 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0476 EA00
                          2235 +1              ;TOKEN_E
                          2236 +1          
0478 00             R     2237 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0479 EA00
                          2238 +1              ;TOKEN_F
                          2239 +1          
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   44


LOC  OBJ                  LINE     SOURCE

047B 00             R     2240 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
047C EA00
                          2241 +1        ;TOKEN_O
                          2242 +1          
047E 00             R     2243 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
047F EA00
                          2244 +1        ;TOKEN_NUM
                          2245 +1          
0481 00             R     2246 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0482 EA00
                          2247 +1        ;TOKEN_POS
                          2248 +1          
0484 00             R     2249 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0485 EA00
                          2250 +1        ;TOKEN_NEG 
                          2251 +1          
0487 11             E     2252 +2      TRANSITION_ENTRY< ST_LAZON, OFFSET( no_op) >
0488 0000
                          2253 +1                  ;TOKEN_IGNORE 
                          2254 +1          
048A 00             R     2255 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( LaserON) >
048B BC01
                          2256 +1                  ;TOKEN_END
                          2257 +1          
048D 00             R     2258 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
048E EA00
                          2259 +1                  ;TOKEN_OTHER    
                          2260     
                          2261             
                          2262     ;-----------------------------Laser OFF----------------------------------       
                          2263     
                          2264             ;Current State = ST_LAZOFF: Waiting for return       
                          2265                                                     ;Input Token Type
                          2266 +1          
0490 00             R     2267 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0491 EA00
                          2268 +1              ;TOKEN_S 
                          2269 +1          
0493 00             R     2270 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0494 EA00
                          2271 +1        ;TOKEN_V 
                          2272 +1          
0496 00             R     2273 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0497 EA00
                          2274 +1              ;TOKEN_D 
                          2275 +1          
0499 00             R     2276 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
049A EA00
                          2277 +1              ;TOKEN_T
                          2278 +1          
049C 00             R     2279 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
049D EA00
                          2280 +1              ;TOKEN_E
                          2281 +1          
049F 00             R     2282 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   45


LOC  OBJ                  LINE     SOURCE

04A0 EA00
                          2283 +1              ;TOKEN_F
                          2284 +1          
04A2 00             R     2285 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
04A3 EA00
                          2286 +1        ;TOKEN_O
                          2287 +1          
04A5 00             R     2288 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
04A6 EA00
                          2289 +1        ;TOKEN_NUM
                          2290 +1          
04A8 00             R     2291 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
04A9 EA00
                          2292 +1        ;TOKEN_POS
                          2293 +1          
04AB 00             R     2294 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
04AC EA00
                          2295 +1        ;TOKEN_NEG 
                          2296 +1          
04AE 12             E     2297 +2      TRANSITION_ENTRY< ST_LAZOFF, OFFSET( no_op) >
04AF 0000
                          2298 +1                  ;TOKEN_IGNORE 
                          2299 +1          
04B1 00             R     2300 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( LaserOFF) >
04B2 C701
                          2301 +1                  ;TOKEN_END
                          2302 +1          
04B4 00             R     2303 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
04B5 EA00
                          2304 +1              ;TOKEN_OTHER        
                          2305             
                          2306             
                          2307     
                          2308             
                          2309     ; Token Tables
                          2310     ;
                          2311     ; Description:      This creates the tables of token types and token values.
                          2312     ;                   Each entry corresponds to the token type and the token
                          2313     ;                   value for a character.  Macros are used to actually build
                          2314     ;                   two separate tables - TokenTypeTable for token types and
                          2315     ;                   TokenValueTable for token values.
                          2316     ;
                          2317     ; Author:           Anjian Wu
                          2318     ; Last Modified:    12-02-2013
                          2319     ; Last Modified:    12-05-2013: Just made Laser tokens return True/False - Anjian Wu
                          2320     
                          2321     
                          2322     ; token type table - uses first byte of macro table entry
                          2323     
                          2324     
04B7                      2325     TokenTypeTable  LABEL   BYTE
                          2326 +1          
                          2327 +2          
04B7 0A                   2328 +3          DB      TOKEN_IGNORE
                          2329 +2          ;<null>  (end of string)
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   46


LOC  OBJ                  LINE     SOURCE

                          2330 +2          
04B8 0C                   2331 +3          DB      TOKEN_OTHER
                          2332 +2                  ;SOH
                          2333 +2          
04B9 0C                   2334 +3          DB      TOKEN_OTHER
                          2335 +2                  ;STX
                          2336 +2          
04BA 0C                   2337 +3          DB      TOKEN_OTHER
                          2338 +2                  ;ETX
                          2339 +2          
04BB 0C                   2340 +3          DB      TOKEN_OTHER
                          2341 +2                  ;EOT
                          2342 +2          
04BC 0C                   2343 +3          DB      TOKEN_OTHER
                          2344 +2                  ;ENQ
                          2345 +2          
04BD 0C                   2346 +3          DB      TOKEN_OTHER
                          2347 +2                  ;ACK
                          2348 +2          
04BE 0C                   2349 +3          DB      TOKEN_OTHER
                          2350 +2                  ;BEL
                          2351 +2          
04BF 0C                   2352 +3          DB      TOKEN_OTHER
                          2353 +2                  ;backspace
                          2354 +2          
04C0 0A                   2355 +3          DB      TOKEN_IGNORE
                          2356 +2      ;TAB
                          2357 +2          
04C1 0C                   2358 +3          DB      TOKEN_OTHER
                          2359 +2          ;new line
                          2360 +2          
04C2 0A                   2361 +3          DB      TOKEN_IGNORE
                          2362 +2          ;vertical tab
                          2363 +2          
04C3 0C                   2364 +3          DB      TOKEN_OTHER
                          2365 +2          ;form feed
                          2366 +2          
04C4 0B                   2367 +3          DB      TOKEN_END
                          2368 +2              ;carriage return
                          2369 +2          
04C5 0C                   2370 +3          DB      TOKEN_OTHER
                          2371 +2          ;SO
                          2372 +2          
04C6 0C                   2373 +3          DB      TOKEN_OTHER
                          2374 +2          ;SI
                          2375 +2          
04C7 0C                   2376 +3          DB      TOKEN_OTHER
                          2377 +2          ;DLE
                          2378 +2          
04C8 0C                   2379 +3          DB      TOKEN_OTHER
                          2380 +2          ;DC1
                          2381 +2          
04C9 0C                   2382 +3          DB      TOKEN_OTHER
                          2383 +2          ;DC2
                          2384 +2          
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   47


LOC  OBJ                  LINE     SOURCE

04CA 0C                   2385 +3          DB      TOKEN_OTHER
                          2386 +2          ;DC3
                          2387 +2          
04CB 0C                   2388 +3          DB      TOKEN_OTHER
                          2389 +2          ;DC4
                          2390 +2          
04CC 0C                   2391 +3          DB      TOKEN_OTHER
                          2392 +2          ;NAK
                          2393 +2          
04CD 0C                   2394 +3          DB      TOKEN_OTHER
                          2395 +2          ;SYN
                          2396 +2          
04CE 0C                   2397 +3          DB      TOKEN_OTHER
                          2398 +2          ;ETB
                          2399 +2          
04CF 0C                   2400 +3          DB      TOKEN_OTHER
                          2401 +2          ;CAN
                          2402 +2          
04D0 0C                   2403 +3          DB      TOKEN_OTHER
                          2404 +2          ;EM
                          2405 +2          
04D1 0C                   2406 +3          DB      TOKEN_OTHER
                          2407 +2          ;SUB
                          2408 +2          
04D2 0C                   2409 +3          DB      TOKEN_OTHER
                          2410 +2          ;escape
                          2411 +2          
04D3 0C                   2412 +3          DB      TOKEN_OTHER
                          2413 +2          ;FS
                          2414 +2          
04D4 0C                   2415 +3          DB      TOKEN_OTHER
                          2416 +2          ;GS
                          2417 +2          
04D5 0C                   2418 +3          DB      TOKEN_OTHER
                          2419 +2          ;AS
                          2420 +2          
04D6 0C                   2421 +3          DB      TOKEN_OTHER
                          2422 +2          ;US
                          2423 +2          
04D7 0A                   2424 +3          DB      TOKEN_IGNORE
                          2425 +2          ;space
                          2426 +2          
04D8 0C                   2427 +3          DB      TOKEN_OTHER
                          2428 +2          ;!
                          2429 +2          
04D9 0C                   2430 +3          DB      TOKEN_OTHER
                          2431 +2          ;"
                          2432 +2          
04DA 0C                   2433 +3          DB      TOKEN_OTHER
                          2434 +2          ;#
                          2435 +2          
04DB 0C                   2436 +3          DB      TOKEN_OTHER
                          2437 +2          ;$
                          2438 +2          
04DC 0C                   2439 +3          DB      TOKEN_OTHER
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   48


LOC  OBJ                  LINE     SOURCE

                          2440 +2          ;percent
                          2441 +2          
04DD 0C                   2442 +3          DB      TOKEN_OTHER
                          2443 +2          ;&
                          2444 +2          
04DE 0C                   2445 +3          DB      TOKEN_OTHER
                          2446 +2          ;'
                          2447 +2          
04DF 0C                   2448 +3          DB      TOKEN_OTHER
                          2449 +2          ;open paren
                          2450 +2          
04E0 0C                   2451 +3          DB      TOKEN_OTHER
                          2452 +2          ;close paren
                          2453 +2          
04E1 0C                   2454 +3          DB      TOKEN_OTHER
                          2455 +2          ;*
                          2456 +2          
04E2 08                   2457 +3          DB      TOKEN_POS
                          2458 +2                  ;+  (positive sign)
                          2459 +2          
04E3 0C                   2460 +3          DB      TOKEN_OTHER
                          2461 +2          ;,
                          2462 +2          
04E4 09                   2463 +3          DB      TOKEN_NEG
                          2464 +2                  ;-  (negative sign)
                          2465 +2          
04E5 0C                   2466 +3          DB      TOKEN_OTHER
                          2467 +2                  ;.  (decimal point)
                          2468 +2          
04E6 0C                   2469 +3          DB      TOKEN_OTHER
                          2470 +2          ;/
                          2471 +2          
04E7 07                   2472 +3          DB      TOKEN_NUM
                          2473 +2              ;0  (digit)
                          2474 +2          
04E8 07                   2475 +3          DB      TOKEN_NUM
                          2476 +2                  ;1  (digit)
                          2477 +2          
04E9 07                   2478 +3          DB      TOKEN_NUM
                          2479 +2                  ;2  (digit)
                          2480 +2          
04EA 07                   2481 +3          DB      TOKEN_NUM
                          2482 +2                  ;3  (digit)
                          2483 +2          
04EB 07                   2484 +3          DB      TOKEN_NUM
                          2485 +2                  ;4  (digit)
                          2486 +2          
04EC 07                   2487 +3          DB      TOKEN_NUM
                          2488 +2                  ;5  (digit)
                          2489 +2          
04ED 07                   2490 +3          DB      TOKEN_NUM
                          2491 +2                  ;6  (digit)
                          2492 +2          
04EE 07                   2493 +3          DB      TOKEN_NUM
                          2494 +2                  ;7  (digit)
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   49


LOC  OBJ                  LINE     SOURCE

                          2495 +2          
04EF 07                   2496 +3          DB      TOKEN_NUM
                          2497 +2                  ;8  (digit)
                          2498 +2          
04F0 07                   2499 +3          DB      TOKEN_NUM
                          2500 +2                  ;9  (digit)
                          2501 +2          
04F1 0C                   2502 +3          DB      TOKEN_OTHER
                          2503 +2          ;:
                          2504 +2          
04F2 0C                   2505 +3          DB      TOKEN_OTHER
                          2506 +2          ;;
                          2507 +2          
04F3 0C                   2508 +3          DB      TOKEN_OTHER
                          2509 +2          ;<
                          2510 +2          
04F4 0C                   2511 +3          DB      TOKEN_OTHER
                          2512 +2          ;=
                          2513 +2          
04F5 0C                   2514 +3          DB      TOKEN_OTHER
                          2515 +2          ;>
                          2516 +2          
04F6 0C                   2517 +3          DB      TOKEN_OTHER
                          2518 +2          ;?
                          2519 +2          
04F7 0C                   2520 +3          DB      TOKEN_OTHER
                          2521 +2          ;@
                          2522 +2          
04F8 0C                   2523 +3          DB      TOKEN_OTHER
                          2524 +2          ;A
                          2525 +2          
04F9 0C                   2526 +3          DB      TOKEN_OTHER
                          2527 +2          ;B
                          2528 +2          
04FA 0C                   2529 +3          DB      TOKEN_OTHER
                          2530 +2          ;C
                          2531 +2          
04FB 02                   2532 +3          DB      TOKEN_D     
                          2533 +2          ;D
                          2534 +2          
04FC 04                   2535 +3          DB      TOKEN_E     
                          2536 +2    ;E 
                          2537 +2          
04FD 05                   2538 +3          DB      TOKEN_F     
                          2539 +2          ;F
                          2540 +2          
04FE 0C                   2541 +3          DB      TOKEN_OTHER
                          2542 +2          ;G
                          2543 +2          
04FF 0C                   2544 +3          DB      TOKEN_OTHER
                          2545 +2          ;H
                          2546 +2          
0500 0C                   2547 +3          DB      TOKEN_OTHER
                          2548 +2          ;I
                          2549 +2          
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   50


LOC  OBJ                  LINE     SOURCE

0501 0C                   2550 +3          DB      TOKEN_OTHER
                          2551 +2          ;J
                          2552 +2          
0502 0C                   2553 +3          DB      TOKEN_OTHER
                          2554 +2          ;K
                          2555 +2          
0503 0C                   2556 +3          DB      TOKEN_OTHER
                          2557 +2          ;L
                          2558 +2          
0504 0C                   2559 +3          DB      TOKEN_OTHER
                          2560 +2          ;M
                          2561 +2          
0505 0C                   2562 +3          DB      TOKEN_OTHER
                          2563 +2          ;N
                          2564 +2          
0506 06                   2565 +3          DB      TOKEN_O 
                          2566 +2          ;O
                          2567 +2          
0507 0C                   2568 +3          DB      TOKEN_OTHER
                          2569 +2          ;P
                          2570 +2          
0508 0C                   2571 +3          DB      TOKEN_OTHER
                          2572 +2          ;Q
                          2573 +2          
0509 0C                   2574 +3          DB      TOKEN_OTHER
                          2575 +2          ;R
                          2576 +2          
050A 00                   2577 +3          DB      TOKEN_S     
                          2578 +2          ;S
                          2579 +2          
050B 03                   2580 +3          DB      TOKEN_T
                          2581 +2          ;T
                          2582 +2          
050C 0C                   2583 +3          DB      TOKEN_OTHER
                          2584 +2          ;U
                          2585 +2          
050D 01                   2586 +3          DB      TOKEN_V
                          2587 +2              ;V
                          2588 +2          
050E 0C                   2589 +3          DB      TOKEN_OTHER
                          2590 +2          ;W
                          2591 +2          
050F 0C                   2592 +3          DB      TOKEN_OTHER
                          2593 +2          ;X
                          2594 +2          
0510 0C                   2595 +3          DB      TOKEN_OTHER
                          2596 +2          ;Y
                          2597 +2          
0511 0C                   2598 +3          DB      TOKEN_OTHER
                          2599 +2          ;Z
                          2600 +2          
0512 0C                   2601 +3          DB      TOKEN_OTHER
                          2602 +2          ;[
                          2603 +2          
0513 0C                   2604 +3          DB      TOKEN_OTHER
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   51


LOC  OBJ                  LINE     SOURCE

                          2605 +2          ;\
                          2606 +2          
0514 0C                   2607 +3          DB      TOKEN_OTHER
                          2608 +2          ;]
                          2609 +2          
0515 0C                   2610 +3          DB      TOKEN_OTHER
                          2611 +2          ;^
                          2612 +2          
0516 0C                   2613 +3          DB      TOKEN_OTHER
                          2614 +2          ;_
                          2615 +2          
0517 0C                   2616 +3          DB      TOKEN_OTHER
                          2617 +2          ;`
                          2618 +2          
0518 0C                   2619 +3          DB      TOKEN_OTHER
                          2620 +2          ;a
                          2621 +2          
0519 0C                   2622 +3          DB      TOKEN_OTHER
                          2623 +2          ;b
                          2624 +2          
051A 0C                   2625 +3          DB      TOKEN_OTHER
                          2626 +2          ;c
                          2627 +2          
051B 02                   2628 +3          DB      TOKEN_D     
                          2629 +2          ;d
                          2630 +2          
051C 04                   2631 +3          DB      TOKEN_E     
                          2632 +2          ;e  
                          2633 +2          
051D 05                   2634 +3          DB      TOKEN_F     
                          2635 +2          ;f
                          2636 +2          
051E 0C                   2637 +3          DB      TOKEN_OTHER 
                          2638 +2          ;g
                          2639 +2          
051F 0C                   2640 +3          DB      TOKEN_OTHER 
                          2641 +2          ;h
                          2642 +2          
0520 0C                   2643 +3          DB      TOKEN_OTHER 
                          2644 +2          ;i
                          2645 +2          
0521 0C                   2646 +3          DB      TOKEN_OTHER 
                          2647 +2          ;j
                          2648 +2          
0522 0C                   2649 +3          DB      TOKEN_OTHER 
                          2650 +2          ;k
                          2651 +2          
0523 0C                   2652 +3          DB      TOKEN_OTHER 
                          2653 +2          ;l
                          2654 +2          
0524 0C                   2655 +3          DB      TOKEN_OTHER 
                          2656 +2          ;m
                          2657 +2          
0525 0C                   2658 +3          DB      TOKEN_OTHER 
                          2659 +2          ;n
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   52


LOC  OBJ                  LINE     SOURCE

                          2660 +2          
0526 06                   2661 +3          DB      TOKEN_O     
                          2662 +2          ;o
                          2663 +2          
0527 0C                   2664 +3          DB      TOKEN_OTHER 
                          2665 +2          ;p
                          2666 +2          
0528 0C                   2667 +3          DB      TOKEN_OTHER 
                          2668 +2          ;q
                          2669 +2          
0529 0C                   2670 +3          DB      TOKEN_OTHER 
                          2671 +2          ;r
                          2672 +2          
052A 00                   2673 +3          DB      TOKEN_S     
                          2674 +2          ;s
                          2675 +2          
052B 03                   2676 +3          DB      TOKEN_T 
                          2677 +2          ;t
                          2678 +2          
052C 0C                   2679 +3          DB      TOKEN_OTHER 
                          2680 +2          ;u
                          2681 +2          
052D 01                   2682 +3          DB      TOKEN_V     
                          2683 +2          ;v
                          2684 +2          
052E 0C                   2685 +3          DB      TOKEN_OTHER 
                          2686 +2          ;w
                          2687 +2          
052F 0C                   2688 +3          DB      TOKEN_OTHER 
                          2689 +2          ;x
                          2690 +2          
0530 0C                   2691 +3          DB      TOKEN_OTHER 
                          2692 +2          ;y
                          2693 +2          
0531 0C                   2694 +3          DB      TOKEN_OTHER 
                          2695 +2          ;z
                          2696 +2          
0532 0C                   2697 +3          DB      TOKEN_OTHER 
                          2698 +2          ;{
                          2699 +2          
0533 0C                   2700 +3          DB      TOKEN_OTHER 
                          2701 +2          ;|
                          2702 +2          
0534 0C                   2703 +3          DB      TOKEN_OTHER 
                          2704 +2          ;}
                          2705 +2          
0535 0C                   2706 +3          DB      TOKEN_OTHER 
                          2707 +2          ;~
                          2708 +2          
0536 0C                   2709 +3          DB      TOKEN_OTHER 
                          2710 +2          ;rubout
                          2711 +1  
                          2712     
                          2713     
                          2714     ; token value table - uses second byte of macro table entry
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   53


LOC  OBJ                  LINE     SOURCE

                          2715     
                          2716     
0537                      2717     TokenValueTable LABEL       BYTE
                          2718 +1          
                          2719 +2          
0537 00                   2720 +3          DB       0
                          2721 +2          ;<null>  (end of string)
                          2722 +2          
0538 01                   2723 +3          DB       1
                          2724 +2                  ;SOH
                          2725 +2          
0539 02                   2726 +3          DB       2
                          2727 +2                  ;STX
                          2728 +2          
053A 03                   2729 +3          DB       3
                          2730 +2                  ;ETX
                          2731 +2          
053B 04                   2732 +3          DB       4
                          2733 +2                  ;EOT
                          2734 +2          
053C 05                   2735 +3          DB       5
                          2736 +2                  ;ENQ
                          2737 +2          
053D 06                   2738 +3          DB       6
                          2739 +2                  ;ACK
                          2740 +2          
053E 07                   2741 +3          DB       7
                          2742 +2                  ;BEL
                          2743 +2          
053F 08                   2744 +3          DB       8
                          2745 +2                  ;backspace
                          2746 +2          
0540 09                   2747 +3          DB       9
                          2748 +2      ;TAB
                          2749 +2          
0541 0A                   2750 +3          DB       10
                          2751 +2          ;new line
                          2752 +2          
0542 0B                   2753 +3          DB       11
                          2754 +2          ;vertical tab
                          2755 +2          
0543 0C                   2756 +3          DB       12
                          2757 +2          ;form feed
                          2758 +2          
0544 0D                   2759 +3          DB       13
                          2760 +2              ;carriage return
                          2761 +2          
0545 0E                   2762 +3          DB       14
                          2763 +2          ;SO
                          2764 +2          
0546 0F                   2765 +3          DB       15
                          2766 +2          ;SI
                          2767 +2          
0547 10                   2768 +3          DB       16
                          2769 +2          ;DLE
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   54


LOC  OBJ                  LINE     SOURCE

                          2770 +2          
0548 11                   2771 +3          DB       17
                          2772 +2          ;DC1
                          2773 +2          
0549 12                   2774 +3          DB       18
                          2775 +2          ;DC2
                          2776 +2          
054A 13                   2777 +3          DB       19
                          2778 +2          ;DC3
                          2779 +2          
054B 14                   2780 +3          DB       20
                          2781 +2          ;DC4
                          2782 +2          
054C 15                   2783 +3          DB       21
                          2784 +2          ;NAK
                          2785 +2          
054D 16                   2786 +3          DB       22
                          2787 +2          ;SYN
                          2788 +2          
054E 17                   2789 +3          DB       23
                          2790 +2          ;ETB
                          2791 +2          
054F 18                   2792 +3          DB       24
                          2793 +2          ;CAN
                          2794 +2          
0550 19                   2795 +3          DB       25
                          2796 +2          ;EM
                          2797 +2          
0551 1A                   2798 +3          DB       26
                          2799 +2          ;SUB
                          2800 +2          
0552 1B                   2801 +3          DB       27
                          2802 +2          ;escape
                          2803 +2          
0553 1C                   2804 +3          DB       28
                          2805 +2          ;FS
                          2806 +2          
0554 1D                   2807 +3          DB       29
                          2808 +2          ;GS
                          2809 +2          
0555 1E                   2810 +3          DB       30
                          2811 +2          ;AS
                          2812 +2          
0556 1F                   2813 +3          DB       31
                          2814 +2          ;US
                          2815 +2          
0557 20                   2816 +3          DB       ' '
                          2817 +2          ;space
                          2818 +2          
0558 21                   2819 +3          DB       '!'
                          2820 +2          ;!
                          2821 +2          
0559 22                   2822 +3          DB       '"'
                          2823 +2          ;"
                          2824 +2          
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   55


LOC  OBJ                  LINE     SOURCE

055A 23                   2825 +3          DB       '#'
                          2826 +2          ;#
                          2827 +2          
055B 24                   2828 +3          DB       '$'
                          2829 +2          ;$
                          2830 +2          
055C 25                   2831 +3          DB       37
                          2832 +2          ;percent
                          2833 +2          
055D 26                   2834 +3          DB       '&'
                          2835 +2          ;&
                          2836 +2          
055E 27                   2837 +3          DB       39
                          2838 +2          ;'
                          2839 +2          
055F 28                   2840 +3          DB       40
                          2841 +2          ;open paren
                          2842 +2          
0560 29                   2843 +3          DB       41
                          2844 +2          ;close paren
                          2845 +2          
0561 2A                   2846 +3          DB       '*'
                          2847 +2          ;*
                          2848 +2          
0562 01                   2849 +3          DB       POS
                          2850 +2                  ;+  (positive sign)
                          2851 +2          
0563 2C                   2852 +3          DB       44
                          2853 +2          ;,
                          2854 +2          
0564 FF                   2855 +3          DB       NEGA
                          2856 +2                  ;-  (negative sign)
                          2857 +2          
0565 00                   2858 +3          DB       0
                          2859 +2                  ;.  (decimal point)
                          2860 +2          
0566 2F                   2861 +3          DB       '/'
                          2862 +2          ;/
                          2863 +2          
0567 00                   2864 +3          DB       0
                          2865 +2              ;0  (digit)
                          2866 +2          
0568 01                   2867 +3          DB       1
                          2868 +2                  ;1  (digit)
                          2869 +2          
0569 02                   2870 +3          DB       2
                          2871 +2                  ;2  (digit)
                          2872 +2          
056A 03                   2873 +3          DB       3
                          2874 +2                  ;3  (digit)
                          2875 +2          
056B 04                   2876 +3          DB       4
                          2877 +2                  ;4  (digit)
                          2878 +2          
056C 05                   2879 +3          DB       5
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   56


LOC  OBJ                  LINE     SOURCE

                          2880 +2                  ;5  (digit)
                          2881 +2          
056D 06                   2882 +3          DB       6
                          2883 +2                  ;6  (digit)
                          2884 +2          
056E 07                   2885 +3          DB       7
                          2886 +2                  ;7  (digit)
                          2887 +2          
056F 08                   2888 +3          DB       8
                          2889 +2                  ;8  (digit)
                          2890 +2          
0570 09                   2891 +3          DB       9
                          2892 +2                  ;9  (digit)
                          2893 +2          
0571 3A                   2894 +3          DB       ':'
                          2895 +2          ;:
                          2896 +2          
0572 3B                   2897 +3          DB       ';'
                          2898 +2          ;;
                          2899 +2          
0573 3C                   2900 +3          DB       '<'
                          2901 +2          ;<
                          2902 +2          
0574 3D                   2903 +3          DB       '='
                          2904 +2          ;=
                          2905 +2          
0575 3E                   2906 +3          DB       '>'
                          2907 +2          ;>
                          2908 +2          
0576 3F                   2909 +3          DB       '?'
                          2910 +2          ;?
                          2911 +2          
0577 40                   2912 +3          DB       '@'
                          2913 +2          ;@
                          2914 +2          
0578 41                   2915 +3          DB       'A'
                          2916 +2          ;A
                          2917 +2          
0579 42                   2918 +3          DB       'B'
                          2919 +2          ;B
                          2920 +2          
057A 43                   2921 +3          DB       'C'
                          2922 +2          ;C
                          2923 +2          
057B 44                   2924 +3          DB       'D'
                          2925 +2          ;D
                          2926 +2          
057C 45                   2927 +3          DB       'E'
                          2928 +2    ;E 
                          2929 +2          
057D 01                   2930 +3          DB       TRUE
                          2931 +2          ;F
                          2932 +2          
057E 47                   2933 +3          DB       'G'
                          2934 +2          ;G
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   57


LOC  OBJ                  LINE     SOURCE

                          2935 +2          
057F 48                   2936 +3          DB       'H'
                          2937 +2          ;H
                          2938 +2          
0580 49                   2939 +3          DB       'I'
                          2940 +2          ;I
                          2941 +2          
0581 4A                   2942 +3          DB       'J'
                          2943 +2          ;J
                          2944 +2          
0582 4B                   2945 +3          DB       'K'
                          2946 +2          ;K
                          2947 +2          
0583 4C                   2948 +3          DB       'L'
                          2949 +2          ;L
                          2950 +2          
0584 4D                   2951 +3          DB       'M'
                          2952 +2          ;M
                          2953 +2          
0585 4E                   2954 +3          DB       'N'
                          2955 +2          ;N
                          2956 +2          
0586 00                   2957 +3          DB       FALSE
                          2958 +2          ;O
                          2959 +2          
0587 50                   2960 +3          DB       'P'
                          2961 +2          ;P
                          2962 +2          
0588 51                   2963 +3          DB       'Q'
                          2964 +2          ;Q
                          2965 +2          
0589 52                   2966 +3          DB       'R'
                          2967 +2          ;R
                          2968 +2          
058A 53                   2969 +3          DB       'S'
                          2970 +2          ;S
                          2971 +2          
058B 54                   2972 +3          DB       'T'
                          2973 +2          ;T
                          2974 +2          
058C 55                   2975 +3          DB       'U'
                          2976 +2          ;U
                          2977 +2          
058D 56                   2978 +3          DB       'V'
                          2979 +2              ;V
                          2980 +2          
058E 57                   2981 +3          DB       'W'
                          2982 +2          ;W
                          2983 +2          
058F 58                   2984 +3          DB       'X'
                          2985 +2          ;X
                          2986 +2          
0590 59                   2987 +3          DB       'Y'
                          2988 +2          ;Y
                          2989 +2          
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   58


LOC  OBJ                  LINE     SOURCE

0591 5A                   2990 +3          DB       'Z'
                          2991 +2          ;Z
                          2992 +2          
0592 5B                   2993 +3          DB       '['
                          2994 +2          ;[
                          2995 +2          
0593 5C                   2996 +3          DB       '\'
                          2997 +2          ;\
                          2998 +2          
0594 5D                   2999 +3          DB       ']'
                          3000 +2          ;]
                          3001 +2          
0595 5E                   3002 +3          DB       '^'
                          3003 +2          ;^
                          3004 +2          
0596 5F                   3005 +3          DB       '_'
                          3006 +2          ;_
                          3007 +2          
0597 60                   3008 +3          DB       '`'
                          3009 +2          ;`
                          3010 +2          
0598 61                   3011 +3          DB       'a'
                          3012 +2          ;a
                          3013 +2          
0599 62                   3014 +3          DB       'b'
                          3015 +2          ;b
                          3016 +2          
059A 63                   3017 +3          DB       'c'
                          3018 +2          ;c
                          3019 +2          
059B 64                   3020 +3          DB       'd'
                          3021 +2          ;d
                          3022 +2          
059C 65                   3023 +3          DB       'e'
                          3024 +2          ;e  
                          3025 +2          
059D 01                   3026 +3          DB       TRUE
                          3027 +2          ;f
                          3028 +2          
059E 67                   3029 +3          DB       'g'
                          3030 +2          ;g
                          3031 +2          
059F 68                   3032 +3          DB       'h'
                          3033 +2          ;h
                          3034 +2          
05A0 69                   3035 +3          DB       'i'
                          3036 +2          ;i
                          3037 +2          
05A1 6A                   3038 +3          DB       'j'
                          3039 +2          ;j
                          3040 +2          
05A2 6B                   3041 +3          DB       'k'
                          3042 +2          ;k
                          3043 +2          
05A3 6C                   3044 +3          DB       'l'
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   59


LOC  OBJ                  LINE     SOURCE

                          3045 +2          ;l
                          3046 +2          
05A4 6D                   3047 +3          DB       'm'
                          3048 +2          ;m
                          3049 +2          
05A5 6E                   3050 +3          DB       'n'
                          3051 +2          ;n
                          3052 +2          
05A6 00                   3053 +3          DB       FALSE
                          3054 +2          ;o
                          3055 +2          
05A7 70                   3056 +3          DB       'p'
                          3057 +2          ;p
                          3058 +2          
05A8 71                   3059 +3          DB       'q'
                          3060 +2          ;q
                          3061 +2          
05A9 72                   3062 +3          DB       'r'
                          3063 +2          ;r
                          3064 +2          
05AA 73                   3065 +3          DB       's'
                          3066 +2          ;s
                          3067 +2          
05AB 74                   3068 +3          DB       't'
                          3069 +2          ;t
                          3070 +2          
05AC 75                   3071 +3          DB       'u'
                          3072 +2          ;u
                          3073 +2          
05AD 76                   3074 +3          DB       'v'
                          3075 +2          ;v
                          3076 +2          
05AE 77                   3077 +3          DB       'w'
                          3078 +2          ;w
                          3079 +2          
05AF 78                   3080 +3          DB       'x'
                          3081 +2          ;x
                          3082 +2          
05B0 79                   3083 +3          DB       'y'
                          3084 +2          ;y
                          3085 +2          
05B1 7A                   3086 +3          DB       'z'
                          3087 +2          ;z
                          3088 +2          
05B2 7B                   3089 +3          DB       '{'
                          3090 +2          ;{
                          3091 +2          
05B3 7C                   3092 +3          DB       '|'
                          3093 +2          ;|
                          3094 +2          
05B4 7D                   3095 +3          DB       '}'
                          3096 +2          ;}
                          3097 +2          
05B5 7E                   3098 +3          DB       '~'
                          3099 +2          ;~
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   21:53:13  12/12/;3  PAGE   60


LOC  OBJ                  LINE     SOURCE

                          3100 +2          
05B6 7F                   3101 +3          DB       127
                          3102 +2          ;rubout
                          3103 +1          
                          3104             
                          3105             
----                      3106     CODE    ENDS
                          3107         
                          3108     ;the data segment
                          3109     
----                      3110     DATA    SEGMENT PUBLIC  'DATA'
                          3111     
0000 ????                 3112     Errorflag      DW      ?                ; Holds error type
0002 ????                 3113     magnitude       DW      ?               ; Shared magnitude (can be angle, speed), uns
                                   igned 
                          3114                                                                                     ; 15-
                                   bit val
0004 ??                   3115     sign            DB      ?               ; Can be POS or NEG
0005 ??                   3116     FSM_state       DB      ?               ; Holds the current state of FSM
                          3117     
0006 (9                   3118     Dir_Buffer      DB  Display_SIZE+1      DUP     (?)   ; 
     ??
     )
                          3119     
000F (9                   3120     Spd_Buffer      DB  Display_SIZE+1      DUP     (?)   ; 
     ??
     )
                          3121     
                          3122     
----                      3123     DATA    ENDS
                          3124     
                          3125             END 

ASSEMBLY COMPLETE, NO ERRORS FOUND
