8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  21:39:26  11/15/;3  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE DISPLAY
OBJECT MODULE PLACED IN DISPLAY.OBJ
ASSEMBLER INVOKED BY:  C:\UTIL\ASM86.EXE DISPLAY.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1     NAME        Display
                             2     
                             3 +1  $INCLUDE(display.inc);
                      =1     4     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1     5     ;                                                                               ;
                      =1     6     ;                                  Display.INC                                  ;
                      =1     7     ;                               Display Constants                           ;
                      =1     8     ;                                 Include File                              ;
                      =1     9     ;                                                                           ;
                      =1    10     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    11     
                      =1    12     ; This file contains the definitions for the display functions
                      =1    13     ;
                      =1    14     ; Revision History:
                      =1    15     ;    11/02/2013                 Created - Anjian Wu
                      =1    16     
                      =1    17     
                      =1    18     
                      =1    19     ; General Definitions
                      =1    20     
  0000                =1    21     ArrayEmpty      EQU     0               ; Empty is set at 0 index
  0008                =1    22     Display_SIZE    EQU     8               ; Size of chars that can fit in display
  0000                =1    23     SEGMENT_NULL    EQU     0               ; Byte value for Sseg pattern of ASCII_NULL
  0001                =1    24     SegPTRAdjust    EQU     1               ; Since we want WORD, we need to adjust 
                      =1    25     
                      =1    26     ; Display Addresses
                      =1    27     
  0000                =1    28     LEDDisplay      EQU     0               ; Display is hardware mapped to 0 - 7H
  0008                =1    29     LEDDisplay2     EQU     8               ; 14- seg also hardware mapped to 8h - 0DH
                      =1    30     
                      =1    31     
----                  =1    32     DISPLAYSTRUC     STRUC                      ;structure containing all display buffers
0000                  =1    33         buffer              DB          Display_SIZE        DUP     (?) ;pointer to the f
                                   unction to get switch 
----                  =1    34     DISPLAYSTRUC      ENDS
                      =1    35     
                      =1    36     
                      =1    37     
                            38 +1  $INCLUDE(general.inc);
                      =1    39     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    40     ;                                                                               ;
                      =1    41     ;                                  General.INC                                  ;
                      =1    42     ;                               General Constants                           ;
                      =1    43     ;                                 Include File                              ;
                      =1    44     ;                                                                           ;
                      =1    45     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    46     
                      =1    47     ; This file contains general operations
                      =1    48     ;
                      =1    49     ; Revision History:
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  21:39:26  11/15/;3  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    50     ;    11/02/2013                 Created - Anjian Wu
                      =1    51     
                      =1    52     
                      =1    53     ; General Constants
                      =1    54     
  0000                =1    55     ASCII_NULL      EQU     0           ;
  0004                =1    56     nibble_size     EQU     4           ;
  0008                =1    57     BYTE_size       EQU     8           ;
  0010                =1    58     WORD_size       EQU     16          ;
                      =1    59     
  0001                =1    60     TRUE            EQU     1           ;
  0000                =1    61     FALSE           EQU     0           ;
                      =1    62     
                      =1    63     ; General Definitions for Main Loops
                      =1    64     
  0001                =1    65     FIRST_RESERVED_VEC      EQU     1           ;reserve vectors 1-3
  0003                =1    66     LAST_RESERVED_VEC       EQU     3       ;
  0100                =1    67     NUM_IRQ_VECTORS     EQU 256     ;number of interrupt vectors
                      =1    68     
                            69 +1  $INCLUDE(timer.inc);
                      =1    70     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    71     ;                                                                               ;
                      =1    72     ;                                  Timer.INC                                    ;
                      =1    73     ;                              Timer Constants                              ;
                      =1    74     ;                                 Include File                              ;
                      =1    75     ;                                                                           ;
                      =1    76     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    77     
                      =1    78     ; This file contains the definitions for timers and their interupts
                      =1    79     ;
                      =1    80     ; Revision History:
                      =1    81     ;    11/02/2013                 Created - Anjian Wu
                      =1    82     
                      =1    83     
                      =1    84     
                      =1    85                                             ; Timer Definitions
                      =1    86     
                      =1    87     ; Addresses
  FF56                =1    88     Tmr0Ctrl        EQU     0FF56H          ;address of Timer 0 Control Register
  FF52                =1    89     Tmr0MaxCntA     EQU     0FF52H          ;address of Timer 0 Max Count A Register
  FF50                =1    90     Tmr0Count       EQU     0FF50H          ;address of Timer 0 Count Register
                      =1    91     
  FF5E                =1    92     Tmr1Ctrl        EQU     0FF5EH          ;address of Timer 1 Control Register
  FF52                =1    93     Tmr1MaxCntA     EQU     0FF52H          ;address of Timer 1 Max Count A Register
  FF50                =1    94     Tmr1Count       EQU     0FF50H          ;address of Timer 1 Count Register
                      =1    95     
                      =1    96     
  FF66                =1    97     Tmr2Ctrl        EQU     0FF66H          ;address of Timer 2 Control Register
  FF62                =1    98     Tmr2MaxCnt      EQU     0FF62H          ;address of Timer 2 Max Count A Register
  FF60                =1    99     Tmr2Count       EQU     0FF60H          ;address of Timer 2 Count Register
                      =1   100     
                      =1   101     ; Control Register Values
  E001                =1   102     Tmr0CtrlVal     EQU     0E001H          ;value to write to Timer 0 Control Register
                      =1   103                                             ;1---------------  enable timer
                      =1   104                                             ;-1--------------  write to control
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  21:39:26  11/15/;3  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   105                                             ;--1-------------  enable interrupts
                      =1   106                                             ;----000000------  reserved
                      =1   107                                             ;---0------0-----  read only
                      =1   108                                             ;-----------0----  TMRIN0 is an enable
                      =1   109                                             ;------------00--  count timer 2 outs
                      =1   110                                             ;--------------0-  single counter mode
                      =1   111                                             ;---------------1  continuous mode
                      =1   112     ; Control Register Values
  E001                =1   113     Tmr1CtrlVal     EQU     0E001H          ;value to write to Timer 0 Control Register
                      =1   114                                             ;1---------------  enable timer
                      =1   115                                             ;-1--------------  write to control
                      =1   116                                             ;--1-------------  enable interrupts
                      =1   117                                             ;----000000------  reserved
                      =1   118                                             ;---0------0-----  read only
                      =1   119                                             ;-----------0----  TMRIN0 is an enable
                      =1   120                                             ;------------00--  count timer 2 outs
                      =1   121                                             ;--------------0-  single counter mode
                      =1   122                                             ;---------------1  continuous mode
                      =1   123     
                      =1   124     
                      =1   125     ; Control Register Values
                      =1   126                                           
                      =1   127                                             ; Control Register Values
  08CA                =1   128     CTS_PER_MILSEC  EQU     2250            ; 18MHZ/(8 * 1KHz) ~ 2250 counts per MS
  0008                =1   129     TimerEOI        EQU     00008H          ;Timer EOI command (same for all timers)
  8000                =1   130     NonSpecEOI      EQU     08000H          ;Non-specific EOI command
                      =1   131     
                      =1   132     
                      =1   133     ; Interrupt Vectors and their control values
  0008                =1   134     Tmr0Vec         EQU     8               ;interrupt vector for Timer 0
  0012                =1   135     Tmr1Vec         EQU     18              ;interrupt vector for Timer 18
                      =1   136     
  FF32                =1   137     INTCtrlrCtrl    EQU     0FF32H          ;address of interrupt controller for timer
  FF22                =1   138     INTCtrlrEOI     EQU     0FF22H          ;address of interrupt controller EOI register
                      =1   139     
  0001                =1   140     INTCtrlrCVal    EQU     00001H          ;set priority for timers to 1 and enable
                      =1   141                                             ;000000000000----  reserved
                      =1   142                                             ;------------0---  enable timer interrupt
                      =1   143                                             ;-------------001  timer priority
                           144     
                           145     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           146     ;                                                                            ;
                           147     ;                                 HW4 Display Functions                      ;
                           148     ;                                 EE51                                           ;
                           149     ;                                 Anjian Wu                                  ;
                           150     ;                                                                            ;
                           151     ;                                 TA: Pipe-Mazo                              ;
                           152     ;                                                                            ;
                           153     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           154     ;                                 What's in here?
                           155     ;
                           156     ;                                   Code Segment
                           157     ;
                           158     ;   Display   -     This is pass a string to be displayed. The string is at
                           159     ;                   ES:SI and is null terminated. 
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  21:39:26  11/15/;3  PAGE    4


LOC  OBJ                  LINE     SOURCE

                           160     ;
                           161     ;   DisplayNum  -   This function is passed a 16-bit signed value to be outputted
                           162     ;                   to the display. The number is in AX, with at most 5 digits
                           163     ;
                           164     ;   DisplayHex   -  This function is passed a 16-bit HEX value to be outputted
                           165     ;                   to the display. The number is in AX with at most 4 digits; 
                           166     ;
                           167     ;   DisplayHandlerInit - This installs the DisplayHandler into vector table
                           168     ;
                           169     ;   DisplayHandler - This is the interrupt function that multiplexes the display
                           170     ;                    by grabbing the next char value to be outputted.
                           171     ;
                           172     ;   DisplayBufferFill - This function clears the display array with all ASCII_NULL
                           173     ;
                           174     ;                                   Data Segment
                           175     ;
                           176     ;   DisplayArray(DISPLAYSTRUC)  - Where DisplayArray's buffer is. This is only for
                           177     ;                                 storing ASCII, which is then translated into seg.
                           178     ;                                 (Easier to debug DisplayHex and DisplayNum)
                           179     ;
                           180     ;   DHandlerVarLow(DISPLAYSTRUC)  - Where DisplayHandler's high byte buffer is stored
                                   ;
                           181     ;
                           182     ;   DHandlerVarHigh(DISPLAYSTRUC)  - Where DisplayHandler's low byte buffer is stored
                                   ;
                           183     ;
                           184     ;   digit (DW)                  - The shared Handler pointer to next digit
                           185     ;
                           186     ;                                 What's was last edit?
                           187     ;
                           188     ;                               Pseudo code             - 11-02-2013 - Anjian Wu
                           189     ;                               Initial Version         - 11-08-2013 - Anjian Wu
                           190     ;                               Working 7 seg version   - 11-08-2013 - Anjian Wu
                           191     ;                               Working 14 seg version  - 11-09-2013 - Anjian Wu
                           192     
                           193     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           194     
                           195     ;Procedure:                     Display
                           196     ;
                           197     ;Description:           This procedure will take the address of the string at ES:SI, 
                                   and
                           198     ;                   place that string into the Dhandler buffers. This display buffers
                           199     ;                   is shared with DisplayHandler.
                           200     ;
                           201     ;                   DHandlerVarHigh.buffer  - Stores upper byte of 14-seg code
                           202     ;                   DHandlerVarLow.buffer   - Stores lower byte of 14-seg code 
                           203     ;                   (Both buffer elements share same index)
                           204     ;
                           205     ;                   This function does this by first clearing BOTH buffers using the
                           206     ;                   DisplayBufferFill to fill up buffers with SEGMENT_NULL. This help
                                   s
                           207     ;                   avoid displaying left over chars from previous strings.
                           208     ;
                           209     ;                   The function will then loop grabbing the ASCII_CHAR from ES:SI, a
                                   nd
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  21:39:26  11/15/;3  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           210     ;                   mapping the character to it's 14-segment code. The code is then s
                                   tored
                           211     ;                   into both the high and low buffer.
                           212     ;
                           213     ;                   If the loop hits a ASCII_NULL before the full Display_SIZE is rea
                                   ched,
                           214     ;                   the loop will terminate early. This is ok since we already cleare
                                   d the
                           215     ;                   buffers beforehand.
                           216     ;                   
                           217     ;                   
                           218     ;Operation:                     *   Call DisplayBufferFill(low byte buffer)
                           219     ;                   *   Call DisplayBufferFill(high byte buffer)
                           220     ;                   *   Clear Counter
                           221     ;                   *   Loop grabbing each char at ES:SI until counter hits Display_s
                                   ize
                           222     ;                       or ASCII_NULL was hit.
                           223     ;                       * Check counter
                           224     ;                       * Grab next char, is this ASCII_NULL? Yes -> terminate, no->k
                                   eep going
                           225     ;                       * Grab segtable offset, double char index to get absolute WOR
                                   D ptr
                           226     ;                       * Grab the WORD and split storing high and low byte into buff
                                   ers
                           227     ;                       * update counter and char (source) byte ptr.
                           228     ;
                           229     ;                   *   DONE
                           230     ;
                           231     ;Arguments:             SI   -> starting point of string ptr
                           232     ;                   ES   -> Can be either Data segment or Code segment
                           233     ;
                           234     ;Return Values:         None.
                           235     ;
                           236     ;Result:            New ASCII chars in the Dhander buffers.
                           237     ;
                           238     ;Shared Variables:      The buffer arrays is shared with DisplayHandler and DisplayBu
                                   ffFill
                           239     ;
                           240     ;Local Variables:       AX - Used as arg, store char, 
                           241     ;                   SI - Used to store ptr arg
                           242     ;                   BX - Used as ptr to access code segment
                           243     ;                   CX - Used as counter
                           244     ;                   
                           245     ;
                           246     ;Global Variables:      None.
                           247     ;                                       
                           248     ;                                       
                           249     ;Input:                 None.
                           250     ;
                           251     ;Output:                None.
                           252     ;
                           253     ;Registers Used:        AX, SI, BX, CX
                           254     ;
                           255     ;Stack Depth:           4 words
                           256     ;
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  21:39:26  11/15/;3  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           257     ;Known Bugs:            None.
                           258     ;
                           259     ;Data Structures:       DHandlerVarLow, DHandlerVarHigh (8 byte arrays)
                           260     ;
                           261     ;Error Handling:        None.  
                           262     ;
                           263     ;Algorithms:            None.
                           264     ;
                           265     ;Limitations:           Stores new chars in the same array while DisplayHandler inter
                                   rupt 
                           266     ;                   is running which also grabbing the chars out of same array.
                           267     ;                   However it should not really affect user experience since
                           268     ;                   interrupts will be very fast.
                           269     ;
                           270     ;
                           271     ;Author:                        Anjian Wu
                           272     ;History:                       11-04-2013: Pseudo code - Anjian Wu
                           273     ;                               Working 7 seg version   - 11-08-2013 - Anjian Wu
                           274     ;                               Working 14 seg version  - 11-09-2013 - Anjian Wu
                           275     ;-------------------------------------------------------------------------------
                           276     
                           277     CGROUP  GROUP   CODE
                           278     DGROUP GROUP    DATA
                           279     
----                       280     CODE SEGMENT PUBLIC 'CODE'
                           281     
                           282             ASSUME  CS:CGROUP, DS:DGROUP
                           283     
                           284     ;-------------------------------------------------------------------------------
                           285     
                           286             EXTRN   Dec2String:NEAR          ; Used to convert passed AX into dec ASCII
                           287             EXTRN   Hex2String:NEAR          ; Used to convert passed AX into hex ASCII
                           288             EXTRN   ASCIISegTable:NEAR          ; Used to convert passed AX into hex ASCI
                                   I
                           289     
                           290     
0000                       291     Display             PROC    NEAR
                           292                                     PUBLIC  Display
                           293                                     
                           294             
0000 51                    295             PUSH    CX;                     ; Store all Used Regs
0001 50                    296             PUSH    AX;
0002 53                    297             PUSH    BX;
                           298     
0003                       299     DisplayStrInit:
                           300     
0003 56                    301         PUSH    SI;                                         ; Save the original string po
                                   inter arg
0004                       302     DisplayClearLowbyte:
                           303     
0004 8D360800       R      304         LEA     SI, DHandlerVarLow.buffer   ; Grab address of lower byte seg buff
0008 B000                  305         MOV     AL, SEGMENT_NULL            ; Want to fill with SEGMENT_NULLs
000A E8CF00                306         CALL    DisplayBufferFill           ; Fill display array with SEGMENT_NULLs
                           307     
                           308     
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  21:39:26  11/15/;3  PAGE    7


LOC  OBJ                  LINE     SOURCE

000D                       309     DisplayClearHighbyte:   
                           310     
000D 8D361000       R      311         LEA     SI, DHandlerVarHigh.buffer  ; Grab address of high byte seg buff
0011 B000                  312         MOV     AL, SEGMENT_NULL            ; Want to fill with SEGMENT_NULLs
0013 E8C600                313         CALL    DisplayBufferFill           ; Fill display array with SEGMENT_NULLs
                           314             
0016                       315     DisplayBufferClearDone:  
                           316       
0016 5E                    317             POP     SI                              ; Get that original string pointer ba
                                   ck from stack
0017 B90000                318         MOV     CX, 0           ; Clear the counter
                           319                                
                           320     
001A                       321     DisplayStrLoop: ; Counter goes from 0 to DisplaySize - 1 or ends early if ASCII_NULL 
                                   found
                           322     
001A 83F908                323         CMP     CX, Display_SIZE    ; Is the counter maxed out?
001D 7D21                  324         JGE     DisplayStrDone      ; Yes, exit loop
                           325                                     ; No, continue loop
001F 33C0                  326             XOR             AX, AX                      ; Clear AX
                           327             
0021 268A04                328         MOV     AL, ES:[SI]         ; Grab char at address arg, put in AL
0024 3C00                  329         CMP     AL, ASCII_NULL      ; Is it ASCII_NULL? Cuz if so, end loop
0026 7418                  330         JE      DisplayStrDone      ; Yes, end loop
                           331         ;JNE    DisplayLoopSegtable ; No, continue
                           332         
0028                       333     DisplayLoopSegtable:
0028 BB0000         E      334         MOV     BX, OFFSET(ASCIISegTable);point into the table of seg table
002B D1E0                  335             SHL             AX, SegPTRAdjust            ;Get absolute value from table by
                                    mul 2^(SegPTRAdjust)
002D 03D8                  336             ADD             BX, AX                          ; Get absolute appropriate se
                                   g table addr
                           337         
002F 2E8B07                338         MOV         AX,     CS:[BX]                 ;Now seg val is in AX
                           339      
0032 8BD9                  340         MOV     BX, CX                  ; Move counter (which also acts as index) to
                           341                                         ; BX as data seg ptr.
                           342                                          
                           343                                          
0034 88870800       R      344         MOV     DHandlerVarLow.buffer[BX]   , AL   ; Split AX into low and high byte
0038 88A71000       R      345         MOV     DHandlerVarHigh.buffer[BX]  , AH  
                           346             
003C 41                    347         INC     CX                          ; Update Counter
003D 46                    348         INC     SI                          ; Update char pointer (Str source)
                           349         
003E EBDA                  350         JMP     DisplayStrLoop  ; 
                           351         
0040                       352     DisplayStrDone:
                           353     
0040 5B                    354             POP    BX;
0041 58                    355             POP    AX;
0042 59                    356             POP    CX               ;    Restore all used regs          
                           357             
0043 C3                    358         RET                     
                           359         
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  21:39:26  11/15/;3  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           360     Display  ENDP 
                           361     
                           362     
                           363     
                           364     ;Procedure:                     DisplayNum
                           365     ;
                           366     ;
                           367     ;Description:           This procedure will take the value at AX, and convert that de
                                   cimal
                           368     ;                   value into a string placed inside DisplayArray (a buffer) and the
                                   n
                           369     ;                   finally call Display to convert the stored string of ASCII's.
                           370     ;
                           371     ;                   This buffer is not directly accessed by DisplayHandler, but is
                           372     ;                   used to convert to seg pattern code if passed to Display.
                           373     ;
                           374     ;                   First it will clear the display buffer with ASCII_NULLs with Disp
                                   layBufferFill,
                           375     ;                   call Dec2String, which already places the a passed value into 
                           376     ;                   the passed address accordingly into the display array. 
                           377     ;                   
                           378     ;                   The purpose of the separate Displayarray buffer is to help debugg
                                   ing
                           379     ;                   reasons, such that the user doesn't have to decode the segment bu
                                   ff.
                           380     ;
                           381     ;                   
                           382     ;                   
                           383     ;Operation:                     *   Load address of DisplayArray buffer 
                           384     ;                   *   Call DisplayBufferFill with ASCII-NULLs
                           385     ;                   *   Pass address and value to Dec2String
                           386     ;                   *   Prepare to pass ES:SI, by making ES = DS
                           387     ;                   *   Call Display
                           388     ;
                           389     ;Arguments:             AX - Num to be displayed
                           390     ;
                           391     ;
                           392     ;Return Values:         None.
                           393     ;
                           394     ;Result:            New ASCII chars in the display array and in DHandler buffers
                           395     ;
                           396     ;Shared Variables:      DisplayArray buffer is  shared with Dec2String and Display
                           397     ;
                           398     ;Local Variables:       AX - Used as arg, store char, 
                           399     ;                   SI - Used to store ptr arg
                           400     ;                   ES - Used as ptr to pass data segmentp
                           401     ;                   DisplayArray.buffer - stores new ASCII string to be passed to Dis
                                   play
                           402     ;
                           403     ;Global Variables:      None.
                           404     ;                                       
                           405     ;                                       
                           406     ;Input:                 None.
                           407     ;
                           408     ;Output:                None.
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  21:39:26  11/15/;3  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           409     ;
                           410     ;Registers Used:        AX, ES, SI, DS
                           411     ;
                           412     ;Stack Depth:           4 Words;
                           413     ;
                           414     ;Known Bugs:            None.
                           415     ;
                           416     ;Data Structures:       DisplayArray.buffer (8 byte buffer)
                           417     ;
                           418     ;Error Handling:        If passed decimal length is too large, then DisplayArray is n
                                   ot
                           419     ;                   places and errorflag is raised. NOTE THIS FEATURE IS INSIDE
                           420     ;                   DEC2STRING, thus the flags raised should also be passed back.
                           421     ;                   
                           422     ;
                           423     ;Algorithms:            None.
                           424     ;
                           425     ;Limitations:           Stores new chars (after calling Display) in the same array 
                           426     ;                   while DisplayHandler interrupt 
                           427     ;                   is running which also grabbing the chars out of same array.
                           428     ;                   However it should not really affect user experience since
                           429     ;                   interrupts will be very fast.
                           430     ;
                           431     ;
                           432     ;Author:                        Anjian Wu
                           433     ;History:                       11-04-2013: Pseudo code - Anjian Wu
                           434     ;                               Working 7 seg version   - 11-08-2013 - Anjian Wu
                           435     ;                               Working 14 seg version  - 11-09-2013 - Anjian Wu
                           436     ;-------------------------------------------------------------------------------
                           437     
                           438     
0044                       439     DisplayNum              PROC    NEAR
                           440                                     PUBLIC  DisplayNum
                           441                     
                           442                     
0044 50                    443             PUSH    AX;                     Save all Used regs
0045 56                    444         PUSH    SI
0046 06                    445         PUSH    ES
                           446         
0047                       447     DisplayNumStrInit:
0047 50                    448         PUSH    AX                      ; DisplayBufferFill also uses AX as arg, so save 
                                   that
                           449         
0048 8D360000       R      450         LEA     SI, DisplayArray.buffer ; Grab address of display array buffer
004C B000                  451         MOV     AL, ASCII_NULL          ; Fill with ASCII_NULL
004E E88B00                452         CALL    DisplayBufferFill       ; 
                           453         
0051 58                    454         POP     AX                      ; Restore the arg  
0052                       455     DisplayNumPlace:
                           456     
0052 E80000         E      457         CALL    Dec2String              ; Dec2String chars at DS:SI
                           458         
0055 8CD8                  459         MOV     AX, DS
0057 8EC0                  460         MOV     ES, AX                  ; Prepare to access DS for display
                           461             
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  21:39:26  11/15/;3  PAGE   10


LOC  OBJ                  LINE     SOURCE

0059 E8A4FF                462         CALL    Display                 ; Translate ES:SI aka. DS:SI into Seg code
                           463         
005C                       464     DisplayNumDONE:
                           465     
005C 07                    466             POP    ES
005D 5E                    467         POP    SI
005E 58                    468         POP    AX;                      Restore all used Regs
                           469     
005F C3                    470         RET                             
                           471         
                           472     DisplayNum  ENDP      
                           473     
                           474     ;Procedure:                     DisplayHex
                           475     ;
                           476     ;
                           477     ;Description:           This procedure will take the value at AX, and convert that he
                                   x
                           478     ;                   value into a string placed inside DisplayArray (a buffer) and the
                                   n
                           479     ;                   finally call Display to convert the stored string of ASCII's.
                           480     ;
                           481     ;                   This buffer is not directly accessed by DisplayHandler, but is
                           482     ;                   used to convert to seg pattern code if passed to Display.
                           483     ;
                           484     ;                   First it will clear the display buffer with ASCII_NULLs with Disp
                                   layBufferFill,
                           485     ;                   call Hex2String, which already places the a passed value into 
                           486     ;                   the passed address accordingly into the display array. 
                           487     ;                   
                           488     ;                   The purpose of the separate Displayarray buffer is for debugging
                           489     ;                   reasons, such that the user doesn't have to decode the segment bu
                                   ff.
                           490     ;
                           491     ;                   
                           492     ;                   
                           493     ;Operation:                     *   Load address of DisplayArray buffer 
                           494     ;                   *   Call DisplayBufferFill with ASCII-NULLs
                           495     ;                   *   Pass address and value to Hex2String
                           496     ;                   *   Prepare to pass ES:SI, by making ES = DS
                           497     ;                   *   Call Display
                           498     ;
                           499     ;Arguments:             AX - Hex to be displayed
                           500     ;
                           501     ;
                           502     ;Return Values:         None.
                           503     ;
                           504     ;Result:            New ASCII chars in the display array and in DHandler buffers
                           505     ;
                           506     ;Shared Variables:      DisplayArray buffer is  shared with Dec2String and Display
                           507     ;
                           508     ;Local Variables:       AX - Used as arg, store char, 
                           509     ;                   SI - Used to store ptr arg
                           510     ;                   ES - Used as ptr to pass data segmentp
                           511     ;                   DisplayArray.buffer - stores new ASCII string to be passed to Dis
                                   play
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  21:39:26  11/15/;3  PAGE   11


LOC  OBJ                  LINE     SOURCE

                           512     ;
                           513     ;Global Variables:      None.
                           514     ;                                       
                           515     ;                                       
                           516     ;Input:                 None.
                           517     ;
                           518     ;Output:                None.
                           519     ;
                           520     ;Registers Used:        AX, ES, SI, DS
                           521     ;
                           522     ;Stack Depth:           4 Words;
                           523     ;
                           524     ;Known Bugs:            None.
                           525     ;
                           526     ;Data Structures:       DisplayArray.buffer (8 byte buffer)
                           527     ;
                           528     ;Error Handling:        If passed decimal length is too large, then DisplayArray is n
                                   ot
                           529     ;                   places and errorflag is raised. NOTE THIS FEATURE IS INSIDE
                           530     ;                   DEC2STRING, thus the flags raised should also be passed back.
                           531     ;                   
                           532     ;
                           533     ;Algorithms:            None.
                           534     ;
                           535     ;Limitations:           Stores new chars (after calling Display) in the same array 
                           536     ;                   while DisplayHandler interrupt 
                           537     ;                   is running which also grabbing the chars out of same array.
                           538     ;                   However it should not really affect user experience since
                           539     ;                   interrupts will be very fast.
                           540     ;
                           541     ;
                           542     ;Author:                        Anjian Wu
                           543     ;History:                       11-04-2013: Pseudo code - Anjian Wu
                           544     ;                               Working 7 seg version   - 11-08-2013 - Anjian Wu
                           545     ;                               Working 14 seg version  - 11-09-2013 - Anjian Wu
                           546     ;-------------------------------------------------------------------------------
                           547     
                           548     
0060                       549     DisplayHex              PROC    NEAR
                           550                                     PUBLIC  DisplayHex
                           551                                     
0060 50                    552             PUSH    AX;                     Save all Used regs
0061 56                    553         PUSH    SI
0062 06                    554         PUSH    ES
                           555         
0063                       556     DisplayHexInit:
                           557     
0063 50                    558         PUSH    AX                       ; DisplayBufferFill also uses AX as arg, so save
                                    that
                           559         
0064 8D360000       R      560         LEA     SI, DisplayArray.buffer  ; Grab address of display array
0068 B000                  561         MOV     AL, ASCII_NULL           ;
006A E86F00                562         CALL    DisplayBufferFill        ; Fill display array with ASCII_NULLs
                           563         
006D 58                    564         POP     AX                       ;  Restore the ARG
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  21:39:26  11/15/;3  PAGE   12


LOC  OBJ                  LINE     SOURCE

                           565         
006E                       566     DisplayHexPlace:
                           567     
006E E80000         E      568         CALL    Hex2String              ; Hex2String chars at DS:SI, with AX
                           569         
0071 8CD8                  570         MOV     AX, DS
0073 8EC0                  571         MOV     ES, AX                  ; Prepare to access DS for display
                           572             
0075 E888FF                573         CALL    Display                 ; Translate ES:SI aka. DS:SI
0078                       574     DisplayhexDONE:
                           575     
0078 07                    576             POP    ES
0079 5E                    577         POP    SI
007A 58                    578         POP    AX;                      Restore all used Regs
                           579     
007B C3                    580         RET       
                           581              
                           582     DisplayHex  ENDP   
                           583     
                           584     ; DisplayHandlerInit
                           585     ;
                           586     ; Description:       Does all initializations for DispalyHandler.
                           587     ;
                           588     ;                    Installs the displayhandler for the timer0 interrupt at 
                           589     ;                    interrupt table index Tmr0Vec. ALso clears the digit
                           590     ;                    used to index the segment digit to be displayed in
                           591     ;                    in DisplayHandler.
                           592     ;
                           593     ; Operation:         *  First clear the Digit to 0.
                           594     ;                                        *      Then calls DisplayBuffFill, passing S
                                   EG_NULLs to be filled
                           595     ;                                               for DHandlerVarHigh and DHandlerVarLo
                                   w buffers. That way
                           596     ;                                               the display will not output random st
                                   uff initially.
                           597     ;                    *  Then writes the address of the displayhandler to the
                           598     ;                    *  imer0 location in the interrupt vector table. Notice
                           599     ;                       need to multiple by 4 since table stores a CS and IP.
                           600     ;                     
                           601     ;
                           602     ; Arguments:         None.
                           603     ; Return Value:      None.
                           604     ;
                           605     ; Local Variables:   AX - Used to temporarily store vector table offset for ES
                           606     ; 
                           607     ; Shared Variables:  Digit (WORD) - Stores segment ptr for DisplayHandler
                           608     ;
                           609     ; Global Variables:  None.
                           610     ;
                           611     ; Input:             None.
                           612     ; Output:            None.
                           613     ;
                           614     ; Error Handling:    None.
                           615     ;
                           616     ; Algorithms:        None.
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  21:39:26  11/15/;3  PAGE   13


LOC  OBJ                  LINE     SOURCE

                           617     ; Data Structures:   None.
                           618     ;
                           619     ; Registers Used:    AX, ES
                           620     ;
                           621     ; Stack Depth:       0 words
                           622     ;
                           623     ;Author:                        Anjian Wu
                           624     ;History:                       11-04-2013: Pseudo code - Anjian Wu
                           625     ;                               Working 7 seg version   - 11-08-2013 - Anjian Wu
                           626     ;                               Working 14 seg version  - 11-09-2013 - Anjian Wu
                           627     ;                               Added buffer clearing   - 11-10-2013 - Anjian Wu
                           628     ;-------------------------------------------------------------------------------
                           629     
007C                       630     DisplayHandlerInit  PROC    NEAR
                           631                         PUBLIC  DisplayHandlerInit
                           632     
                           633     
007C C70618000000   R      634             MOV     Digit, 0    ; Clear the Digit counters
                           635                     
0082                       636     DisplayInitClearLowbyte:        ; Also important to clear buffer in the beginning
                           637     
0082 8D360800       R      638                     LEA     SI, DHandlerVarLow.buffer   ; Grab address of lower byte seg 
                                   buff
0086 B000                  639                     MOV     AL, SEGMENT_NULL            ; Want to fill with SEGMENT_NULLs
0088 E85100                640                     CALL    DisplayBufferFill           ; Fill display array with SEGMENT
                                   _NULLs
                           641     
                           642     
008B                       643     DisplayInitClearHighbyte:       
                           644     
008B 8D361000       R      645                     LEA     SI, DHandlerVarHigh.buffer  ; Grab address of high byte seg b
                                   uff
008F B000                  646                     MOV     AL, SEGMENT_NULL            ; Want to fill with SEGMENT_NULLs
0091 E84800                647                     CALL    DisplayBufferFill           ; Fill display array with SEGMENT
                                   _NULLs
                           648     
0094                       649     DisplayInitVectorSetting:
                           650     
0094 33C0                  651             XOR     AX, AX          ;clear ES (interrupt vectors are in segment 0)
0096 8EC0                  652             MOV     ES, AX
                           653                                     ;store the vector
0098 26C7064800A700 R      654             MOV     ES: WORD PTR (4 * Tmr1Vec), OFFSET(DisplayHandler)
009F 26C7064A00---- R      655             MOV     ES: WORD PTR (4 * Tmr1Vec + 2), SEG(DisplayHandler)
                           656     
                           657     
00A6 C3                    658             RET                     ;all done, return
                           659     
                           660     
                           661     DisplayHandlerInit  ENDP
                           662                                     
                           663       
                           664     
                           665     
                           666     ;Procedure:                     DisplayHandler
                           667     ;
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  21:39:26  11/15/;3  PAGE   14


LOC  OBJ                  LINE     SOURCE

                           668     ;
                           669     ;Description:           Does all necessary functions to display to 14-segment.
                           670     ;                   This procedure will grab the next counter index. It will then use
                           671     ;                   this to index for the next char to be output to the display. 
                           672     ;
                           673     ;                   If the counter is beyond the number of characters available to th
                                   e display
                           674     ;                   the counter will reset back to 0. Thus the display is effectively
                           675     ;                   looping over all the chars as each interrupt comes.
                           676     ;
                           677     ;                   Since the counter value needs to be saved, I use a local variable
                                    
                           678     ;                   allocated in the data memory. Also since 14-seg requires two byte
                                    writes,
                           679     ;                   I have two Dhandler buffers for the HIGH and LOW byte array stora
                                   ge.
                           680     ;
                           681     ;                   
                           682     ;                   
                           683     ;Operation:                     *   Save all regs
                           684     ;                   *   Grab stored segment digit to be outputted, see if it is maxed
                                    out
                           685     ;                       * If so, then reset to 0 and keep going
                           686     ;                       * If not, then use it and keep going
                           687     ;                   *   Grab HIGH byte to AL and LOW byte to AH (This order matters)
                           688     ;                   *   Grab the I/O address for UPPER byte write for 14-seg
                           689     ;                   *   Use the Digit as offset for I/O write location (ADD)
                           690     ;                   *   OUT the AL (HIGH BYTE), this MUST be first to be outputted.
                           691     ;                   *   Since LOW byte is in AH, just swap AH with AL.
                           692     ;                   *   Again OUT AL (LOW BYTE), and update Digit++
                           693     ;                   *   Send appropriate EOI
                           694     ;
                           695     ;                   
                           696     ;Arguments:         Digit - stores counter 
                           697     ;
                           698     ;Return Values:         Digit - updated counter for next interrupt
                           699     ;
                           700     ;Result:            New ASCII char in the display. Updated counter value
                           701     ;
                           702     ;Shared Variables:      Digit - shared with DispalyHandlerInit (just accessed once to
                                    reset)
                           703     ;                   DHandlerVarLow  (8 byte arrays) - Shared with Display
                           704     ;                   DHandlerVarHigh (8 byte arrays) - Shared with Display
                           705     ;
                           706     ;Local Variables:       AX - stores all seg pattern codes. Also stores EOI value
                           707     ;                   BX - stores counter and acts as seg ptr
                           708     ;                   DX - stores seg pat right before output. stores I/O offsets
                           709     ;
                           710     ;Global Variables:      None.
                           711     ;                                       
                           712     ;                                       
                           713     ;Input:                 None.
                           714     ;
                           715     ;Output:                New ASCII char in the display at next offset.
                           716     ;
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  21:39:26  11/15/;3  PAGE   15


LOC  OBJ                  LINE     SOURCE

                           717     ;Registers Used:        AX, BX, DX
                           718     ;
                           719     ;Stack Depth:           3 Words.
                           720     ;
                           721     ;Known Bugs:            None.
                           722     ;
                           723     ;Data Structures:       DHandlerVarLow, DHandlerVarHigh (8 byte arrays)
                           724     ;
                           725     ;Error Handling:        None.
                           726     ;
                           727     ;Algorithms:            None.
                           728     ;
                           729     ;Limitations:           Outputs new chars in the same array Display might bechanging
                           730     ;
                           731     ;
                           732     ;Author:                        Anjian Wu
                           733     ;History:                       11-04-2013: Pseudo code - Anjian Wu
                           734     ;                               Working 7 seg version   - 11-08-2013 - Anjian Wu
                           735     ;                               Working 14 seg version  - 11-09-2013 - Anjian Wu
                           736     ;-------------------------------------------------------------------------------
                           737     
                           738     
00A7                       739     DisplayHandler              PROC    NEAR
                           740                                             PUBLIC  DisplayHandler
                           741     
00A7 50                    742             PUSH    AX                          ;save the registers
00A8 53                    743             PUSH    BX                          ;Event Handlers should NEVER change
00A9 52                    744             PUSH    DX                          ;any register values
                           745     
00AA                       746     DisplayHInit:
                           747     
00AA 8B1E1800       R      748             MOV     BX, Digit                   ;get offset for current digit
00AE 83FB08                749             CMP     BX, Display_SIZE            ;Is the offset too large?
00B1 7C03                  750             JL      DisplayHUpdate              ;no it isn't keep going
                           751             ;JGE     DisplayDigitReset          ;yes it is, reset it
                           752     
00B3                       753     DisplayDigitReset:
                           754     
00B3 BB0000                755             MOV    BX, 0                        ; Clear the digit index
                           756     
                           757     
                           758                     ;        
00B6                       759     DisplayHUpdate:                                 ; update the display
00B6 8A871000       R      760             MOV     AL, DHandlerVarHigh.buffer[BX]  ; Grab HIGH byte seg pat from buffer 
                                      
00BA 8AA70800       R      761             MOV     AH, DHandlerVarLow.buffer[BX]   ; Grab LOW byte seg pat from buffer  
                                     
                           762     
00BE BA0800                763             MOV     DX, LEDDisplay2                 ; get the display address for UPPER s
                                   eg pat   
00C1 03D3                  764             ADD     DX, BX                          ; ADD digit offset for display
00C3 EE                    765             OUT     DX, AL                          ; output segment directly
                           766     
00C4 BA0000                767             MOV     DX, LEDDisplay                  ; get the display address for LOW seg
                                    pat        
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  21:39:26  11/15/;3  PAGE   16


LOC  OBJ                  LINE     SOURCE

00C7 03D3                  768             ADD     DX, BX                          ; ADD digit offset for display
                           769             
00C9 86C4                  770             XCHG    AL, AH                                          ; Only AL is allowed 
                                   for OUT-ing bytes 
                           771                                                 ; (also a nifty operation)
                           772                                                 
00CB EE                    773             OUT     DX, AL                      ;output segment directly
                           774                     
                           775     
                           776     
00CC                       777     DisplayDigitUpdate:                         ;Update digit
                           778     
00CC 43                    779             INC     BX                          ;update segment digit
                           780             
00CD 891E1800       R      781             MOV     Digit, BX                   ;save it for next time
                           782     
                           783     
00D1                       784     EndDisplayHandler:                      ;done taking care displaying
                           785     
00D1 BA22FF                786             MOV     DX, INTCtrlrEOI         ;send the EOI to the interrupt controller
00D4 B80800                787             MOV     AX, TimerEOI
00D7 EE                    788             OUT     DX, AL
                           789     
00D8 5A                    790             POP     DX                      ;restore the registers
00D9 5B                    791             POP     BX
00DA 58                    792             POP     AX
                           793     
                           794     
00DB CF                    795             IRET                            ;and return (Event Handlers end with IRET not
                                    RET)
                           796     
                           797     
                           798     DisplayHandler       ENDP
                           799             
                           800     ;Procedure:                     DisplayBufferFill
                           801     ;
                           802     ;
                           803     ;Description:           This procedure will fill the any Display_SIZE byte buffer 
                           804     ;                   with the PASSED arg value (AL).
                           805     ;
                           806     ;                   It does this by simply looping through 0 to Display_SIZE - 1
                           807     ;                   and writing AL to each char in DS:SI
                           808     ;
                           809     ;                   This function is used often to empty a buffer.
                           810     ;                   
                           811     ;Operation:                     *   Reset counter
                           812     ;                   *   Loop Display_SIZE times and fill each char with AL.
                           813     ;                   *   Update counter and Data seg ptr (SI)
                           814     ;                   *   DONE
                           815     ;
                           816     ;                   
                           817     ;Arguments:         AL -    The char to be filled with
                           818     ;                   DS:SI - Location of buffer to be filled
                           819     ;
                           820     ;Return Values:         None.
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  21:39:26  11/15/;3  PAGE   17


LOC  OBJ                  LINE     SOURCE

                           821     ;
                           822     ;Result:            ASCII_NULL empty DisplayArray
                           823     ;
                           824     ;Shared Variables:      This function may fill buffers used by DisplayNum, DusplayHex
                                   ,
                           825     ;                   and Display. (DisplayArray, DHandler1, Dhandler2 Display_SIZE byt
                                   e buffers)
                           826     ;
                           827     ;Local Variables:       SI - Pointer to DS:SI's char
                           828     ;                   CX - Counter
                           829     ;
                           830     ;Global Variables:      None.
                           831     ;                                       
                           832     ;                                       
                           833     ;Input:                 None.
                           834     ;
                           835     ;Output:                None.
                           836     ;
                           837     ;Registers Used:        CX, SI, AL
                           838     ;
                           839     ;Stack Depth:           4 Words.
                           840     ;
                           841     ;Known Bugs:            None.
                           842     ;
                           843     ;Data Structures:       Display_SIZE sized buffers
                           844     ;
                           845     ;Error Handling:        None.
                           846     ;
                           847     ;Algorithms:            None.
                           848     ;
                           849     ;Limitations:           Outputs new chars in the same array that DisplayHandler touch
                                   es.
                           850     ;
                           851     ;
                           852     ;Author:                        Anjian Wu
                           853     ;History:                       11-04-2013: Pseudo code - Anjian Wu
                           854     ;                               Working 7 seg version   - 11-08-2013 - Anjian Wu
                           855     ;                               Working 14 seg version  - 11-09-2013 - Anjian Wu
                           856     ;-------------------------------------------------------------------------------
                           857     
00DC                       858     DisplayBufferFill               PROC    NEAR
                           859                                             PUBLIC  DisplayBufferFill
                           860                                             
00DC 51                    861         PUSH    CX;             Save all Used Regs
00DD 53                    862         PUSH    BX;             Important since many functions use this
00DE 50                    863         PUSH    AX;
00DF 56                    864         PUSH    SI;
                           865                                     
00E0                       866     DisplayClrInit:
                           867     
                           868     
00E0 B90000                869         MOV     CX, 0           ; Clear the counter
                           870                                 ; Counter goes from 0 to DisplaySize - 1
                           871     
00E3                       872     DisplayClrLoop:
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  21:39:26  11/15/;3  PAGE   18


LOC  OBJ                  LINE     SOURCE

                           873     
00E3 83F908                874         CMP     CX, Display_SIZE ; Is the counter maxed out?
00E6 7D06                  875         JGE     DisplayClrDone  ; Yes, exit loop
                           876                                 ; No, continue loop
                           877                                 
00E8 8804                  878         MOV     [SI] , AL       ; Fill that byte with ARG
                           879             
00EA 41                    880         INC     CX              ; Update Counter
00EB 46                    881         INC     SI              ; Update Data seg ptr
                           882         
00EC EBF5                  883         JMP     DisplayClrLoop  ; 
                           884         
00EE                       885     DisplayClrDone:
                           886     
00EE 5E                    887         POP    SI;
00EF 58                    888         POP    AX;
00F0 5B                    889         POP    BX;
00F1 59                    890         POP    CX;              Restore all used regs
                           891     
00F2 C3                    892         RET                     
                           893         
                           894     DisplayBufferFill  ENDP           
                           895     
                           896     
----                       897     CODE    ENDS 
                           898         
----                       899     DATA    SEGMENT PUBLIC  'DATA'
                           900     
                           901     
0000 (8                    902         DisplayArray       DISPLAYSTRUC <>      ;Where DisplayArray's buffer is. Use this
                                    only for
     ??
     )
                           903                                                 ;storing ASCII so that debugging is easie
                                   r.
                           904     
0008 (8                    905         DHandlerVarLow       DISPLAYSTRUC <>      ;Where DisplayHandler's high byte buffe
                                   r is stored
     ??
     )
                           906     
0010 (8                    907         DHandlerVarHigh       DISPLAYSTRUC <>      ;Where DisplayHandler's low byte buffe
                                   r is stored
     ??
     )
                           908     
0018 ????                  909         digit               DW      ?           ;The shared Handler pointer to next digit
                           910             
----                       911     DATA    ENDS
                           912     
                           913             END 

ASSEMBLY COMPLETE, NO ERRORS FOUND
