8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE PARSER
OBJECT MODULE PLACED IN PARSER.OBJ
ASSEMBLER INVOKED BY:  C:\UTIL\ASM86.EXE PARSER.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1     NAME        Parser
                             2     
                             3 +1  $INCLUDE(macros.inc);
                      =1     4 +1  $NOLIST
                           108 +1  $INCLUDE(parser.inc);
                      =1   109     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   110     ;                                                                               ;
                      =1   111     ;                                  Parser.INC                                   ;
                      =1   112     ;                              Parser Constants                             ;
                      =1   113     ;                                 Include File                              ;
                      =1   114     ;                                                                           ;
                      =1   115     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   116     
                      =1   117     ; This file contains the definitions for Parser
                      =1   118     ;
                      =1   119     ; Revision History:
                      =1   120     ;    12/04/2013                 Created - Anjian Wu
                      =1   121     ;    12/06/2013                 Add FSM states and Tokens - Anjian Wu
                      =1   122     ;    12/08/2013                 Documentation - Anjian Wu
                      =1   123     
                      =1   124     ;FSM Constants
                      =1   125     
  0001                =1   126     POS             EQU     1       ; Used for IMUL for conversion
 -0001                =1   127     NEGA            EQU     -1      ; Used for IMUL for conversion
  FFFE                =1   128     MAX_ABS_SPEED   EQU     65534   ; Maximum speed val
  0000                =1   129     MIN_ABS_SPEED   EQU     0       ; minimum speed val
  7FFF                =1   130     MAX_MAG         EQU     32767   ; Max allowed val excluding sign
  003C                =1   131     MAX_ELEVATION   EQU     60      ; Max ele angle
 -003C                =1   132     MIN_ELEVATION   EQU     -60     ; Min ele ang
                      =1   133     
                      =1   134     ;FSM States Definitions
                      =1   135     
  0000                =1   136     ST_INITIAL          EQU     0   ;Start state
  0001                =1   137     ST_SAS_INIT     EQU     1   ;Set Abs Speed: wait for digit or '+'
  0002                =1   138     ST_SAS_SIGN     EQU     2   ;Set Abs Speed: wait for digit
  0003                =1   139     ST_SAS          EQU     3   ;Set Abs Speed: concat digits
  0004                =1   140     ST_SRS_INIT     EQU     4   ;Set Rel Speed: wait for digit or '+' or '-'
  0005                =1   141     ST_SRS_SIGN     EQU     5   ;Set Rel Speed: wait for digit
  0006                =1   142     ST_SRS          EQU     6   ;Set Rel Speed: concat digits
  0007                =1   143     ST_DIR_INIT     EQU     7   ;Set Direction: wait for digit or '+' or '-'
  0008                =1   144     ST_DIR_SIGN     EQU     8   ;Set Direction: wait for digit
  0009                =1   145     ST_DIR          EQU     9   ;Set Direction: concat digits
  000A                =1   146     ST_RTR_INIT     EQU     10  ;Rot Turret Angle: wait for digit or '+' or '-'
  000B                =1   147     ST_RTR_SIGN     EQU     11  ;Rot Turret Angle: wait for digit
  000C                =1   148     ST_RTA_ABS      EQU     12  ;Rot Turret Angle: concat digits
  000D                =1   149     ST_RTA_REL      EQU     13  ;Rot Turret Angle: concat digits
  000E                =1   150     ST_STEA_INIT    EQU     14  ;Set Turret Elevation Angle: wait for digit or '+' or '-'
  000F                =1   151     ST_STEA_SIGN    EQU     15  ;Set Turret Elevation Angle: wait for digit
  0010                =1   152     ST_STEA         EQU     16  ;Set Turret Elevation Angle: concat digits
  0011                =1   153     ST_LAZON        EQU     17  ;Set Laser ON
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE    2


LOC  OBJ                  LINE     SOURCE

  0012                =1   154     ST_LAZOFF       EQU     18  ;Set Laser OFF
                      =1   155     
                      =1   156     ;Token offsets
  0000                =1   157     TOKEN_S         EQU     0; - Set Speed
  0001                =1   158     TOKEN_V         EQU     1; - Set Rel Speed
  0002                =1   159     TOKEN_D         EQU     2;- Set Dir
  0003                =1   160     TOKEN_T         EQU     3; - Rot Turr Angl
  0004                =1   161     TOKEN_E         EQU     4; - Set Turr Ele
  0005                =1   162     TOKEN_F         EQU     5;- Laser On
  0006                =1   163     TOKEN_O         EQU     6;- Laser Off
  0007                =1   164     TOKEN_NUM       EQU     7;- A digit
  0008                =1   165     TOKEN_POS       EQU     8;- '+'
  0009                =1   166     TOKEN_NEG       EQU     9; - '-'
  000A                =1   167     TOKEN_IGNORE    EQU     10; Ignore this char
  000B                =1   168     TOKEN_END       EQU     11; - Return
  000C                =1   169     TOKEN_OTHER     EQU     12; Bad char
                      =1   170     
  000D                =1   171     NUM_TOKEN_TYPES EQU     TOKEN_OTHER + 1; TOKEN_OTHER is always the last Token
                      =1   172     
                      =1   173     ; TOken Masks
                      =1   174     
  007F                =1   175     TOKEN_MASK      EQU     01111111B       ;mask high bit of token
                      =1   176     
                      =1   177     
                           178 +1  $INCLUDE(general.inc);
                      =1   179     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   180     ;                                                                               ;
                      =1   181     ;                                  General.INC                                  ;
                      =1   182     ;                               General Constants                           ;
                      =1   183     ;                                 Include File                              ;
                      =1   184     ;                                                                           ;
                      =1   185     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   186     
                      =1   187     ; This file contains general operations
                      =1   188     ;
                      =1   189     ; Revision History:
                      =1   190     ;    11/02/2013                 Created - Anjian Wu
                      =1   191     ;    11/23/2013                 Added WORD_LOOKUP_ADJUST - Anjian Wu
                      =1   192     ;    12/05/2014         Added FMS_ERROR key, ZERO, changed other keys to 
                      =1   193     ;                       ASCII based - Anjian
                      =1   194     
                      =1   195     
                      =1   196     ; General Constants
                      =1   197     
  0000                =1   198     ASCII_NULL      EQU     0           ;
  0004                =1   199     nibble_size     EQU     4           ;
  0008                =1   200     BYTE_size       EQU     8           ;
  0010                =1   201     WORD_size       EQU     16          ;
  0200                =1   202     MAX_Q_LENG          EQU     512          ;Maxlength allowed for byte or word queue
                      =1   203     
  0001                =1   204     TRUE            EQU     1           ;
  0000                =1   205     FALSE           EQU     0           ;
                      =1   206     
  0000                =1   207     RESET           EQU     0           ; General Value for Resetting something
                      =1   208     
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE    3


LOC  OBJ                  LINE     SOURCE

  0000                =1   209     CLEAR           EQU     0           ;
                      =1   210     
  0000                =1   211     ZERO            EQU     0           ;
                      =1   212     
  000A                =1   213     DIGIT           EQU     10          ; A digit in base 10 
                      =1   214     
  0001                =1   215     WORD_LOOKUP_ADJUST  EQU    1           ; Two bytes in one word -> SHL by 1
                      =1   216     
                      =1   217     ; General Definitions for Main Loops
                      =1   218     
  0001                =1   219     FIRST_RESERVED_VEC      EQU     1           ;reserve vectors 1-3
  0003                =1   220     LAST_RESERVED_VEC       EQU     3       ;
  0100                =1   221     NUM_IRQ_VECTORS     EQU 256     ;number of interrupt vectors
                      =1   222     
                      =1   223     ; MainLoop Key Codes
                      =1   224     
  0000                =1   225     KEY_EVENT_KEY       EQU     0   ; Event code indicating key pressed
  0001                =1   226     SER_ERR_KEY         EQU     1   ; Event code indicating serial error
  0002                =1   227     RX_ENQUEUED_KEY     EQU     2   ; Event code indicating new rx value gotten
  0003                =1   228     MODEM_KEY           EQU     3   ; Event code indicating modem event
  0004                =1   229     FSM_ERROR           EQU     4   ; Error key showing FSM error
                      =1   230     
                      =1   231     ; General Addresses
                      =1   232     
  FF22                =1   233     INTCtrlReg          EQU     0FF22H  ;EOI interrupt controller       
                           234 +1  $INCLUDE(motors.inc); 
                      =1   235     
                      =1   236     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   237     ;                                                                               ;
                      =1   238     ;                                  Motors.INC                                   ;
                      =1   239     ;                               Motor Constants                             ;
                      =1   240     ;                                 Include File                              ;
                      =1   241     ;                                                                           ;
                      =1   242     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   243     
                      =1   244     ; This file contains the definitions for the Motor functions
                      =1   245     ;
                      =1   246     ; Revision History:
                      =1   247     ;    11/23/2013                 Created - Anjian Wu
                      =1   248     
                      =1   249     
                      =1   250     
                      =1   251     ; Fx Table Definitions
                      =1   252     
  7FFF                =1   253     Fx1             EQU     07FFFH         ; Fx component for Motor 1
  C000                =1   254     Fx2             EQU     0C000H         ; Fx component for Motor 2
  C000                =1   255     Fx3             EQU     0C000H         ; Fx component for Motor 3
  0000                =1   256     Fy1             EQU     0              ; Fy component for Motor 1
  9127                =1   257     Fy2             EQU     09127H         ; Fy component for Motor 2
  6ED9                =1   258     Fy3             EQU     06ED9H         ; Fy component for Motor 3
                      =1   259     
  0003                =1   260     FY_offset       EQU     3              ; Fy components are 3 down in the table
                      =1   261     
                      =1   262     ; SetMotorSpeed Local Vars
 -0002[]              =1   263     Fx          EQU     WORD PTR [BP - 2]   ; Stores the Fx component for each motor
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE    4


LOC  OBJ                  LINE     SOURCE

 -0004[]              =1   264     Fy          EQU     WORD PTR [BP - 4]   ; Stores the Fy component for each motor
 -0006[]              =1   265     COS_VAL     EQU     WORD PTR [BP - 6]   ; Stores the COS(ANGLESTORED)
 -0008[]              =1   266     SIN_VAL     EQU     WORD PTR [BP - 8]   ; Stored the SIN(ANGLESTORED)
                      =1   267     
                      =1   268     ; Motor Conv. Constants
                      =1   269     
  0168                =1   270     FULL_ANGLE      EQU     360             ; There are 360 deg in a full circle
 -8000                =1   271     NO_ANGLE_CHANGE EQU     -32768          ; NO angle change is denoted by -32768
  FFFF                =1   272     NO_SPEED_CHANGE EQU     65535           ; No speed change is denoted by 65534;
  0003                =1   273     numOfmotors     EQU     3               ; There are three motors on Robotrike
                      =1   274     
  0000                =1   275     STOPPED_SPEED   EQU     0               ; Value for no motor movement
  0000                =1   276     ZERO_ANGLE      EQU     0               ; Value for 0 degress
                      =1   277     
  0001                =1   278     SPEED_ADJUST    EQU     1               ; Num of bits to shift for speed
                      =1   279     
  0002                =1   280     EXTRA_SIGN_BITS EQU     2               ; There are two extra sign bits in
                      =1   281                                             ; Setmotorspeed's S[i] calc
                      =1   282     
  0000                =1   283     ZERO_SPEED_PWM  EQU     0               ; Zero speed requires 0 duty cycle
                      =1   284     
  007F                =1   285     PWM_WIDTH_MAX   EQU     127             ; Resolution of PWM
                      =1   286     
  0008                =1   287     SetMotorVarSize EQU     8               ; SetMotorSpeed requires 4 words of local
                      =1   288                                             ; variables on Stack.
                      =1   289     
                      =1   290     
                      =1   291     ; Motor PORT Vals
  0183                =1   292     _8255_CNTRL_REG EQU     183H    ;Control Word Address
  0080                =1   293     _8255_CNTRL_VAL EQU     80H     ;Control Word Write val: MODE 0 for BOTH groups A & B
                      =1   294     
  0181                =1   295     PORTB           EQU     181H    ;Address of port B
                      =1   296     
                      =1   297     ; MOtor MASK vals
                      =1   298                                       
  0002                =1   299     FORWARD_M1          EQU     00000010B   ;   MASK FORWARD for Motor 1
  0003                =1   300     BACKWARD_M1     EQU     00000011B   ;   MASK BACKWARD for Motor 1
                      =1   301     
  0008                =1   302     FORWARD_M2          EQU     00001000B   ;   MASK FORWARD for Motor 2
  000C                =1   303     BACKWARD_M2     EQU     00001100B   ;   MASK BACKWARD for Motor 2
                      =1   304     
  0020                =1   305     FORWARD_M3          EQU     00100000B   ;   MASK FORWARD for Motor 3
  0030                =1   306     BACKWARD_M3     EQU     00110000B   ;   MASK BACKWARD for Motor 3
                      =1   307     
  00FD                =1   308     STOP_M1             EQU     11111101B   ;   MASK STOP for Motor 1 
  00F7                =1   309     STOP_M2             EQU     11110111B   ;   MASK STOP for Motor 2 
  00DF                =1   310     STOP_M3             EQU     11011111B   ;   MASK STOP for Motor 3 
                      =1   311     
  0080                =1   312     LASER_ON        EQU     10000000B   ;   OR MASK for laser ON (PortB)
  007F                =1   313     LASER_OFF       EQU     01111111B   ;   AND MASK for laser OFF (PortB)
                      =1   314     
                      =1   315     
                      =1   316     
                      =1   317     
                           318     
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           319     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           320     ;                                                                            ;
                           321     ;                                 HW8 Parser Functions                       ;
                           322     ;                                 EE51                                           ;
                           323     ;                                 Anjian Wu                                  ;
                           324     ;                                                                            ;
                           325     ;                                 TA: Pipe-Mazo                              ;
                           326     ;                                                                            ;
                           327     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           328     ;                                 What's in here?
                           329     ;
                           330     ;                          Code Segment (* indicates public)
                           331     ;
                           332     ;   ParseSerialChar*     -   Passed a char for processing in FSM
                           333     ;   ParseReset*          -   Resets all Parser variables
                           334     ;   GetTokenTypeVal      -   Grabs next token val and type
                           335     ;   Concat_Num           -   Used to prepare passed args to Motor Vars from 
                           336     ;                            parsed chars.
                           337     ;   FSM ACTION Functions:
                           338     ;   no_op               -   Just returns
                           339     ;   SetSpeed            -   Handles absolute speed setting
                           340     ;   SetRelSpeed         -   Handles relative speed setting
                           341     ;   SetDir              -   Handles direction setting
                           342     ;   RotRelTurrAng       -   Handles rel turret rotation setting
                           343     ;   RotAbsTurrAng       -   Handles abs turret rotation setting
                           344     ;   SetTurrEleAng       -   Handles turrent ele angle setting
                           345     ;   SetSign             -   Sets the sign accordingly
                           346     ;   SetError            -   Sets the errorflag
                           347     ;   LaserON             -   Turns laser ON
                           348     ;   LaserOff            -   Turns laser OFF
                           349     ;
                           350     ;                                   Data Segment
                           351     ;
                           352     ;   sign                -   Stores the sign of the num being processed
                           353     ;   magnitude           -   Stores the universal magnitude (can be speed, angle,etc.)
                           354     ;   errorflag           -   Stores errors
                           355     ;   FSM_state           -   Stores the current state
                           356     ;
                           357     ;                              What's was last edit?
                           358     ;
                           359     ;                               Pseudo code     ->  12-01-2013 - Anjian Wu
                           360     ;                   Wrote Assembly  ->  12-04-2013 - Anjian Wu
                           361     ;                   Wrote Assembly  ->  12-05-2013 - Anjian Wu
                           362     ;                   Working         ->  12-08-2013 - Anjian Wu
                           363     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           364     CGROUP  GROUP   CODE
                           365     DGROUP GROUP    DATA
                           366     
----                       367     CODE SEGMENT PUBLIC 'CODE'
                           368     
                           369             ASSUME  CS:CGROUP, DS:DGROUP
                           370             
                           371             EXTRN   SetMotorSpeed:NEAR          ; Sets motor speed and angle
                           372             EXTRN   GetMotorSpeed:NEAR          ; Grabs abs speed
                           373             EXTRN   GetMotorDirection:NEAR      ; Grabs movement angle
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           374             EXTRN   SetLaser:NEAR               ; Sets laser on or off
                           375             EXTRN   GetLaser:NEAR               ; Gets laser status
                           376                     EXTRN   SetTurretAngle:NEAR         ; Change abs turret angle
                           377             EXTRN   GetTurretAngle:NEAR         ; Get abs turret angle
                           378             EXTRN   SetRelTurretAngle:NEAR      ; Change relative turret angle
                           379                     EXTRN   SetTurretElevation:NEAR     ; Set turret ele angle
                           380                     EXTRN   GetTurretElevation:NEAR     ; Get current ele angle
                           381     
                           382     
                           383     ;Procedure:                     ParseSerialChar
                           384     ;
                           385     ;Description:           Used pass char in AX to grab NEXT token val and type, and use
                                   s
                           386     ;                   that to calc the proper pointer to the function to be called
                           387     ;                   by the state machine. The token TYPE is used to find the abs
                           388     ;                   action function offset and the token TYPE is always passed as
                           389     ;                   (AL) into the action function. The action function, however, may
                           390     ;                   or may not use the passed token val. The next FSM state is also
                           391     ;                   saved in a shared variable FSM_state for the next time.
                           392     ;
                           393     ;                   If the state machine returns to ST_INITIAL then it also resets 
                           394     ;                   the parser variables. If there is an error detected after the act
                                   ion
                           395     ;                   function is call, then the function will also reset the parser 
                           396     ;                   variables.
                           397     ;                   
                           398     ;                   This function always returns error status in AX. See 'Error Handl
                                   ing'.
                           399     ;
                           400     ;Operation:         * Clear Errorflag, grab next token val and key using GetTokenType
                                   Val.
                           401     ;                   * offset = (NUM_TOKEN_TYPES * FSM_State + token type)* SIZE TRANS
                                   ITION_ENTRY
                           402     ;                   * Call Function (Action) using offset, passing token val in AL
                           403     ;                   * If Errorflag is true, store FSM_state and FSM_ERROR bytes into 
                                   AX for return
                           404     ;                       * Call ParseReset
                           405     ;                   * Else, grab nextstate using offset, store the next state into FS
                                   M_state
                           406     ;                       * If next state is ST_INITIAL, then Call ParseReset
                           407     ;                   * Return Errorflag in AX 
                           408     ;
                           409     ;Arguments:             AL   -> The next char to be parsed
                           410     ;
                           411     ;Return Values:         AX - > The errorflag
                           412     ;
                           413     ;Shared Variables:      Errorflag (WRITE/READ)
                           414     ;                   FSM_state (READ/WRITE)
                           415     ;
                           416     ;Local Variables:       AL      -   token val, char
                           417     ;                   AH      -   token type
                           418     ;                   AX      -   error, char
                           419     ;                   BX      -   table offset
                           420     ;                   DH      -   save token type
                           421     ;                   CH      -   save token val
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           422     ;                   
                           423     ;                   
                           424     ;Global Variables:      None.                                   
                           425     ;Input:                 none.
                           426     ;Output:                none.
                           427     ;Registers Used:        AX, BX, CH, DH
                           428     ;Stack Depth:           3 words
                           429     ;Known Bugs:            None.
                           430     ;Data Structures:       None.
                           431     ;Error Handling:        Errors come in two ways:
                           432     ;                   FSM TYPE 1. Symbol/Char error -> NEXTSTATE already is ST_INITIAL
                           433     ;                   FSM TYPE 2. Value error  -> NEXTSTATE may or may not be ST_INITIA
                                   L
                           434     ;                   These errors are treated the same in that the return value AX
                           435     ;                   will contain the FSM_State in AL and the FSM_ERROR key in AH. The
                                    FSM
                           436     ;                   will also RESET immediately if error is seen.
                           437     ;
                           438     ;Algorithms:        Call Table FSM look up. Table offset = NUM_TOKEN_TYPES * FSM_Stat
                                   e + token type
                           439     ;Limitations:           None.
                           440     ;Author:                        Anjian Wu
                           441     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                           442     ;                                       12-04-2013: Modified from Glen's floatptd.asm
                                    - Anjian Wu 
                           443     ;                   12-08-2013: Working - Anjian Wu
                           444     ;------------------------------------------------------------------------------
                           445     
0000                       446     ParseSerialChar         PROC    NEAR
                           447                                             PUBLIC  ParseSerialChar
                           448     
0000                       449     ParseSerialInit:
                           450     
0000 52                    451         PUSH        DX       ; Save all Regs
0001 53                    452             PUSH    BX
0002 51                    453             PUSH    CX              
                           454             
0003 C70600000000   R      455         MOV Errorflag, FALSE            ;Assume no errors
                           456             
0009                       457     ParseGrabTokens:        
0009 E84600                458             CALL    GetTokenTypeVal         ; Grab next token key and val
000C 8AF4                  459             MOV             DH, AH                      ; Save token type
000E 8AE8                  460             MOV             CH, AL                      ; Save token val
                           461             
0010                       462     ParseComputeTrans:                      ;figure out what transition to do
0010 B00D                  463             MOV             AL, NUM_TOKEN_TYPES     ;find row in the table
0012 F6260500       R      464             MUL             FSM_State           ;Get to current FSM state
0016 02C6                  465             ADD             AL, DH                  ;Calc abs transition inside that stat
                                   e
0018 80D400                466             ADC             AH, zero                     ;propagate low byte carry into h
                                   igh byte
                           467     
001B 6BD80390              468             IMUL    BX, AX, SIZE TRANSITION_ENTRY   ;now convert to table offset
                           469     
001F                       470     ParseDoActions:                             ;do the actions (don't affect regs)
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           471     
001F 8AC5                  472             MOV             AL, CH                      ;Pass Token Val (not always used 
                                   by ACTION)
0021 2EFF979601     R      473             CALL    CS:RobotFSMTable[BX].ACTION     ;do the actions
                           474     
0026                       475     ParseCheckError:
0026 833E000001     R      476         CMP     Errorflag, TRUE     ; Was there an error from the FSM action?
                           477                                     ; Errors can come in two ways
                           478                                     ; FSM TYPE 1. Symbol/Char error -> NEXTSTATE already 
                                   is ST_INITIAL
                           479                                     ; FSM TYPE 2. Value error  -> NEXTSTATE may or may no
                                   t be ST_INITIAL
002B 750B                  480         JNE     ParseNextTransition ; Nope, so grab the next one
                           481         ;JE     ParseRecordError    ; There was an error
                           482         
002D                       483     ParseRecordError:
002D A00500         R      484         MOV     AL, FSM_State       ; Store the current state before it is updated 
                           485                                     ; since it where there that error was found
0030 B404                  486         MOV     AH, FSM_ERROR       ; Indicate that this was an FSM error (This
                           487                                     ; differentiates a value of FALSE vs. error in FSM_St
                                   ate = 0)
                           488                                     
0032 A30000         R      489         MOV     Errorflag, AX       ; Store that state as an error-type
0035 EB1190                490         JMP     ParseNeedReset      ; We just got error, thus immediately exit this cmd p
                                   ath
                           491                                     ; and go back to ST_INITIAL to wait for VALID next cm
                                   d.
                           492                                     ; * Notice this IS redundant for FSM TYPE 1 errors si
                                   nce nxt state
                           493                                     ;   is already ST_INITIAL, however
                           494                                     ;   we treat all errors the same to simplify code.
                           495         
0038                       496     ParseNextTransition:                    ;now go to next state
                           497     
0038 2E8A8F9501     R      498             MOV             CL, CS:RobotFSMTable[BX].NEXTSTATE
003D 880E0500       R      499         MOV     FSM_state, CL   ; We need this nextstate stored for next time.
                           500         
0041 803E050000     R      501             CMP             FSM_state, ST_INITIAL   ; Did the state machine restart?
0046 7503                  502             JNE             ParseDone           ; If not then just continue.
                           503             ;JE             ParseNeedReset  ; Else we need to reset some parser variables
0048                       504     ParseNeedReset:
0048 E81A00                505             CALL    ParseReset              ; Reset parser variables (FSM_STATE, magnitud
                                   e, sign)
                           506         ;JMP    ParseDone       ;
004B                       507     ParseDone:
004B A10000         R      508         MOV     AX, Errorflag       ; Restore the error (if any) back into AX for return
                           509                                     ; AH - whether or not error happened, AL - FSM_state 
                                   (if error)
                           510         
004E 59                    511             POP  CX
004F 5B                    512             POP      BX
0050 5A                    513             POP  DX                     ; Restore used regs
                           514             
                           515         
0051 C3                    516         RET
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           517         
                           518     ParseSerialChar ENDP
                           519     
                           520     ; GetTokenTypeVal
                           521     ;
                           522     ; Description:      This procedure returns the token class and token value for
                           523     ;                   the passed character.  The character is truncated to
                           524     ;                   7-bits because the table only has 127 ASCII chars inside.
                           525     ;
                           526     ; Operation:        Looks up the passed character in two tables, one for token
                           527     ;                   types or classes, the other for token values.
                           528     ;
                           529     ; Arguments:        AL - character to look up.
                           530     ; Return Value:     AL - token value for the character.
                           531     ;                   AH - token type or class for the character.
                           532     ;
                           533     ; Local Variables:  BX - table pointer, points at lookup tables.
                           534     ; Shared Variables: None.
                           535     ; Global Variables: None.
                           536     ;
                           537     ; Input:            None.
                           538     ; Output:           None.
                           539     ;
                           540     ; Error Handling:   None.
                           541     ;
                           542     ; Algorithms:       Table lookup.
                           543     ; Data Structures:  Two tables, one containing token values and the other
                           544     ;                   containing token types.
                           545     ;
                           546     ; Registers Used:   AX, BX.
                           547     ; Stack Depth:      0 words.
                           548     ;
                           549     ; Author:           Anjian Wu
                           550     ; Last Modified:    12-02-2013: Adapted from Glen's floatptd.asm - Anjian Wu :)
                           551     ;                   12-08-2013: Add documentation to show understanding - Anjian Wu
                           552     
                           553     
0052                       554     GetTokenTypeVal PROC    NEAR
                           555     
                           556     
0052                       557     InitGetFPToken:                         ;setup for lookups
0052 247F                  558             AND     AL, TOKEN_MASK          ;strip unused bits (high bit) ONLY 127 CHARS 
                                   IN TABLE
0054 8AE0                  559             MOV     AH, AL                      ;and preserve value in AH
                           560     
                           561     ; TokenTypeTable and TokenValueTable's values are paired/mapped one to one
                           562     
0056                       563     TokenTypeLookup:                        ;get the token type
0056 BB7A0490       R      564         MOV     BX, OFFSET(TokenTypeTable)  ;BX points at table
005A 2ED7                  565             XLAT    CS:TokenTypeTable               ;have token type in AL
005C 86E0                  566             XCHG    AH, AL                              ;token type in AH, character in A
                                   L
                           567     
005E                       568     TokenValueLookup:                                    ;get the token value
005E BBFA0490       R      569         MOV     BX, OFFSET(TokenValueTable)  ;BX points at table
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   10


LOC  OBJ                  LINE     SOURCE

0062 2ED7                  570             XLAT    CS:TokenValueTable               ;have token value in AL
                           571     
                           572     
0064                       573     EndGetFPToken:                               ;done looking up type and value
0064 C3                    574             RET
                           575     
                           576     
                           577     GetTokenTypeVal ENDP
                           578     
                           579     ;Function:                      ParseReset
                           580     ;Description:           Resets all Parser variables to initial state, zero magnitude,
                                    and pos sign     
                           581     ;Operation:         * Set sign as POS, set FSM_state as ST_INITIAL, and set magnitude
                                    as zero         
                           582     ;Arguments:             None.
                           583     ;Return Values:         none.
                           584     ;Shared Variables:      none.
                           585     ;Local Variables:       None.
                           586     ;Global Variables:      None.                   
                           587     ;Input:                 None.
                           588     ;Output:                None.
                           589     ;Registers Used:        none.
                           590     ;Stack Depth:           none.
                           591     ;Known Bugs:            None.
                           592     ;Data Structures:       None.
                           593     ;Error Handling:        None
                           594     ;Algorithms:            None.
                           595     ;Limitations:           None.
                           596     ;Author:                        Anjian Wu
                           597     ;Author:                        Anjian Wu
                           598     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                           599     ;                   12-08-2013: Documentation - Anjian Wu
                           600     ;------------------------------------------------------------------------------
0065                       601     ParseReset  PROC    NEAR
                           602                 
0065 C60604000190   R      603         MOV     sign, POS               ; Set default val as positive
006B C60605000090   R      604         MOV     FSM_state, ST_INITIAL   ; Set Default FSM machine state
0071 C70602000000   R      605         MOV     magnitude, zero         ; Assume magnitude is zero
                           606         
0077 C3                    607             RET
                           608             
                           609     ParseReset  ENDP                   
                           610     
                           611     ;Procedure:                     Concat_Num
                           612     ;
                           613     ;Description:           Takes the token value (which should be the digit val) and ins
                                   erts
                           614     ;                   that digit into the 1's (base 10) digit of the current magnitude.
                           615     ;                   IF the magnitude, during the calc, is determined to be too big
                           616     ;                   then the errorflag is raised, else the magnitude is stored.
                           617     ;                           
                           618     ;Operation:         * Multiply stored magnitude by DIGIT 
                           619     ;                   * Check if overflow
                           620     ;                   * ADD next digit's val (the arg)
                           621     ;                   * Check if carry
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   11


LOC  OBJ                  LINE     SOURCE

                           622     ;                   * Check if value is at MAX_MAG + 1 (which is OK if sign is NEG)
                           623     ;                       * If equal, then check if this is special case -(MAX_MAG + 1 
                                   )
                           624     ;                           * If so then continue to store it
                           625     ;                           * Else CALL SetError
                           626     ;                       * If greater than CALL SetError
                           627     ;                   * Else it is OK and store the new magnitude
                           628     ;                   * Return
                           629     ;
                           630     ;Arguments:             AL = token val/next digit
                           631     ;Return Values:         none.
                           632     ;Shared Variables:      magnitude(READ/WRITE)
                           633     ;Local Variables:       AX  - stores digit, magnitude
                           634     ;                   BX  - copy of digit
                           635     ;                   DX  - operand of multiply 
                           636     ;Global Variables:      None.                   
                           637     ;Input:                 None.
                           638     ;Output:                None.
                           639     ;Registers Used:        AX, BX, DX
                           640     ;Stack Depth:           3 words
                           641     ;Known Bugs:            None.
                           642     ;Data Structures:       None.
                           643     ;Error Handling:        If during the calculation, the magnitude is...
                           644     ;                   1. Greater than 16-bits
                           645     ;                   2. Greater than MAX_MAG
                           646     ;                   Then the digit cannot be added. Thus just return with errorflag r
                                   aised.
                           647     ;Algorithms:            new magnitude = magnitude * 10 + digit
                           648     ;Limitations:           None.
                           649     ;Author:                        Anjian Wu
                           650     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                           651     ;                   12-08-2013: Documentation - Anjian Wu
                           652     ;------------------------------------------------------------------------------
0078                       653     Concat_Num  PROC    NEAR
                           654     
0078 50                    655         PUSH    AX                      ; Store used regs
0079 53                    656         PUSH    BX                      ;
007A 52                    657         PUSH    DX                      ;
                           658         
007B                       659     Concat_NumInit:
007B 33DB                  660         XOR     BX, BX                  ; 
007D 8AD8                  661         MOV     BL, AL                  ; Store the digit for later
                           662         
007F                       663     Concat_Num_Test:   
007F A10200         R      664         MOV     AX, magnitude           ; Copy mag for math
0082 BA0A00                665         MOV     DX, DIGIT               ; We need a new spot for the next digit insertion
0085 F7E2                  666         MUL     DX                      ; Add a 0's into magnitudes one's digit
0087 7018                  667         JO      Concat_MagTooBig        ; Did the mag get too large? if so error
                           668         
0089 03C3                  669         ADD     AX, BX                  ; Fill the new one's digit place with the passed 
                                   digit
008B 7214                  670         JC      Concat_MagTooBig        ; Did the mag get too large? if so error
                           671         
008D 3D0080                672         CMP     AX, MAX_MAG + 1         ; Does the mag fit the # of bits restriction?
0090 7408                  673         JE      Concat_MagMaybeTooBig   ; It is exactly MAX_MAG + 1 , check if special ca
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   12


LOC  OBJ                  LINE     SOURCE

                                   se
0092 770D                  674             JA              Concat_MagTooBig                ; Too large, report error
                           675         ;JLE    Concat_success          ; Everything ok, store the new mag
                           676         
0094                       677     Concat_success:
0094 A30200         R      678         MOV     magnitude, AX           ; Store new magnitude
0097 EB0B90                679         JMP     Concat_done             ; Done
                           680     
                           681     ;   Since we are concatenating string rep of a 16-bit signed, the
                           682     ;   -(MAX_MAG + 1) is handled as a special case. 
                           683     
009A                       684     Concat_MagMaybeTooBig:
009A 803E0400FF     R      685             CMP             sign, NEGA                              ; Are we dealing with
                                    negative number?
009F 74F3                  686             JE              Concat_success                  ;
                           687             ;JMP    Concat_MagTooBig                ;
                           688             
00A1                       689     Concat_MagTooBig:
00A1 E80800                690         CALL    SetError                ; The new Mag is too large
00A4                       691     Concat_done:
                           692     
00A4 5A                    693         POP     DX
00A5 5B                    694         POP     BX
00A6 58                    695         POP     AX                      ; Restore used regs
                           696         
00A7 C3                    697         RET
                           698         
                           699     Concat_Num  ENDP
                           700     
                           701     ;Procedure:                     SetSign
                           702     ;
                           703     ;Description:           Sets sign based on passed token val. The token val is exactly
                           704     ;                   the sign we want.
                           705     ;Operation:         *sign = token val
                           706     ;Arguments:             AL - Token val containing sign
                           707     ;Return Values:         none.
                           708     ;Shared Variables:      sign(write)
                           709     ;Local Variables:       None.
                           710     ;Global Variables:      None.                   
                           711     ;Input:                 None.
                           712     ;Output:                None.
                           713     ;Registers Used:        AL
                           714     ;Stack Depth:           none.
                           715     ;Known Bugs:            None.
                           716     ;Data Structures:       None.
                           717     ;Error Handling:        None
                           718     ;Algorithms:            None.
                           719     ;Limitations:           None.
                           720     ;Author:                        Anjian Wu
                           721     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                           722     ;                   12-08-2013: Documentation - Anjian Wu
                           723     ;------------------------------------------------------------------------------
00A8                       724     SetSign     PROC    NEAR
                           725         
00A8 A20400         R      726         MOV     sign, AL    ; The passed token val itself is already the sign
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   13


LOC  OBJ                  LINE     SOURCE

                           727         
00AB C3                    728         RET
                           729         
                           730     SetSign ENDP
                           731     
                           732     ;Procedure:                     SetError
                           733     ;
                           734     ;Description:           An error has occurred, so set the error flag true.
                           735     ;
                           736     ;Operation:         * Errorflag = TRUE
                           737     ;        
                           738     ;Arguments:             None.
                           739     ;Return Values:         none.
                           740     ;Shared Variables:      Errorflag(write)
                           741     ;Local Variables:       None.
                           742     ;Global Variables:      None.                   
                           743     ;Input:                 None.
                           744     ;Output:                None.
                           745     ;Registers Used:        AH, AL
                           746     ;Stack Depth:           none.
                           747     ;Known Bugs:            None.
                           748     ;Data Structures:       None.
                           749     ;Error Handling:        None
                           750     ;Algorithms:            None.
                           751     ;Limitations:           None.
                           752     ;Author:                        Anjian Wu
                           753     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                           754     ;                   12-08-2013: Documentation - Anjian Wu
                           755     ;------------------------------------------------------------------------------
00AC                       756     SetError        PROC    NEAR
                           757     
00AC C70600000100   R      758         MOV     Errorflag, TRUE     ; An error has occurred
                           759     
00B2 C3                    760         RET
                           761         
                           762     SetError ENDP
                           763     
                           764     ;Procedure:                     no_op
                           765     ;
                           766     ;Description:           Just return (stub function)
                           767     ;        
                           768     ;Arguments:             None.
                           769     ;Return Values:         none.
                           770     ;Shared Variables:      none.
                           771     ;Local Variables:       None.
                           772     ;Global Variables:      None.                   
                           773     ;Input:                 None.
                           774     ;Output:                None.
                           775     ;Registers Used:        None.
                           776     ;Stack Depth:           none.
                           777     ;Known Bugs:            None.
                           778     ;Data Structures:       None.
                           779     ;Error Handling:        None
                           780     ;Algorithms:            None.
                           781     ;Limitations:           None.
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   14


LOC  OBJ                  LINE     SOURCE

                           782     ;Author:                        Anjian Wu
                           783     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                           784     ;                   12-08-2013: Documentation - Anjian Wu
                           785     ;------------------------------------------------------------------------------
00B3                       786     no_op        PROC    NEAR
                           787     
00B3 C3                    788         RET
                           789         
                           790     no_op   ENDP
                           791      
                           792     
                           793     
                           794     ;Procedure:                     SetSpeed
                           795     ;
                           796     ;Description:           Sets the speed only, and does not change angle. The speed is 
                           797     ;                   exactly the magnitude.
                           798     ;
                           799     ;Operation:         * SetMotorSpeed(magnitude, NO_ANGLE_CHANGED)
                           800     ;                
                           801     ;Arguments:             None.
                           802     ;Return Values:         none.
                           803     ;Shared Variables:      magnitude (READ)
                           804     ;Local Variables:       None.
                           805     ;Global Variables:      None.                   
                           806     ;Input:                 None.
                           807     ;Output:                None.
                           808     ;Registers Used:        AX, BX
                           809     ;Stack Depth:           none.
                           810     ;Known Bugs:            None.
                           811     ;Data Structures:       None.
                           812     ;Error Handling:        None
                           813     ;Algorithms:            None.
                           814     ;Limitations:           None.
                           815     ;Author:                        Anjian Wu
                           816     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                           817     ;                   12-08-2013: Documentation - Anjian Wu
                           818     ;------------------------------------------------------------------------------
00B4                       819     SetSpeed        PROC    NEAR
                           820     
00B4 50                    821             PUSH    AX                  ; Saved used regs
00B5 53                    822             PUSH    BX
                           823                     
00B6 A10200         R      824         MOV     AX, magnitude       ; Concat_Num already ensures magnitude is VALID val
                           825                                     ; thus just directly set it
00B9 BB0080                826         MOV     BX, NO_ANGLE_CHANGE ;
00BC E80000         E      827         CALL    SetMotorSpeed       ;
                           828     
00BF 5B                    829             POP             BX
00C0 58                    830             POP             AX                  ; Restore used regs
                           831             
00C1 C3                    832         RET
                           833         
                           834     SetSpeed    ENDP
                           835     
                           836     ;Procedure:                     SetRelSpeed
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   15


LOC  OBJ                  LINE     SOURCE

                           837     ;
                           838     ;Description:           Sets the relative speed passed on stored values of magnitude 
                                   and sign.
                           839     ;                   If magnitude * sign's change in speed is beyond MIN or MAX ABS_SP
                                   EED,
                           840     ;                   then CAP the value at exactly the MIN or MAX_ABS_SPEED.
                           841     ;
                           842     ;Operation:         * Grab motor speed
                           843     ;                   * If (sign is POS)
                           844     ;                       * next speed = current speed + magnitude 
                           845     ;                   * Else
                           846     ;                       * next speed = current speed - magnitude 
                           847     ;                   * If either previous operations exceeded 16-bits (carry flag)
                           848     ;                     then set next speed to MAX_ABS_SPEED and MIN_ABS_SPEED 
                           849     ;                     respectively.
                           850     ;                   * Also if next speed happens to be NO_SPEED_CHANGE, then also
                           851     ;                     set next speed as MAX_ABS_SPEED.
                           852     ;                   * Finally SetMotorSpeed(next speed, NO_ANGLE_CHANGE).
                           853     ;                
                           854     ;Arguments:             None.
                           855     ;Return Values:         none.
                           856     ;Shared Variables:      magnitude (READ)
                           857     ;                   sign (READ)
                           858     ;Local Variables:       AX - next speed
                           859     ;Global Variables:      None.                   
                           860     ;Input:                 None.
                           861     ;Output:                None.
                           862     ;Registers Used:        AX, BX
                           863     ;Stack Depth:           2 words
                           864     ;Known Bugs:            None.
                           865     ;Data Structures:       None.
                           866     ;Error Handling:        If change in speed results in exceeding 16-bits (carry flag)
                           867     ;                   then set next speed to MAX_ABS_SPEED and MIN_ABS_SPEED 
                           868     ;                   respectively. Also if next speed happens to be NO_SPEED_CHANGE, 
                           869     ;                   then also set next speed as MAX_ABS_SPEED.
                           870     ;Algorithms:            next speed = current speed +- magnitude
                           871     ;Limitations:           None.
                           872     ;Author:                        Anjian Wu
                           873     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                           874     ;                   12-04-2013: Initial assembly - Anjian Wu
                           875     ;                   12-08-2013: Documentation - Anjian Wu
                           876     ;------------------------------------------------------------------------------
00C2                       877     SetRelSpeed     PROC    NEAR
                           878     
00C2 50                    879         PUSH    AX                      ; Save Used Regs
00C3 53                    880         PUSH    BX
                           881     
00C4                       882     SetRelSpeedInit:
00C4 E80000         E      883         CALL    GetMotorSpeed           ; Current Speed now in AX
00C7 803E040001     R      884         CMP     sign, POS               ; Is this positive speed change?
00CC 740C                  885         JE      SetRelSpeedPos          ; Yes
                           886         ;JNE    SetRelSpeedNeg          ; No
                           887         
00CE                       888     SetRelSpeedNeg:
00CE 2B060200       R      889         SUB     AX, magnitude           ; next speed = current speed - magnitude
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   16


LOC  OBJ                  LINE     SOURCE

00D2 7314                  890         JNC     SetRelSpeedWrite        ; Speed is valid?
                           891         ;JC      SetRelWentNeg          ; Speed went 'negative' and not valid
00D4                       892     SetRelWentNeg:
00D4 B80000                893         MOV     AX, MIN_ABS_SPEED       ; Just make the robot at lowest speed
00D7 EB0F90                894         JMP     SetRelSpeedWrite        ;
                           895         
00DA                       896     SetRelSpeedPos:
00DA 03060200       R      897         ADD     AX, magnitude           ; next speed = current speed + magnitude
00DE 7205                  898         JC      SetRelWentOver          ; Is speed is within 16-bits? 
00E0 3DFFFF                899             CMP             AX, NO_SPEED_CHANGE             ; Is speed at reserved NO_SPE
                                   ED_CHANGE val?
00E3 7503                  900             JNE             SetRelSpeedWrite                ; Speed is valid
                           901         ;JE      SetRelWentOver         ; Speed is valid 16-bit num, but went 
                           902                                                                             ; to the val 
                                   of NO_SPEED_CHANGE, which is 
                           903                                                                             ; reserved
                           904         
00E5                       905     SetRelWentOver:                    
00E5 B8FEFF                906         MOV     AX, MAX_ABS_SPEED       ; Just make the robot at max speed
                           907         ;JMP     SetRelSpeedWrite        
                           908         
00E8                       909     SetRelSpeedWrite:                   ; Speed is valid, so store it
00E8 BB0080                910         MOV     BX, NO_ANGLE_CHANGE     ; Just speed change, not angle
00EB E80000         E      911         CALL    SetMotorSpeed           ; Set new speed
                           912         
00EE 5B                    913         POP     BX
00EF 58                    914         POP     AX                      ; Restore used regs
                           915         
00F0 C3                    916         RET
                           917         
                           918     SetRelSpeed ENDP
                           919     
                           920     ;Procedure:                     SetDir
                           921     ;
                           922     ;
                           923     ;Description:           Sets the signed angle direction of the robot without changing
                                    speed.
                           924     ;                   Since magnitude is now in degrees, this function transforms
                           925     ;                   the magnitude into it's equivalent degrees in [-360,+360].
                           926     ;                   This approach violates the HW8tests, but passes equivalent
                           927     ;                   angle vals.
                           928     ;
                           929     ;Operation:         * DeltaAngle = MOD((sign*magnitude), FULL_ANGLE)
                           930     ;                   * NewAngle = GetMotorSpeed + DeltaAngle
                           931     ;                   * SetMotorSpeed(NO_SPEED_CHANGE, NewAngle)
                           932     ;                
                           933     ;Arguments:             None.
                           934     ;Return Values:         none.
                           935     ;Shared Variables:      magnitude (READ)
                           936     ;                   sign (READ)
                           937     ;Local Variables:       AX  - delta angle
                           938     ;                   BX  - NO_SPEED_CHANGE
                           939     ;                   DX  - current angle
                           940     ;Global Variables:      None.                   
                           941     ;Input:                 None.
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   17


LOC  OBJ                  LINE     SOURCE

                           942     ;Output:                None.
                           943     ;Registers Used:        AX, BX, DX
                           944     ;Stack Depth:           3 words
                           945     ;Known Bugs:            None.
                           946     ;Data Structures:       None.
                           947     ;Error Handling:        None
                           948     ;Algorithms:            DeltaAngle = MOD((sign*magnitude), FULL_ANGLE)
                           949     ;Limitations:           None.
                           950     ;Author:                        Anjian Wu
                           951     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                           952     ;                   12-04-2013: Initial assembly - Anjian Wu
                           953     ;                   12-08-2013: Documentation - Anjian Wu
                           954     ;------------------------------------------------------------------------------
00F1                       955     SetDir      PROC    NEAR
                           956     
00F1 50                    957         PUSH    AX                      ; Save Used Regs
00F2 53                    958         PUSH    BX
00F3 52                    959         PUSH    DX
                           960      
                           961 +1          
00F4 8B1E0200       R      962 +2          MOV             BX,  magnitude                  ; Grab the magnitude (unsigne
                                   d 15-bit)
00F8 A00400         R      963 +2      MOV     AL, sign                ; Grab the sign 
00FB 98                    964 +1      CBW                             ; Sign is actually a DB, so convert to DW equiv
                           965 +1      
00FC F7EB                  966 +1      IMUL    BX                      ; Convert 15-bit unsigned to 16-bit signed ANGLE
                           967 +1                                      ; in AX
                           968 +1  
00FE BB6801                969 +1      MOV     BX, FULL_ANGLE          ; 
0101 99                    970 +1      CWD                             ; Prepare for signed DIV
0102 F7FB                  971 +1      IDIV    BX                          ; Take the MOD to Full angle -> DX
                           972 +1   ; Calc signed angle value
                           973         
                           974         ; EQuivalent Angle now in DX with value in range [-360,360]
                           975         
                           976         ; We grab a small magnitude equivalent angle because now we can ADD the signed
                           977         ; angles safely without worrying about truncation.
                           978         
0104 E80000         E      979         CALL    GetMotorDirection       ; Grab current angle [-360,360] in AX
                           980         
0107 03C2                  981         ADD     AX, DX                  ; Combine to get overall new angle (fits in signe
                                   d 16-bit for sure)
                           982                                         ; [-360*2,+360*2]
                           983       
0109                       984      SetDirSend:
0109 BBFFFF                985         MOV     BX, NO_SPEED_CHANGE     ; We just want angle changed, not speed
                           986         
010C 93                    987         XCHG    AX, BX                  ; Actually want args passed swapped
                           988     
010D E80000         E      989         CALL    SetMotorSpeed           ; Change Angle only
                           990         
0110 5A                    991         POP     DX
0111 5B                    992         POP     BX
0112 58                    993         POP     AX                      ; Restore used regs
                           994     
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   18


LOC  OBJ                  LINE     SOURCE

0113 C3                    995         RET
                           996         
                           997     SetDir  ENDP
                           998     
                           999     ;Procedure:                     RotAbsTurrAng
                          1000     ;
                          1001     ;Description:           Sets the signed angle of the robot turret.
                          1002     ;                   Since magnitude is now in degrees, this function transforms
                          1003     ;                   the magnitude into it's equivalent degrees in [-360,+360].
                          1004     ;                   This approach violates the HW8tests, but passes equivalent
                          1005     ;                   angle vals.
                          1006     ;
                          1007     ;Operation:         * NewAngle = MOD((sign*magnitude), FULL_ANGLE)
                          1008     ;                   * SetTurretAngle(NewAngle)
                          1009     ;                
                          1010     ;Arguments:             None.
                          1011     ;Return Values:         none.
                          1012     ;Shared Variables:      magnitude (READ)
                          1013     ;                   sign (READ)
                          1014     ;Local Variables:       AX  - NewAngle angle
                          1015     ;                   DX  - NewAngle angle
                          1016     ;Global Variables:      None.                   
                          1017     ;Input:                 None.
                          1018     ;Output:                None.
                          1019     ;Registers Used:        AX, DX
                          1020     ;Stack Depth:           3 words
                          1021     ;Known Bugs:            None.
                          1022     ;Data Structures:       None.
                          1023     ;Error Handling:        None
                          1024     ;Algorithms:            NewAngle = MOD((sign*magnitude), FULL_ANGLE)
                          1025     ;Limitations:           None.
                          1026     ;Author:                        Anjian Wu
                          1027     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1028     ;                   12-04-2013: Initial assembly - Anjian Wu
                          1029     ;                   12-08-2013: Documentation - Anjian Wu
                          1030     ;------------------------------------------------------------------------------
0114                      1031     RotAbsTurrAng       PROC    NEAR
                          1032         
0114 50                   1033         PUSH    AX                      ; Save Used Regs
0115 53                   1034         PUSH    BX
0116 52                   1035         PUSH    DX
                          1036         
                          1037 +1          
0117 8B1E0200       R     1038 +2          MOV             BX,  magnitude                  ; Grab the magnitude (unsigne
                                   d 15-bit)
011B A00400         R     1039 +2      MOV     AL, sign                ; Grab the sign 
011E 98                   1040 +1      CBW                             ; Sign is actually a DB, so convert to DW equiv
                          1041 +1      
011F F7EB                 1042 +1      IMUL    BX                      ; Convert 15-bit unsigned to 16-bit signed ANGLE
                          1043 +1                                      ; in AX
                          1044 +1  
0121 BB6801               1045 +1      MOV     BX, FULL_ANGLE          ; 
0124 99                   1046 +1      CWD                             ; Prepare for signed DIV
0125 F7FB                 1047 +1      IDIV    BX                          ; Take the MOD to Full angle -> DX
                          1048 +1   ; Calc signed angle value
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   19


LOC  OBJ                  LINE     SOURCE

                          1049         
                          1050         ; EQuivalent Angle now in DX with value in range [0,360]
                          1051         ;
                          1052         ; We grab a small magnitude equivalent angle because now we can ADD the signed
                          1053         ; angles safely without worrying about truncation.
                          1054         ; Also we know it is positive since this function is for ABS angle and 
                          1055         ; magnitude = 15-bit, so just reused SignAngleMod_DX.
                          1056         
0127 8BC2                 1057         MOV     AX, DX                  ;  Prepare to pass angle
                          1058                     
0129 E80000         E     1059         CALL    SetTurretAngle       ;  Pass angle in AX [0 to 360]
                          1060     
012C 5A                   1061         POP     DX
012D 5B                   1062         POP     BX
012E 58                   1063         POP     AX                      ; Restore used regs
                          1064         
012F C3                   1065         RET                             ;
                          1066         
                          1067         
                          1068     RotAbsTurrAng   ENDP
                          1069     
                          1070     ;Procedure:                     RotRelTurrAng
                          1071     ;
                          1072     ;Description:           Sets the relative change signed angle of the robot turret.
                          1073     ;                   Since magnitude is now in degrees, this function transforms
                          1074     ;                   the magnitude into it's equivalent degrees in [-360,+360].
                          1075     ;                   This approach violates the HW8tests, but passes equivalent
                          1076     ;                   angle vals.
                          1077     ;
                          1078     ;Operation:         * Deltangle = MOD((sign*magnitude), FULL_ANGLE)
                          1079     ;                   * SetRelTurretAngle(Deltangle)
                          1080     ;                
                          1081     ;Arguments:             None.
                          1082     ;Return Values:         none.
                          1083     ;Shared Variables:      magnitude (READ)
                          1084     ;                   sign (READ)
                          1085     ;Local Variables:       AX  - delta angle
                          1086     ;                   DX  - current angle
                          1087     ;Global Variables:      None.                   
                          1088     ;Input:                 None.
                          1089     ;Output:                None.
                          1090     ;Registers Used:        AX, DX
                          1091     ;Stack Depth:           3 words
                          1092     ;Known Bugs:            None.
                          1093     ;Data Structures:       None.
                          1094     ;Error Handling:        None
                          1095     ;Algorithms:            Deltangle = MOD((sign*magnitude), FULL_ANGLE)
                          1096     ;Limitations:           None.
                          1097     ;Author:                        Anjian Wu
                          1098     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1099     ;                   12-04-2013: Initial assembly - Anjian Wu
                          1100     ;                   12-08-2013: Documentation - Anjian Wu
                          1101     ;------------------------------------------------------------------------------
0130                      1102     RotRelTurrAng   PROC    NEAR
0130 50                   1103         PUSH    AX                      ; Save Used Regs
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   20


LOC  OBJ                  LINE     SOURCE

0131 53                   1104         PUSH    BX
0132 52                   1105         PUSH    DX
                          1106         
                          1107 +1          
0133 8B1E0200       R     1108 +2          MOV             BX,  magnitude                  ; Grab the magnitude (unsigne
                                   d 15-bit)
0137 A00400         R     1109 +2      MOV     AL, sign                ; Grab the sign 
013A 98                   1110 +1      CBW                             ; Sign is actually a DB, so convert to DW equiv
                          1111 +1      
013B F7EB                 1112 +1      IMUL    BX                      ; Convert 15-bit unsigned to 16-bit signed ANGLE
                          1113 +1                                      ; in AX
                          1114 +1  
013D BB6801               1115 +1      MOV     BX, FULL_ANGLE          ; 
0140 99                   1116 +1      CWD                             ; Prepare for signed DIV
0141 F7FB                 1117 +1      IDIV    BX                          ; Take the MOD to Full angle -> DX
                          1118 +1   ; Calc signed angle value
                          1119         
0143 8BC2                 1120         MOV     AX, DX                  ; Prepare to pass angle ARG
0145 E80000         E     1121         CALL    SetRelTurretAngle       ; Pass the SIGNED relative angle [ -360,+ 360]
                          1122     
0148 5A                   1123         POP     DX
0149 5B                   1124         POP     BX
014A 58                   1125         POP     AX                      ; Restore used regs
                          1126         
014B C3                   1127         RET
                          1128         
                          1129     RotRelTurrAng   ENDP
                          1130     
                          1131     ;Procedure:                     SetTurrEleAng
                          1132     ;
                          1133     ;Description:           Sets the signed angle elevation of the robot turret.
                          1134     ;                   Since magnitude is now in degrees, this function transforms
                          1135     ;                   the magnitude into it's equivalent degrees in [-360,+360].
                          1136     ;                   This approach violates the HW8tests, but passes equivalent
                          1137     ;                   angle vals.
                          1138     ;   
                          1139     ;                   Also ensures that the NewAngle is within [MIN_ELEVATION,MAX_ELEVA
                                   TION]
                          1140     ;
                          1141     ;Operation:         * NewAngle = MOD((sign*magnitude), FULL_ANGLE)
                          1142     ;                   * IF NewAngle is > MAX_ELEVATION or < MIN_ELEVATION
                          1143     ;                       then NewAngle = MAX_ELEVATION, MIN_ELEVATION respectively
                          1144     ;                   * SetTurretAngle(NewAngle)
                          1145     ;                
                          1146     ;Arguments:             None.
                          1147     ;Return Values:         none.
                          1148     ;Shared Variables:      magnitude (READ)
                          1149     ;                   sign (READ)
                          1150     ;Local Variables:       AX  - delta angle
                          1151     ;                   DX  - current angle
                          1152     ;Global Variables:      None.                   
                          1153     ;Input:                 None.
                          1154     ;Output:                None.
                          1155     ;Registers Used:        AX, DX
                          1156     ;Stack Depth:           3 words
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   21


LOC  OBJ                  LINE     SOURCE

                          1157     ;Known Bugs:            None.
                          1158     ;Data Structures:       None.
                          1159     ;Error Handling:        IF NewAngle is > MAX_ELEVATION or < MIN_ELEVATION
                          1160     ;                   then NewAngle = MAX_ELEVATION, MIN_ELEVATION respectively
                          1161     ;
                          1162     ;Algorithms:            Deltangle = MOD((sign*magnitude), FULL_ANGLE)
                          1163     ;Limitations:           None.
                          1164     ;Author:                        Anjian Wu
                          1165     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1166     ;                   12-04-2013: Initial assembly - Anjian Wu
                          1167     ;                   12-08-2013: Documentation - Anjian Wu
                          1168     ;------------------------------------------------------------------------------
014C                      1169     SetTurrEleAng       PROC    NEAR
014C 50                   1170         PUSH    AX                          ; Save Used Regs
014D 53                   1171         PUSH    BX
014E 52                   1172         PUSH    DX
                          1173         
                          1174 +1          
014F 8B1E0200       R     1175 +2          MOV             BX,  magnitude                  ; Grab the magnitude (unsigne
                                   d 15-bit)
0153 A00400         R     1176 +2      MOV     AL, sign                ; Grab the sign 
0156 98                   1177 +1      CBW                             ; Sign is actually a DB, so convert to DW equiv
                          1178 +1      
0157 F7EB                 1179 +1      IMUL    BX                      ; Convert 15-bit unsigned to 16-bit signed ANGLE
                          1180 +1                                      ; in AX
                          1181 +1  
0159 BB6801               1182 +1      MOV     BX, FULL_ANGLE          ; 
015C 99                   1183 +1      CWD                             ; Prepare for signed DIV
015D F7FB                 1184 +1      IDIV    BX                          ; Take the MOD to Full angle -> DX
                          1185 +1     ; Calc signed angle value
                          1186         
015F 83FA3C               1187         CMP     DX, MAX_ELEVATION           ; Is the angle too big?
0162 7F12                 1188         JG      SetTurrEleAngMAX            ; Yes          
0164 83FAC4               1189         CMP     DX, MIN_ELEVATION           ; Is the angle too small?
0167 7C08                 1190         JL      SetTurrEleAngMIN            ; Yes
                          1191         ;JMP    SetTurrEleAngSET            ; It is neither too small or too big
                          1192         
0169                      1193     SetTurrEleAngSET:
0169 8BC2                 1194         MOV     AX, DX                      ; Prepare to set angle
016B E80000         E     1195         CALL    SetTurretElevation          ; Pass signed angle
016E EB0B90               1196         JMP     SetTurrEleAngDONE           ; Done
                          1197         
0171                      1198     SetTurrEleAngMIN:
0171 BA3C00               1199         MOV     DX, MAX_ELEVATION           ; Too big -> just set at MAX_ELEVATION
0174 EBF3                 1200         JMP     SetTurrEleAngSET            ; Set it
0176                      1201     SetTurrEleAngMAX:
0176 BAC4FF               1202         MOV     DX, MIN_ELEVATION           ; Too small -> just set at MIN_ELEVATION
0179 EBEE                 1203         JMP     SetTurrEleAngSET            ;
                          1204         
017B                      1205     SetTurrEleAngDONE:
                          1206         
017B 5A                   1207         POP     DX
017C 5B                   1208         POP     BX
017D 58                   1209         POP     AX                          ; Restore used regs
                          1210        
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   22


LOC  OBJ                  LINE     SOURCE

017E C3                   1211         RET
                          1212     SetTurrEleAng   ENDP
                          1213     
                          1214     ;Procedure:                     LaserON
                          1215     ;
                          1216     ;Description:           Turns the laser ON
                          1217     ;
                          1218     ;Operation:         * SetLaser(TRUE)
                          1219     ;                
                          1220     ;Arguments:         None.
                          1221     ;Return Values:         None.
                          1222     ;Shared Variables:      None.
                          1223     ;Local Variables:       None.
                          1224     ;Global Variables:      None.                   
                          1225     ;Input:                 None.
                          1226     ;Output:                None.
                          1227     ;Registers Used:        None.
                          1228     ;Stack Depth:           none.
                          1229     ;Known Bugs:            None.
                          1230     ;Data Structures:       None.
                          1231     ;Error Handling:        None.
                          1232     ;Algorithms:            None.
                          1233     ;Limitations:           None.
                          1234     ;Author:                        Anjian Wu
                          1235     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1236     ;                   12-04-2013: Initial assembly - Anjian Wu
                          1237     ;                   12-08-2013: Documentation - Anjian Wu
                          1238     ;------------------------------------------------------------------------------
017F                      1239     LaserON    PROC    NEAR
                          1240     
017F 50                   1241             PUSH    AX
0180 53                   1242             PUSH    BX
                          1243             
0181                      1244     LaserControlON:
0181 B80100               1245             MOV             AX, TRUE                ;
                          1246     
0184                      1247     LaserOnDONE:    
0184 E80000         E     1248         CALL    SetLaser        ; So just pass in AX
                          1249             
0187 5B                   1250             POP             BX
0188 58                   1251             POP             AX
                          1252             
0189 C3                   1253         RET                     ;
                          1254     
                          1255     LaserON    ENDP
                          1256     
                          1257     ;Procedure:                     LaserOFF
                          1258     ;
                          1259     ;Description:           Turns the laser OFF
                          1260     ;
                          1261     ;Operation:         * SetLaser(FALSE)  
                          1262     ;Arguments:         None.
                          1263     ;Return Values:         None.
                          1264     ;Shared Variables:      None.
                          1265     ;Local Variables:       None.
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   23


LOC  OBJ                  LINE     SOURCE

                          1266     ;Global Variables:      None.                   
                          1267     ;Input:                 None.
                          1268     ;Output:                None.
                          1269     ;Registers Used:        None.
                          1270     ;Stack Depth:           none.
                          1271     ;Known Bugs:            None.
                          1272     ;Data Structures:       None.
                          1273     ;Error Handling:        None.
                          1274     ;Algorithms:            None.
                          1275     ;Limitations:           None.
                          1276     ;Author:                        Anjian Wu
                          1277     ;History:                       12-02-2013: Pseudo code - Anjian Wu
                          1278     ;                   12-04-2013: Initial assembly - Anjian Wu
                          1279     ;                   12-08-2013: Documentation - Anjian Wu
                          1280     ;------------------------------------------------------------------------------
018A                      1281     LaserOFF    PROC    NEAR
                          1282     
018A 50                   1283             PUSH    AX
018B 53                   1284             PUSH    BX
                          1285             
018C                      1286     LaserControlOff:
018C B80000               1287             MOV             AX, FALSE               ;
                          1288     
018F                      1289     LaserOffDONE:   
018F E80000         E     1290         CALL    SetLaser        ; So just pass in AX
                          1291             
0192 5B                   1292             POP             BX
0193 58                   1293             POP             AX
                          1294             
0194 C3                   1295         RET                     ;
                          1296     
                          1297     LaserOFF    ENDP
                          1298     
                          1299     ; RobotFSMTable
                          1300     ;
                          1301     ; Description:      This is the state transition table for the robot side.
                          1302     ;                   Each entry consists of the next state and actions for that
                          1303     ;                   transition.  The rows are associated with the current
                          1304     ;                   state and the columns with the input type.
                          1305     ;
                          1306     ; Author:           Anjian Wu
                          1307     ; Last Modified:    12-02-2013:
                          1308     ;                   12-05-2013: Fixed Laser state - Anjian Wu
                          1309     
                          1310     
----                      1311     TRANSITION_ENTRY        STRUC           ;structure used to define table
0000                      1312         NEXTSTATE   DB      ?               ;the next state for the transition
0001                      1313         ACTION      DW      ?               ;action for the transition
----                      1314     TRANSITION_ENTRY      ENDS
                          1315     
                          1316     
                          1317     ;define a macro to make table a little more readable
                          1318     ;macro just does an offset of the action routine entries to build the STRUC
                          1319     
                          1320     
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   24


LOC  OBJ                  LINE     SOURCE

                          1321     
0195                      1322     RobotFSMTable   LABEL   TRANSITION_ENTRY
                          1323     
                          1324             ;Current State = ST_INITIAL: Waiting for command    
                          1325                                                 ;Input Token Type
                          1326 +1          
0195 01             R     1327 +2      TRANSITION_ENTRY< ST_SAS_INIT, OFFSET( no_op) >
0196 B300
                          1328 +1              ;TOKEN_S - Set Speed
                          1329 +1          
0198 04             R     1330 +2      TRANSITION_ENTRY< ST_SRS_INIT, OFFSET( no_op) >
0199 B300
                          1331 +1       ;TOKEN_V - Set Rel Speed
                          1332 +1          
019B 07             R     1333 +2      TRANSITION_ENTRY< ST_DIR_INIT, OFFSET( no_op) >
019C B300
                          1334 +1              ;TOKEN_D - Set Dir
                          1335 +1          
019E 0A             R     1336 +2      TRANSITION_ENTRY< ST_RTR_INIT, OFFSET( no_op) >
019F B300
                          1337 +1              ;TOKEN_T - Rot Turr Angl
                          1338 +1          
01A1 0E             R     1339 +2      TRANSITION_ENTRY< ST_STEA_INIT, OFFSET( no_op) >
01A2 B300
                          1340 +1          ;TOKEN_E - Set Turr Ele
                          1341 +1          
01A4 11             R     1342 +2      TRANSITION_ENTRY< ST_LAZON, OFFSET( no_op) >
01A5 B300
                          1343 +1              ;TOKEN_F - Laser On
                          1344 +1          
01A7 12             R     1345 +2      TRANSITION_ENTRY< ST_LAZOFF, OFFSET( no_op) >
01A8 B300
                          1346 +1         ;TOKEN_O - Laser Off
                          1347 +1          
01AA 00             R     1348 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01AB AC00
                          1349 +1          ;TOKEN_NUM - A digit
                          1350 +1          
01AD 00             R     1351 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01AE AC00
                          1352 +1          ;TOKEN_POS - '+'
                          1353 +1          
01B0 00             R     1354 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01B1 AC00
                          1355 +1          ;TOKEN_NEG - '-'
                          1356 +1          
01B3 00             R     1357 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( no_op) >
01B4 B300
                          1358 +1                  ;TOKEN_IGNORE
                          1359 +1          
01B6 00             R     1360 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( no_op) >
01B7 B300
                          1361 +1                  ;TOKEN_END - Return
                          1362 +1          
01B9 00             R     1363 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   25


LOC  OBJ                  LINE     SOURCE

01BA AC00
                          1364 +1          ;TOKEN_OTHER    
                          1365             
                          1366     ;-----------------------------Setting Absolute Speed---------------------------------
                                   -  
                          1367             ;Current State = ST_SAS_INIT: Waiting for digit to srat      
                          1368                                                 ;Input Token Type
                          1369 +1          
01BC 00             R     1370 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01BD AC00
                          1371 +1          ;TOKEN_S 
                          1372 +1          
01BF 00             R     1373 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01C0 AC00
                          1374 +1     ;TOKEN_V
                          1375 +1          
01C2 00             R     1376 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01C3 AC00
                          1377 +1          ;TOKEN_D 
                          1378 +1          
01C5 00             R     1379 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01C6 AC00
                          1380 +1          ;TOKEN_T 
                          1381 +1          
01C8 00             R     1382 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01C9 AC00
                          1383 +1          ;TOKEN_E 
                          1384 +1          
01CB 00             R     1385 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01CC AC00
                          1386 +1          ;TOKEN_F
                          1387 +1          
01CE 00             R     1388 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01CF AC00
                          1389 +1     ;TOKEN_O
                          1390             
                          1391 +1          
01D1 03             R     1392 +2      TRANSITION_ENTRY< ST_SAS, OFFSET( Concat_Num) >
01D2 7800
                          1393 +1       ;TOKEN_NUM - A digit - thus concatenate it
                          1394             
                          1395 +1          
01D4 02             R     1396 +2      TRANSITION_ENTRY< ST_SAS_SIGN, OFFSET( no_op) >
01D5 B300
                          1397 +1                  ;TOKEN_POS - '+' Accepted, but effectively ignored
                          1398 +1          
01D7 00             R     1399 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01D8 AC00
                          1400 +1     ;TOKEN_NEG - '-'
                          1401 +1          
01DA 01             R     1402 +2      TRANSITION_ENTRY< ST_SAS_INIT, OFFSET( no_op) >
01DB B300
                          1403 +1              ;TOKEN_IGNORE - Keep Waiting for start of digit
                          1404 +1          
01DD 00             R     1405 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   26


LOC  OBJ                  LINE     SOURCE

01DE AC00
                          1406 +1          ;TOKEN_END - Return
                          1407 +1          
01E0 00             R     1408 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01E1 AC00
                          1409 +1          ;TOKEN_OTHER    
                          1410             
                          1411             ;Current State = ST_SAS_SIGN: Waiting for digit to srat      
                          1412                                                 ;Input Token Type
                          1413 +1          
01E3 00             R     1414 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01E4 AC00
                          1415 +1          ;TOKEN_S 
                          1416 +1          
01E6 00             R     1417 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01E7 AC00
                          1418 +1     ;TOKEN_V
                          1419 +1          
01E9 00             R     1420 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01EA AC00
                          1421 +1          ;TOKEN_D 
                          1422 +1          
01EC 00             R     1423 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01ED AC00
                          1424 +1          ;TOKEN_T 
                          1425 +1          
01EF 00             R     1426 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01F0 AC00
                          1427 +1          ;TOKEN_E 
                          1428 +1          
01F2 00             R     1429 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01F3 AC00
                          1430 +1          ;TOKEN_F
                          1431 +1          
01F5 00             R     1432 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01F6 AC00
                          1433 +1     ;TOKEN_O
                          1434             
                          1435 +1          
01F8 03             R     1436 +2      TRANSITION_ENTRY< ST_SAS, OFFSET( Concat_Num) >
01F9 7800
                          1437 +1       ;TOKEN_NUM - A digit - thus concatenate it
                          1438             
                          1439 +1          
01FB 00             R     1440 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01FC AC00
                          1441 +1          ;TOKEN_POS - '+' Accepted, but effectively ignored
                          1442 +1          
01FE 00             R     1443 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
01FF AC00
                          1444 +1     ;TOKEN_NEG - '-'
                          1445 +1          
0201 02             R     1446 +2      TRANSITION_ENTRY< ST_SAS_SIGN, OFFSET( no_op) >
0202 B300
                          1447 +1              ;TOKEN_IGNORE - Keep Waiting for start of digit
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   27


LOC  OBJ                  LINE     SOURCE

                          1448 +1          
0204 00             R     1449 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0205 AC00
                          1450 +1     ;TOKEN_END - Return
                          1451 +1          
0207 00             R     1452 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0208 AC00
                          1453 +1          ;TOKEN_OTHER    
                          1454     
                          1455             ;Current State = ST_SAS: Keep grabbing digit until return   
                          1456                                                 ;Input Token Type
                          1457 +1          
020A 00             R     1458 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
020B AC00
                          1459 +1          ;TOKEN_S - Set Speed
                          1460 +1          
020D 00             R     1461 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
020E AC00
                          1462 +1     ;TOKEN_V - Set Rel Speed
                          1463 +1          
0210 00             R     1464 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0211 AC00
                          1465 +1          ;TOKEN_D - Set Dir
                          1466 +1          
0213 00             R     1467 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0214 AC00
                          1468 +1          ;TOKEN_T - Rot Turr Angl
                          1469 +1          
0216 00             R     1470 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0217 AC00
                          1471 +1          ;TOKEN_E - Set Turr Ele
                          1472 +1          
0219 00             R     1473 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
021A AC00
                          1474 +1          ;TOKEN_F - Laser On
                          1475 +1          
021C 00             R     1476 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
021D AC00
                          1477 +1     ;TOKEN_O - Laser Off
                          1478             
                          1479 +1          
021F 03             R     1480 +2      TRANSITION_ENTRY< ST_SAS, OFFSET( Concat_Num) >
0220 7800
                          1481 +1       ;TOKEN_NUM - A digit - thus concatenate it
                          1482             
                          1483 +1          
0222 00             R     1484 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0223 AC00
                          1485 +1          ;TOKEN_POS - '+'
                          1486 +1          
0225 00             R     1487 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0226 AC00
                          1488 +1          ;TOKEN_NEG - '-'
                          1489 +1          
0228 03             R     1490 +2      TRANSITION_ENTRY< ST_SAS, OFFSET( no_op) >
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   28


LOC  OBJ                  LINE     SOURCE

0229 B300
                          1491 +1                  ;TOKEN_IGNORE - Keep Waiting for start of digit
                          1492 +1          
022B 00             R     1493 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetSpeed) >
022C B400
                          1494 +1          ;TOKEN_END - Return
                          1495 +1          
022E 00             R     1496 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
022F AC00
                          1497 +1          ;TOKEN_OTHER
                          1498             
                          1499     ;-----------------------------Setting Relative Speed---------------------------------
                                   -  
                          1500     
                          1501             ;Current State = ST_SRS_INIT: Waiting for DIGIT or Sign           
                          1502                                                 ;Input Token Type
                          1503 +1          
0231 00             R     1504 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0232 AC00
                          1505 +1          ;TOKEN_S 
                          1506 +1          
0234 00             R     1507 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0235 AC00
                          1508 +1     ;TOKEN_V 
                          1509 +1          
0237 00             R     1510 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0238 AC00
                          1511 +1          ;TOKEN_D 
                          1512 +1          
023A 00             R     1513 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
023B AC00
                          1514 +1          ;TOKEN_T
                          1515 +1          
023D 00             R     1516 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
023E AC00
                          1517 +1          ;TOKEN_E
                          1518 +1          
0240 00             R     1519 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0241 AC00
                          1520 +1          ;TOKEN_F
                          1521 +1          
0243 00             R     1522 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0244 AC00
                          1523 +1     ;TOKEN_O
                          1524             
                          1525 +1          
0246 06             R     1526 +2      TRANSITION_ENTRY< ST_SRS, OFFSET( Concat_Num) >
0247 7800
                          1527 +1       ;TOKEN_NUM: A digit - thus concatenate it
                          1528             
                          1529 +1          
0249 05             R     1530 +2      TRANSITION_ENTRY< ST_SRS_SIGN, OFFSET( SetSign) >
024A A800
                          1531 +1     ;TOKEN_POS - '+' Wait for sign
                          1532 +1          
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   29


LOC  OBJ                  LINE     SOURCE

024C 05             R     1533 +2      TRANSITION_ENTRY< ST_SRS_SIGN, OFFSET( SetSign) >
024D A800
                          1534 +1     ;TOKEN_NEG - '-' Wait for sign
                          1535 +1          
024F 04             R     1536 +2      TRANSITION_ENTRY< ST_SRS_INIT, OFFSET( no_op) >
0250 B300
                          1537 +1              ;TOKEN_IGNORE 
                          1538 +1          
0252 00             R     1539 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0253 AC00
                          1540 +1          ;TOKEN_END
                          1541 +1          
0255 00             R     1542 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0256 AC00
                          1543 +1          ;TOKEN_OTHER    
                          1544     
                          1545             ;Current State = ST_SRS_SIGN: Waiting for DIGIT or Sign           
                          1546                                                 ;Input Token Type
                          1547 +1          
0258 00             R     1548 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0259 AC00
                          1549 +1          ;TOKEN_S 
                          1550 +1          
025B 00             R     1551 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
025C AC00
                          1552 +1     ;TOKEN_V 
                          1553 +1          
025E 00             R     1554 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
025F AC00
                          1555 +1          ;TOKEN_D 
                          1556 +1          
0261 00             R     1557 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0262 AC00
                          1558 +1          ;TOKEN_T
                          1559 +1          
0264 00             R     1560 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0265 AC00
                          1561 +1          ;TOKEN_E
                          1562 +1          
0267 00             R     1563 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0268 AC00
                          1564 +1          ;TOKEN_F
                          1565 +1          
026A 00             R     1566 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
026B AC00
                          1567 +1      ;TOKEN_O
                          1568             
                          1569 +1          
026D 06             R     1570 +2      TRANSITION_ENTRY< ST_SRS, OFFSET( Concat_Num) >
026E 7800
                          1571 +1       ;TOKEN_NUM: A digit - thus concatenate it
                          1572             
                          1573 +1          
0270 00             R     1574 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0271 AC00
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   30


LOC  OBJ                  LINE     SOURCE

                          1575 +1     ;TOKEN_POS - '+' Wait for sign
                          1576 +1          
0273 00             R     1577 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0274 AC00
                          1578 +1     ;TOKEN_NEG - '-' Wait for sign
                          1579 +1          
0276 05             R     1580 +2      TRANSITION_ENTRY< ST_SRS_SIGN, OFFSET( no_op) >
0277 B300
                          1581 +1              ;TOKEN_IGNORE 
                          1582 +1          
0279 00             R     1583 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
027A AC00
                          1584 +1     ;TOKEN_END
                          1585 +1          
027C 00             R     1586 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
027D AC00
                          1587 +1          ;TOKEN_OTHER    
                          1588                     ;Current State = ST_SRS : Digit started, thus keep grabbing until ret
                                   urn       
                          1589                                                 ;Input Token Type
                          1590 +1          
027F 00             R     1591 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0280 AC00
                          1592 +1          ;TOKEN_S - Set Speed
                          1593 +1          
0282 00             R     1594 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0283 AC00
                          1595 +1     ;TOKEN_V - Set Rel Speed
                          1596 +1          
0285 00             R     1597 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0286 AC00
                          1598 +1          ;TOKEN_D - Set Dir
                          1599 +1          
0288 00             R     1600 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0289 AC00
                          1601 +1          ;TOKEN_T - Rot Turr Angl
                          1602 +1          
028B 00             R     1603 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
028C AC00
                          1604 +1          ;TOKEN_E - Set Turr Ele
                          1605 +1          
028E 00             R     1606 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
028F AC00
                          1607 +1          ;TOKEN_F - Laser On
                          1608 +1          
0291 00             R     1609 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0292 AC00
                          1610 +1      ;TOKEN_O - Laser Off
                          1611             
                          1612 +1          
0294 06             R     1613 +2      TRANSITION_ENTRY< ST_SRS, OFFSET( Concat_Num) >
0295 7800
                          1614 +1       ;TOKEN_NUM - A digit - thus concatenate it
                          1615             
                          1616 +1          
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   31


LOC  OBJ                  LINE     SOURCE

0297 00             R     1617 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0298 AC00
                          1618 +1          ;TOKEN_POS - '+'
                          1619 +1          
029A 00             R     1620 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
029B AC00
                          1621 +1          ;TOKEN_NEG - '-'
                          1622 +1          
029D 06             R     1623 +2      TRANSITION_ENTRY< ST_SRS, OFFSET( no_op) >
029E B300
                          1624 +1                  ;TOKEN_IGNORE - Keep Waiting for start of digit
                          1625 +1          
02A0 00             R     1626 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetRelSpeed) >
02A1 C200
                          1627 +1  ;TOKEN_END - Return
                          1628 +1          
02A3 00             R     1629 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02A4 AC00
                          1630 +1          ;TOKEN_OTHER
                          1631     
                          1632     
                          1633     ;-----------------------------Setting Direction Speed--------------------------------
                                   -- 
                          1634     
                          1635             ;Current State = ST_DIR_INIT: Waiting for DIGIT or Sign           
                          1636                                                     ;Input Token Type
                          1637 +1          
02A6 00             R     1638 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02A7 AC00
                          1639 +1              ;TOKEN_S 
                          1640 +1          
02A9 00             R     1641 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02AA AC00
                          1642 +1         ;TOKEN_V 
                          1643 +1          
02AC 00             R     1644 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02AD AC00
                          1645 +1              ;TOKEN_D 
                          1646 +1          
02AF 00             R     1647 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02B0 AC00
                          1648 +1              ;TOKEN_T
                          1649 +1          
02B2 00             R     1650 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02B3 AC00
                          1651 +1              ;TOKEN_E
                          1652 +1          
02B5 00             R     1653 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02B6 AC00
                          1654 +1              ;TOKEN_F
                          1655 +1          
02B8 00             R     1656 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02B9 AC00
                          1657 +1         ;TOKEN_O
                          1658             
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   32


LOC  OBJ                  LINE     SOURCE

                          1659 +1          
02BB 09             R     1660 +2      TRANSITION_ENTRY< ST_DIR, OFFSET( Concat_Num) >
02BC 7800
                          1661 +1           ;TOKEN_NUM: A digit - thus concatenate it
                          1662             
                          1663 +1          
02BE 08             R     1664 +2      TRANSITION_ENTRY< ST_DIR_SIGN, OFFSET( SetSign) >
02BF A800
                          1665 +1         ;TOKEN_POS - '+' Wait for sign
                          1666 +1          
02C1 08             R     1667 +2      TRANSITION_ENTRY< ST_DIR_SIGN, OFFSET( SetSign) >
02C2 A800
                          1668 +1         ;TOKEN_NEG - '-' Wait for sign
                          1669 +1          
02C4 07             R     1670 +2      TRANSITION_ENTRY< ST_DIR_INIT, OFFSET( no_op) >
02C5 B300
                          1671 +1                  ;TOKEN_IGNORE 
                          1672 +1          
02C7 00             R     1673 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02C8 AC00
                          1674 +1                  ;TOKEN_END
                          1675 +1          
02CA 00             R     1676 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02CB AC00
                          1677 +1                  ;TOKEN_OTHER    
                          1678     
                          1679             ;Current State = ST_DIR_SIGN: Waiting for DIGIT or Sign           
                          1680                                                     ;Input Token Type
                          1681 +1          
02CD 00             R     1682 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02CE AC00
                          1683 +1              ;TOKEN_S 
                          1684 +1          
02D0 00             R     1685 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02D1 AC00
                          1686 +1         ;TOKEN_V 
                          1687 +1          
02D3 00             R     1688 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02D4 AC00
                          1689 +1              ;TOKEN_D 
                          1690 +1          
02D6 00             R     1691 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02D7 AC00
                          1692 +1              ;TOKEN_T
                          1693 +1          
02D9 00             R     1694 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02DA AC00
                          1695 +1              ;TOKEN_E
                          1696 +1          
02DC 00             R     1697 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02DD AC00
                          1698 +1              ;TOKEN_F
                          1699 +1          
02DF 00             R     1700 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02E0 AC00
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   33


LOC  OBJ                  LINE     SOURCE

                          1701 +1         ;TOKEN_O
                          1702             
                          1703 +1          
02E2 09             R     1704 +2      TRANSITION_ENTRY< ST_DIR, OFFSET( Concat_Num) >
02E3 7800
                          1705 +1           ;TOKEN_NUM: A digit - thus concatenate it
                          1706             
                          1707 +1          
02E5 00             R     1708 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02E6 AC00
                          1709 +1         ;TOKEN_POS - '+' Wait for sign
                          1710 +1          
02E8 00             R     1711 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02E9 AC00
                          1712 +1         ;TOKEN_NEG - '-' Wait for sign
                          1713 +1          
02EB 08             R     1714 +2      TRANSITION_ENTRY< ST_DIR_SIGN, OFFSET( no_op) >
02EC B300
                          1715 +1                  ;TOKEN_IGNORE 
                          1716 +1          
02EE 00             R     1717 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02EF AC00
                          1718 +1                  ;TOKEN_END
                          1719 +1          
02F1 00             R     1720 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02F2 AC00
                          1721 +1                  ;TOKEN_OTHER    
                          1722             
                          1723                     ;Current State = ST_DIR : Digit started, thus keep grabbing until ret
                                   urn       
                          1724                                                     ;Input Token Type
                          1725 +1          
02F4 00             R     1726 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02F5 AC00
                          1727 +1              ;TOKEN_S
                          1728 +1          
02F7 00             R     1729 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02F8 AC00
                          1730 +1         ;TOKEN_V
                          1731 +1          
02FA 00             R     1732 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02FB AC00
                          1733 +1              ;TOKEN_D
                          1734 +1          
02FD 00             R     1735 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
02FE AC00
                          1736 +1              ;TOKEN_T 
                          1737 +1          
0300 00             R     1738 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0301 AC00
                          1739 +1              ;TOKEN_E 
                          1740 +1          
0303 00             R     1741 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0304 AC00
                          1742 +1              ;TOKEN_F 
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   34


LOC  OBJ                  LINE     SOURCE

                          1743 +1          
0306 00             R     1744 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0307 AC00
                          1745 +1         ;TOKEN_O
                          1746             
                          1747 +1          
0309 09             R     1748 +2      TRANSITION_ENTRY< ST_DIR, OFFSET( Concat_Num) >
030A 7800
                          1749 +1           ;TOKEN_NUM - A digit - thus concatenate it
                          1750                 
                          1751 +1          
030C 00             R     1752 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
030D AC00
                          1753 +1                  ;TOKEN_POS - '+'
                          1754 +1          
030F 00             R     1755 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0310 AC00
                          1756 +1                  ;TOKEN_NEG - '-'
                          1757 +1          
0312 09             R     1758 +2      TRANSITION_ENTRY< ST_DIR, OFFSET( no_op) >
0313 B300
                          1759 +1                      ;TOKEN_IGNORE - Keep Waiting for start of digit
                          1760 +1          
0315 00             R     1761 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetDir) >
0316 F100
                          1762 +1            ;TOKEN_END - Return
                          1763 +1          
0318 00             R     1764 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0319 AC00
                          1765 +1                  ;TOKEN_OTHER
                          1766     
                          1767     ;-----------------------------Rotating Turrent Angle---------------------------------
                                   -  
                          1768     
                          1769             ;Current State = ST_RTR_INIT: Waiting for DIGIT or Sign           
                          1770                                                     ;Input Token Type
                          1771 +1          
031B 00             R     1772 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
031C AC00
                          1773 +1              ;TOKEN_S 
                          1774 +1          
031E 00             R     1775 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
031F AC00
                          1776 +1          ;TOKEN_V 
                          1777 +1          
0321 00             R     1778 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0322 AC00
                          1779 +1              ;TOKEN_D 
                          1780 +1          
0324 00             R     1781 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0325 AC00
                          1782 +1              ;TOKEN_T
                          1783 +1          
0327 00             R     1784 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0328 AC00
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   35


LOC  OBJ                  LINE     SOURCE

                          1785 +1              ;TOKEN_E
                          1786 +1          
032A 00             R     1787 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
032B AC00
                          1788 +1              ;TOKEN_F
                          1789 +1          
032D 00             R     1790 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
032E AC00
                          1791 +1          ;TOKEN_O
                          1792 +1          
0330 0C             R     1793 +2      TRANSITION_ENTRY< ST_RTA_ABS, OFFSET( Concat_Num) >
0331 7800
                          1794 +1       ;TOKEN_NUM: A digit - thus concatenate it  
                          1795 +1          
0333 0B             R     1796 +2      TRANSITION_ENTRY< ST_RTR_SIGN, OFFSET( SetSign) >
0334 A800
                          1797 +1         ;TOKEN_POS - '+' Wait for sign
                          1798 +1          
0336 0B             R     1799 +2      TRANSITION_ENTRY< ST_RTR_SIGN, OFFSET( SetSign) >
0337 A800
                          1800 +1         ;TOKEN_NEG - '-' Wait for sign
                          1801 +1          
0339 0A             R     1802 +2      TRANSITION_ENTRY< ST_RTR_INIT, OFFSET( no_op) >
033A B300
                          1803 +1                  ;TOKEN_IGNORE 
                          1804 +1          
033C 00             R     1805 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
033D AC00
                          1806 +1                  ;TOKEN_END
                          1807 +1          
033F 00             R     1808 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0340 AC00
                          1809 +1                  ;TOKEN_OTHER    
                          1810     
                          1811             ;Current State = ST_RTR_SIGN: Waiting for DIGIT or Sign           
                          1812                                                     ;Input Token Type
                          1813 +1          
0342 00             R     1814 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0343 AC00
                          1815 +1              ;TOKEN_S 
                          1816 +1          
0345 00             R     1817 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0346 AC00
                          1818 +1          ;TOKEN_V 
                          1819 +1          
0348 00             R     1820 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0349 AC00
                          1821 +1              ;TOKEN_D 
                          1822 +1          
034B 00             R     1823 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
034C AC00
                          1824 +1              ;TOKEN_T
                          1825 +1          
034E 00             R     1826 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
034F AC00
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   36


LOC  OBJ                  LINE     SOURCE

                          1827 +1              ;TOKEN_E
                          1828 +1          
0351 00             R     1829 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0352 AC00
                          1830 +1              ;TOKEN_F
                          1831 +1          
0354 00             R     1832 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0355 AC00
                          1833 +1          ;TOKEN_O
                          1834 +1          
0357 0D             R     1835 +2      TRANSITION_ENTRY< ST_RTA_REL, OFFSET( Concat_Num) >
0358 7800
                          1836 +1       ;TOKEN_NUM: A digit - thus concatenate it  
                          1837 +1          
035A 00             R     1838 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
035B AC00
                          1839 +1         ;TOKEN_POS - '+' Wait for sign
                          1840 +1          
035D 00             R     1841 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
035E AC00
                          1842 +1         ;TOKEN_NEG - '-' Wait for sign
                          1843 +1          
0360 0B             R     1844 +2      TRANSITION_ENTRY< ST_RTR_SIGN, OFFSET( no_op) >
0361 B300
                          1845 +1                  ;TOKEN_IGNORE 
                          1846 +1          
0363 00             R     1847 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0364 AC00
                          1848 +1                  ;TOKEN_END
                          1849 +1          
0366 00             R     1850 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0367 AC00
                          1851 +1                  ;TOKEN_OTHER    
                          1852             
                          1853         ;Current State = ST_RTA_ABS : Digit started, thus keep grabbing until return     
                                     
                          1854                                                     ;Input Token Type
                          1855 +1          
0369 00             R     1856 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
036A AC00
                          1857 +1              ;TOKEN_S
                          1858 +1          
036C 00             R     1859 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
036D AC00
                          1860 +1         ;TOKEN_V
                          1861 +1          
036F 00             R     1862 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0370 AC00
                          1863 +1              ;TOKEN_D
                          1864 +1          
0372 00             R     1865 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0373 AC00
                          1866 +1              ;TOKEN_T 
                          1867 +1          
0375 00             R     1868 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   37


LOC  OBJ                  LINE     SOURCE

0376 AC00
                          1869 +1              ;TOKEN_E 
                          1870 +1          
0378 00             R     1871 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0379 AC00
                          1872 +1              ;TOKEN_F 
                          1873 +1          
037B 00             R     1874 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
037C AC00
                          1875 +1         ;TOKEN_O
                          1876             
                          1877 +1          
037E 0C             R     1878 +2      TRANSITION_ENTRY< ST_RTA_ABS, OFFSET( Concat_Num) >
037F 7800
                          1879 +1        ;TOKEN_NUM - A digit - thus concatenate it
                          1880             
                          1881 +1          
0381 00             R     1882 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0382 AC00
                          1883 +1                  ;TOKEN_POS - '+'
                          1884 +1          
0384 00             R     1885 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0385 AC00
                          1886 +1                  ;TOKEN_NEG - '-'
                          1887 +1          
0387 0C             R     1888 +2      TRANSITION_ENTRY< ST_RTA_ABS, OFFSET( no_op) >
0388 B300
                          1889 +1                  ;TOKEN_IGNORE - Keep Waiting for start of digit
                          1890 +1          
038A 00             R     1891 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( RotAbsTurrAng) >
038B 1401
                          1892 +1    ;TOKEN_END - Return
                          1893 +1          
038D 00             R     1894 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
038E AC00
                          1895 +1                  ;TOKEN_OTHER
                          1896             
                          1897         ;Current State = ST_RTA_REL : Digit started, thus keep grabbing until return     
                                     
                          1898                                                     ;Input Token Type
                          1899 +1          
0390 00             R     1900 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0391 AC00
                          1901 +1              ;TOKEN_S
                          1902 +1          
0393 00             R     1903 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0394 AC00
                          1904 +1         ;TOKEN_V
                          1905 +1          
0396 00             R     1906 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0397 AC00
                          1907 +1               ;TOKEN_D
                          1908 +1          
0399 00             R     1909 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
039A AC00
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   38


LOC  OBJ                  LINE     SOURCE

                          1910 +1              ;TOKEN_T 
                          1911 +1          
039C 00             R     1912 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
039D AC00
                          1913 +1              ;TOKEN_E 
                          1914 +1          
039F 00             R     1915 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03A0 AC00
                          1916 +1              ;TOKEN_F 
                          1917 +1          
03A2 00             R     1918 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03A3 AC00
                          1919 +1         ;TOKEN_O
                          1920             
                          1921 +1          
03A5 0D             R     1922 +2      TRANSITION_ENTRY< ST_RTA_REL, OFFSET( Concat_Num) >
03A6 7800
                          1923 +1        ;TOKEN_NUM - A digit - thus concatenate it
                          1924             
                          1925 +1          
03A8 00             R     1926 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03A9 AC00
                          1927 +1                  ;TOKEN_POS - '+'
                          1928 +1          
03AB 00             R     1929 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03AC AC00
                          1930 +1                  ;TOKEN_NEG - '-'
                          1931 +1          
03AE 0D             R     1932 +2      TRANSITION_ENTRY< ST_RTA_REL, OFFSET( no_op) >
03AF B300
                          1933 +1                  ;TOKEN_IGNORE - Keep Waiting for start of digit
                          1934 +1          
03B1 00             R     1935 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( RotRelTurrAng) >
03B2 3001
                          1936 +1    ;TOKEN_END - Return
                          1937 +1          
03B4 00             R     1938 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03B5 AC00
                          1939 +1                  ;TOKEN_OTHER
                          1940             
                          1941     ;-----------------------------Elevation of Turret----------------------------------
                                      
                          1942     
                          1943             ;Current State = ST_STEA_INIT: Waiting for DIGIT or Sign           
                          1944                                                     ;Input Token Type
                          1945 +1          
03B7 00             R     1946 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03B8 AC00
                          1947 +1              ;TOKEN_S 
                          1948 +1          
03BA 00             R     1949 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03BB AC00
                          1950 +1        ;TOKEN_V 
                          1951 +1          
03BD 00             R     1952 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   39


LOC  OBJ                  LINE     SOURCE

03BE AC00
                          1953 +1              ;TOKEN_D 
                          1954 +1          
03C0 00             R     1955 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03C1 AC00
                          1956 +1              ;TOKEN_T
                          1957 +1          
03C3 00             R     1958 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03C4 AC00
                          1959 +1              ;TOKEN_E
                          1960 +1          
03C6 00             R     1961 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03C7 AC00
                          1962 +1              ;TOKEN_F
                          1963 +1          
03C9 00             R     1964 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03CA AC00
                          1965 +1        ;TOKEN_O
                          1966 +1          
03CC 10             R     1967 +2      TRANSITION_ENTRY< ST_STEA, OFFSET( Concat_Num) >
03CD 7800
                          1968 +1          ;TOKEN_NUM: A digit - thus concatenate it       
                          1969 +1          
03CF 0F             R     1970 +2      TRANSITION_ENTRY< ST_STEA_SIGN, OFFSET( SetSign) >
03D0 A800
                          1971 +1         ;TOKEN_POS - '+' Wait for sign
                          1972 +1          
03D2 0F             R     1973 +2      TRANSITION_ENTRY< ST_STEA_SIGN, OFFSET( SetSign) >
03D3 A800
                          1974 +1        ;TOKEN_NEG - '-' Wait for sign
                          1975 +1          
03D5 0E             R     1976 +2      TRANSITION_ENTRY< ST_STEA_INIT, OFFSET( no_op) >
03D6 B300
                          1977 +1              ;TOKEN_IGNORE 
                          1978 +1          
03D8 00             R     1979 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03D9 AC00
                          1980 +1                  ;TOKEN_END
                          1981 +1          
03DB 00             R     1982 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03DC AC00
                          1983 +1                  ;TOKEN_OTHER    
                          1984             
                          1985             ;Current State = ST_STEA_SIGN: Waiting for DIGIT or Sign           
                          1986                                                      ;Input Token Type
                          1987 +1          
03DE 00             R     1988 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03DF AC00
                          1989 +1              ;TOKEN_S 
                          1990 +1          
03E1 00             R     1991 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03E2 AC00
                          1992 +1        ;TOKEN_V 
                          1993 +1          
03E4 00             R     1994 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   40


LOC  OBJ                  LINE     SOURCE

03E5 AC00
                          1995 +1              ;TOKEN_D 
                          1996 +1          
03E7 00             R     1997 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03E8 AC00
                          1998 +1              ;TOKEN_T
                          1999 +1          
03EA 00             R     2000 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03EB AC00
                          2001 +1              ;TOKEN_E
                          2002 +1          
03ED 00             R     2003 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03EE AC00
                          2004 +1              ;TOKEN_F
                          2005 +1          
03F0 00             R     2006 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03F1 AC00
                          2007 +1        ;TOKEN_O
                          2008 +1          
03F3 10             R     2009 +2      TRANSITION_ENTRY< ST_STEA, OFFSET( Concat_Num) >
03F4 7800
                          2010 +1          ;TOKEN_NUM: A digit - thus concatenate it       
                          2011 +1          
03F6 00             R     2012 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03F7 AC00
                          2013 +1          ;TOKEN_POS - '+' Wait for sign
                          2014 +1          
03F9 00             R     2015 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
03FA AC00
                          2016 +1         ;TOKEN_NEG - '-' Wait for sign
                          2017 +1          
03FC 0E             R     2018 +2      TRANSITION_ENTRY< ST_STEA_INIT, OFFSET( no_op) >
03FD B300
                          2019 +1              ;TOKEN_IGNORE 
                          2020 +1          
03FF 00             R     2021 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0400 AC00
                          2022 +1                  ;TOKEN_END
                          2023 +1          
0402 00             R     2024 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0403 AC00
                          2025 +1                  ;TOKEN_OTHER    
                          2026             
                          2027                     ;Current State = ST_STEA : Digit started, thus keep grabbing until re
                                   turn       
                          2028                                                     ;Input Token Type
                          2029 +1          
0405 00             R     2030 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0406 AC00
                          2031 +1              ;TOKEN_S
                          2032 +1          
0408 00             R     2033 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0409 AC00
                          2034 +1        ;TOKEN_V
                          2035 +1          
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   41


LOC  OBJ                  LINE     SOURCE

040B 00             R     2036 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
040C AC00
                          2037 +1              ;TOKEN_D
                          2038 +1          
040E 00             R     2039 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
040F AC00
                          2040 +1              ;TOKEN_T 
                          2041 +1          
0411 00             R     2042 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0412 AC00
                          2043 +1              ;TOKEN_E 
                          2044 +1          
0414 00             R     2045 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0415 AC00
                          2046 +1              ;TOKEN_F 
                          2047 +1          
0417 00             R     2048 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0418 AC00
                          2049 +1        ;TOKEN_O
                          2050             
                          2051 +1          
041A 10             R     2052 +2      TRANSITION_ENTRY< ST_STEA, OFFSET( Concat_Num) >
041B 7800
                          2053 +1          ;TOKEN_NUM - A digit - thus concatenate it
                          2054             
                          2055 +1          
041D 00             R     2056 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
041E AC00
                          2057 +1                  ;TOKEN_POS - '+'
                          2058 +1          
0420 00             R     2059 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0421 AC00
                          2060 +1                  ;TOKEN_NEG - '-'
                          2061 +1          
0423 10             R     2062 +2      TRANSITION_ENTRY< ST_STEA, OFFSET( no_op) >
0424 B300
                          2063 +1                      ;TOKEN_IGNORE - Keep Waiting for start of digit
                          2064 +1          
0426 00             R     2065 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetTurrEleAng) >
0427 4C01
                          2066 +1     ;TOKEN_END - Return
                          2067 +1          
0429 00             R     2068 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
042A AC00
                          2069 +1                  ;TOKEN_OTHER
                          2070             
                          2071     ;-----------------------------Fire Laser----------------------------------      
                          2072     
                          2073             ;Current State = ST_LAZON: Waiting for return       
                          2074                                                     ;Input Token Type
                          2075 +1          
042C 00             R     2076 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
042D AC00
                          2077 +1              ;TOKEN_S 
                          2078 +1          
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   42


LOC  OBJ                  LINE     SOURCE

042F 00             R     2079 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0430 AC00
                          2080 +1        ;TOKEN_V 
                          2081 +1          
0432 00             R     2082 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0433 AC00
                          2083 +1              ;TOKEN_D 
                          2084 +1          
0435 00             R     2085 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0436 AC00
                          2086 +1              ;TOKEN_T
                          2087 +1          
0438 00             R     2088 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0439 AC00
                          2089 +1              ;TOKEN_E
                          2090 +1          
043B 00             R     2091 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
043C AC00
                          2092 +1              ;TOKEN_F
                          2093 +1          
043E 00             R     2094 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
043F AC00
                          2095 +1        ;TOKEN_O
                          2096 +1          
0441 00             R     2097 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0442 AC00
                          2098 +1        ;TOKEN_NUM
                          2099 +1          
0444 00             R     2100 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0445 AC00
                          2101 +1        ;TOKEN_POS
                          2102 +1          
0447 00             R     2103 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0448 AC00
                          2104 +1        ;TOKEN_NEG 
                          2105 +1          
044A 11             R     2106 +2      TRANSITION_ENTRY< ST_LAZON, OFFSET( no_op) >
044B B300
                          2107 +1                  ;TOKEN_IGNORE 
                          2108 +1          
044D 00             R     2109 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( LaserON) >
044E 7F01
                          2110 +1                  ;TOKEN_END
                          2111 +1          
0450 00             R     2112 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0451 AC00
                          2113 +1                  ;TOKEN_OTHER    
                          2114     
                          2115             
                          2116     ;-----------------------------Laser OFF----------------------------------       
                          2117     
                          2118             ;Current State = ST_LAZOFF: Waiting for return       
                          2119                                                     ;Input Token Type
                          2120 +1          
0453 00             R     2121 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   43


LOC  OBJ                  LINE     SOURCE

0454 AC00
                          2122 +1              ;TOKEN_S 
                          2123 +1          
0456 00             R     2124 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0457 AC00
                          2125 +1        ;TOKEN_V 
                          2126 +1          
0459 00             R     2127 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
045A AC00
                          2128 +1              ;TOKEN_D 
                          2129 +1          
045C 00             R     2130 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
045D AC00
                          2131 +1              ;TOKEN_T
                          2132 +1          
045F 00             R     2133 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0460 AC00
                          2134 +1              ;TOKEN_E
                          2135 +1          
0462 00             R     2136 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0463 AC00
                          2137 +1              ;TOKEN_F
                          2138 +1          
0465 00             R     2139 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0466 AC00
                          2140 +1        ;TOKEN_O
                          2141 +1          
0468 00             R     2142 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0469 AC00
                          2143 +1        ;TOKEN_NUM
                          2144 +1          
046B 00             R     2145 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
046C AC00
                          2146 +1        ;TOKEN_POS
                          2147 +1          
046E 00             R     2148 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
046F AC00
                          2149 +1        ;TOKEN_NEG 
                          2150 +1          
0471 12             R     2151 +2      TRANSITION_ENTRY< ST_LAZOFF, OFFSET( no_op) >
0472 B300
                          2152 +1                  ;TOKEN_IGNORE 
                          2153 +1          
0474 00             R     2154 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( LaserOFF) >
0475 8A01
                          2155 +1                  ;TOKEN_END
                          2156 +1          
0477 00             R     2157 +2      TRANSITION_ENTRY< ST_INITIAL, OFFSET( SetError) >
0478 AC00
                          2158 +1              ;TOKEN_OTHER        
                          2159             
                          2160             
                          2161     
                          2162             
                          2163     ; Token Tables
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   44


LOC  OBJ                  LINE     SOURCE

                          2164     ;
                          2165     ; Description:      This creates the tables of token types and token values.
                          2166     ;                   Each entry corresponds to the token type and the token
                          2167     ;                   value for a character.  Macros are used to actually build
                          2168     ;                   two separate tables - TokenTypeTable for token types and
                          2169     ;                   TokenValueTable for token values.
                          2170     ;
                          2171     ; Author:           Anjian Wu
                          2172     ; Last Modified:    12-02-2013
                          2173     ; Last Modified:    12-05-2013: Just made Laser tokens return True/False - Anjian Wu
                          2174     
                          2175     
                          2176     ; token type table - uses first byte of macro table entry
                          2177     
                          2178     
047A                      2179     TokenTypeTable  LABEL   BYTE
                          2180 +1          
                          2181 +2          
047A 0A                   2182 +3          DB      TOKEN_IGNORE
                          2183 +2          ;<null>  (end of string)
                          2184 +2          
047B 0C                   2185 +3          DB      TOKEN_OTHER
                          2186 +2                  ;SOH
                          2187 +2          
047C 0C                   2188 +3          DB      TOKEN_OTHER
                          2189 +2                  ;STX
                          2190 +2          
047D 0C                   2191 +3          DB      TOKEN_OTHER
                          2192 +2                  ;ETX
                          2193 +2          
047E 0C                   2194 +3          DB      TOKEN_OTHER
                          2195 +2                  ;EOT
                          2196 +2          
047F 0C                   2197 +3          DB      TOKEN_OTHER
                          2198 +2                  ;ENQ
                          2199 +2          
0480 0C                   2200 +3          DB      TOKEN_OTHER
                          2201 +2                  ;ACK
                          2202 +2          
0481 0C                   2203 +3          DB      TOKEN_OTHER
                          2204 +2                  ;BEL
                          2205 +2          
0482 0C                   2206 +3          DB      TOKEN_OTHER
                          2207 +2                  ;backspace
                          2208 +2          
0483 0A                   2209 +3          DB      TOKEN_IGNORE
                          2210 +2      ;TAB
                          2211 +2          
0484 0C                   2212 +3          DB      TOKEN_OTHER
                          2213 +2          ;new line
                          2214 +2          
0485 0A                   2215 +3          DB      TOKEN_IGNORE
                          2216 +2          ;vertical tab
                          2217 +2          
0486 0C                   2218 +3          DB      TOKEN_OTHER
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   45


LOC  OBJ                  LINE     SOURCE

                          2219 +2          ;form feed
                          2220 +2          
0487 0B                   2221 +3          DB      TOKEN_END
                          2222 +2              ;carriage return
                          2223 +2          
0488 0C                   2224 +3          DB      TOKEN_OTHER
                          2225 +2          ;SO
                          2226 +2          
0489 0C                   2227 +3          DB      TOKEN_OTHER
                          2228 +2          ;SI
                          2229 +2          
048A 0C                   2230 +3          DB      TOKEN_OTHER
                          2231 +2          ;DLE
                          2232 +2          
048B 0C                   2233 +3          DB      TOKEN_OTHER
                          2234 +2          ;DC1
                          2235 +2          
048C 0C                   2236 +3          DB      TOKEN_OTHER
                          2237 +2          ;DC2
                          2238 +2          
048D 0C                   2239 +3          DB      TOKEN_OTHER
                          2240 +2          ;DC3
                          2241 +2          
048E 0C                   2242 +3          DB      TOKEN_OTHER
                          2243 +2          ;DC4
                          2244 +2          
048F 0C                   2245 +3          DB      TOKEN_OTHER
                          2246 +2          ;NAK
                          2247 +2          
0490 0C                   2248 +3          DB      TOKEN_OTHER
                          2249 +2          ;SYN
                          2250 +2          
0491 0C                   2251 +3          DB      TOKEN_OTHER
                          2252 +2          ;ETB
                          2253 +2          
0492 0C                   2254 +3          DB      TOKEN_OTHER
                          2255 +2          ;CAN
                          2256 +2          
0493 0C                   2257 +3          DB      TOKEN_OTHER
                          2258 +2          ;EM
                          2259 +2          
0494 0C                   2260 +3          DB      TOKEN_OTHER
                          2261 +2          ;SUB
                          2262 +2          
0495 0C                   2263 +3          DB      TOKEN_OTHER
                          2264 +2          ;escape
                          2265 +2          
0496 0C                   2266 +3          DB      TOKEN_OTHER
                          2267 +2          ;FS
                          2268 +2          
0497 0C                   2269 +3          DB      TOKEN_OTHER
                          2270 +2          ;GS
                          2271 +2          
0498 0C                   2272 +3          DB      TOKEN_OTHER
                          2273 +2          ;AS
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   46


LOC  OBJ                  LINE     SOURCE

                          2274 +2          
0499 0C                   2275 +3          DB      TOKEN_OTHER
                          2276 +2          ;US
                          2277 +2          
049A 0A                   2278 +3          DB      TOKEN_IGNORE
                          2279 +2          ;space
                          2280 +2          
049B 0C                   2281 +3          DB      TOKEN_OTHER
                          2282 +2          ;!
                          2283 +2          
049C 0C                   2284 +3          DB      TOKEN_OTHER
                          2285 +2          ;"
                          2286 +2          
049D 0C                   2287 +3          DB      TOKEN_OTHER
                          2288 +2          ;#
                          2289 +2          
049E 0C                   2290 +3          DB      TOKEN_OTHER
                          2291 +2          ;$
                          2292 +2          
049F 0C                   2293 +3          DB      TOKEN_OTHER
                          2294 +2          ;percent
                          2295 +2          
04A0 0C                   2296 +3          DB      TOKEN_OTHER
                          2297 +2          ;&
                          2298 +2          
04A1 0C                   2299 +3          DB      TOKEN_OTHER
                          2300 +2          ;'
                          2301 +2          
04A2 0C                   2302 +3          DB      TOKEN_OTHER
                          2303 +2          ;open paren
                          2304 +2          
04A3 0C                   2305 +3          DB      TOKEN_OTHER
                          2306 +2          ;close paren
                          2307 +2          
04A4 0C                   2308 +3          DB      TOKEN_OTHER
                          2309 +2          ;*
                          2310 +2          
04A5 08                   2311 +3          DB      TOKEN_POS
                          2312 +2                  ;+  (positive sign)
                          2313 +2          
04A6 0C                   2314 +3          DB      TOKEN_OTHER
                          2315 +2          ;,
                          2316 +2          
04A7 09                   2317 +3          DB      TOKEN_NEG
                          2318 +2                  ;-  (negative sign)
                          2319 +2          
04A8 0C                   2320 +3          DB      TOKEN_OTHER
                          2321 +2                  ;.  (decimal point)
                          2322 +2          
04A9 0C                   2323 +3          DB      TOKEN_OTHER
                          2324 +2          ;/
                          2325 +2          
04AA 07                   2326 +3          DB      TOKEN_NUM
                          2327 +2              ;0  (digit)
                          2328 +2          
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   47


LOC  OBJ                  LINE     SOURCE

04AB 07                   2329 +3          DB      TOKEN_NUM
                          2330 +2                  ;1  (digit)
                          2331 +2          
04AC 07                   2332 +3          DB      TOKEN_NUM
                          2333 +2                  ;2  (digit)
                          2334 +2          
04AD 07                   2335 +3          DB      TOKEN_NUM
                          2336 +2                  ;3  (digit)
                          2337 +2          
04AE 07                   2338 +3          DB      TOKEN_NUM
                          2339 +2                  ;4  (digit)
                          2340 +2          
04AF 07                   2341 +3          DB      TOKEN_NUM
                          2342 +2                  ;5  (digit)
                          2343 +2          
04B0 07                   2344 +3          DB      TOKEN_NUM
                          2345 +2                  ;6  (digit)
                          2346 +2          
04B1 07                   2347 +3          DB      TOKEN_NUM
                          2348 +2                  ;7  (digit)
                          2349 +2          
04B2 07                   2350 +3          DB      TOKEN_NUM
                          2351 +2                  ;8  (digit)
                          2352 +2          
04B3 07                   2353 +3          DB      TOKEN_NUM
                          2354 +2                  ;9  (digit)
                          2355 +2          
04B4 0C                   2356 +3          DB      TOKEN_OTHER
                          2357 +2          ;:
                          2358 +2          
04B5 0C                   2359 +3          DB      TOKEN_OTHER
                          2360 +2          ;;
                          2361 +2          
04B6 0C                   2362 +3          DB      TOKEN_OTHER
                          2363 +2          ;<
                          2364 +2          
04B7 0C                   2365 +3          DB      TOKEN_OTHER
                          2366 +2          ;=
                          2367 +2          
04B8 0C                   2368 +3          DB      TOKEN_OTHER
                          2369 +2          ;>
                          2370 +2          
04B9 0C                   2371 +3          DB      TOKEN_OTHER
                          2372 +2          ;?
                          2373 +2          
04BA 0C                   2374 +3          DB      TOKEN_OTHER
                          2375 +2          ;@
                          2376 +2          
04BB 0C                   2377 +3          DB      TOKEN_OTHER
                          2378 +2          ;A
                          2379 +2          
04BC 0C                   2380 +3          DB      TOKEN_OTHER
                          2381 +2          ;B
                          2382 +2          
04BD 0C                   2383 +3          DB      TOKEN_OTHER
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   48


LOC  OBJ                  LINE     SOURCE

                          2384 +2          ;C
                          2385 +2          
04BE 02                   2386 +3          DB      TOKEN_D     
                          2387 +2          ;D
                          2388 +2          
04BF 04                   2389 +3          DB      TOKEN_E     
                          2390 +2    ;E 
                          2391 +2          
04C0 05                   2392 +3          DB      TOKEN_F     
                          2393 +2          ;F
                          2394 +2          
04C1 0C                   2395 +3          DB      TOKEN_OTHER
                          2396 +2          ;G
                          2397 +2          
04C2 0C                   2398 +3          DB      TOKEN_OTHER
                          2399 +2          ;H
                          2400 +2          
04C3 0C                   2401 +3          DB      TOKEN_OTHER
                          2402 +2          ;I
                          2403 +2          
04C4 0C                   2404 +3          DB      TOKEN_OTHER
                          2405 +2          ;J
                          2406 +2          
04C5 0C                   2407 +3          DB      TOKEN_OTHER
                          2408 +2          ;K
                          2409 +2          
04C6 0C                   2410 +3          DB      TOKEN_OTHER
                          2411 +2          ;L
                          2412 +2          
04C7 0C                   2413 +3          DB      TOKEN_OTHER
                          2414 +2          ;M
                          2415 +2          
04C8 0C                   2416 +3          DB      TOKEN_OTHER
                          2417 +2          ;N
                          2418 +2          
04C9 06                   2419 +3          DB      TOKEN_O 
                          2420 +2          ;O
                          2421 +2          
04CA 0C                   2422 +3          DB      TOKEN_OTHER
                          2423 +2          ;P
                          2424 +2          
04CB 0C                   2425 +3          DB      TOKEN_OTHER
                          2426 +2          ;Q
                          2427 +2          
04CC 0C                   2428 +3          DB      TOKEN_OTHER
                          2429 +2          ;R
                          2430 +2          
04CD 00                   2431 +3          DB      TOKEN_S     
                          2432 +2          ;S
                          2433 +2          
04CE 03                   2434 +3          DB      TOKEN_T
                          2435 +2          ;T
                          2436 +2          
04CF 0C                   2437 +3          DB      TOKEN_OTHER
                          2438 +2          ;U
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   49


LOC  OBJ                  LINE     SOURCE

                          2439 +2          
04D0 01                   2440 +3          DB      TOKEN_V
                          2441 +2              ;V
                          2442 +2          
04D1 0C                   2443 +3          DB      TOKEN_OTHER
                          2444 +2          ;W
                          2445 +2          
04D2 0C                   2446 +3          DB      TOKEN_OTHER
                          2447 +2          ;X
                          2448 +2          
04D3 0C                   2449 +3          DB      TOKEN_OTHER
                          2450 +2          ;Y
                          2451 +2          
04D4 0C                   2452 +3          DB      TOKEN_OTHER
                          2453 +2          ;Z
                          2454 +2          
04D5 0C                   2455 +3          DB      TOKEN_OTHER
                          2456 +2          ;[
                          2457 +2          
04D6 0C                   2458 +3          DB      TOKEN_OTHER
                          2459 +2          ;\
                          2460 +2          
04D7 0C                   2461 +3          DB      TOKEN_OTHER
                          2462 +2          ;]
                          2463 +2          
04D8 0C                   2464 +3          DB      TOKEN_OTHER
                          2465 +2          ;^
                          2466 +2          
04D9 0C                   2467 +3          DB      TOKEN_OTHER
                          2468 +2          ;_
                          2469 +2          
04DA 0C                   2470 +3          DB      TOKEN_OTHER
                          2471 +2          ;`
                          2472 +2          
04DB 0C                   2473 +3          DB      TOKEN_OTHER
                          2474 +2          ;a
                          2475 +2          
04DC 0C                   2476 +3          DB      TOKEN_OTHER
                          2477 +2          ;b
                          2478 +2          
04DD 0C                   2479 +3          DB      TOKEN_OTHER
                          2480 +2          ;c
                          2481 +2          
04DE 02                   2482 +3          DB      TOKEN_D     
                          2483 +2          ;d
                          2484 +2          
04DF 04                   2485 +3          DB      TOKEN_E     
                          2486 +2          ;e  
                          2487 +2          
04E0 05                   2488 +3          DB      TOKEN_F     
                          2489 +2          ;f
                          2490 +2          
04E1 0C                   2491 +3          DB      TOKEN_OTHER 
                          2492 +2          ;g
                          2493 +2          
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   50


LOC  OBJ                  LINE     SOURCE

04E2 0C                   2494 +3          DB      TOKEN_OTHER 
                          2495 +2          ;h
                          2496 +2          
04E3 0C                   2497 +3          DB      TOKEN_OTHER 
                          2498 +2          ;i
                          2499 +2          
04E4 0C                   2500 +3          DB      TOKEN_OTHER 
                          2501 +2          ;j
                          2502 +2          
04E5 0C                   2503 +3          DB      TOKEN_OTHER 
                          2504 +2          ;k
                          2505 +2          
04E6 0C                   2506 +3          DB      TOKEN_OTHER 
                          2507 +2          ;l
                          2508 +2          
04E7 0C                   2509 +3          DB      TOKEN_OTHER 
                          2510 +2          ;m
                          2511 +2          
04E8 0C                   2512 +3          DB      TOKEN_OTHER 
                          2513 +2          ;n
                          2514 +2          
04E9 06                   2515 +3          DB      TOKEN_O     
                          2516 +2          ;o
                          2517 +2          
04EA 0C                   2518 +3          DB      TOKEN_OTHER 
                          2519 +2          ;p
                          2520 +2          
04EB 0C                   2521 +3          DB      TOKEN_OTHER 
                          2522 +2          ;q
                          2523 +2          
04EC 0C                   2524 +3          DB      TOKEN_OTHER 
                          2525 +2          ;r
                          2526 +2          
04ED 00                   2527 +3          DB      TOKEN_S     
                          2528 +2          ;s
                          2529 +2          
04EE 03                   2530 +3          DB      TOKEN_T 
                          2531 +2          ;t
                          2532 +2          
04EF 0C                   2533 +3          DB      TOKEN_OTHER 
                          2534 +2          ;u
                          2535 +2          
04F0 01                   2536 +3          DB      TOKEN_V     
                          2537 +2          ;v
                          2538 +2          
04F1 0C                   2539 +3          DB      TOKEN_OTHER 
                          2540 +2          ;w
                          2541 +2          
04F2 0C                   2542 +3          DB      TOKEN_OTHER 
                          2543 +2          ;x
                          2544 +2          
04F3 0C                   2545 +3          DB      TOKEN_OTHER 
                          2546 +2          ;y
                          2547 +2          
04F4 0C                   2548 +3          DB      TOKEN_OTHER 
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   51


LOC  OBJ                  LINE     SOURCE

                          2549 +2          ;z
                          2550 +2          
04F5 0C                   2551 +3          DB      TOKEN_OTHER 
                          2552 +2          ;{
                          2553 +2          
04F6 0C                   2554 +3          DB      TOKEN_OTHER 
                          2555 +2          ;|
                          2556 +2          
04F7 0C                   2557 +3          DB      TOKEN_OTHER 
                          2558 +2          ;}
                          2559 +2          
04F8 0C                   2560 +3          DB      TOKEN_OTHER 
                          2561 +2          ;~
                          2562 +2          
04F9 0C                   2563 +3          DB      TOKEN_OTHER 
                          2564 +2          ;rubout
                          2565 +1  
                          2566     
                          2567     
                          2568     ; token value table - uses second byte of macro table entry
                          2569     
                          2570     
04FA                      2571     TokenValueTable LABEL       BYTE
                          2572 +1          
                          2573 +2          
04FA 00                   2574 +3          DB       0
                          2575 +2          ;<null>  (end of string)
                          2576 +2          
04FB 01                   2577 +3          DB       1
                          2578 +2                  ;SOH
                          2579 +2          
04FC 02                   2580 +3          DB       2
                          2581 +2                  ;STX
                          2582 +2          
04FD 03                   2583 +3          DB       3
                          2584 +2                  ;ETX
                          2585 +2          
04FE 04                   2586 +3          DB       4
                          2587 +2                  ;EOT
                          2588 +2          
04FF 05                   2589 +3          DB       5
                          2590 +2                  ;ENQ
                          2591 +2          
0500 06                   2592 +3          DB       6
                          2593 +2                  ;ACK
                          2594 +2          
0501 07                   2595 +3          DB       7
                          2596 +2                  ;BEL
                          2597 +2          
0502 08                   2598 +3          DB       8
                          2599 +2                  ;backspace
                          2600 +2          
0503 09                   2601 +3          DB       9
                          2602 +2      ;TAB
                          2603 +2          
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   52


LOC  OBJ                  LINE     SOURCE

0504 0A                   2604 +3          DB       10
                          2605 +2          ;new line
                          2606 +2          
0505 0B                   2607 +3          DB       11
                          2608 +2          ;vertical tab
                          2609 +2          
0506 0C                   2610 +3          DB       12
                          2611 +2          ;form feed
                          2612 +2          
0507 0D                   2613 +3          DB       13
                          2614 +2              ;carriage return
                          2615 +2          
0508 0E                   2616 +3          DB       14
                          2617 +2          ;SO
                          2618 +2          
0509 0F                   2619 +3          DB       15
                          2620 +2          ;SI
                          2621 +2          
050A 10                   2622 +3          DB       16
                          2623 +2          ;DLE
                          2624 +2          
050B 11                   2625 +3          DB       17
                          2626 +2          ;DC1
                          2627 +2          
050C 12                   2628 +3          DB       18
                          2629 +2          ;DC2
                          2630 +2          
050D 13                   2631 +3          DB       19
                          2632 +2          ;DC3
                          2633 +2          
050E 14                   2634 +3          DB       20
                          2635 +2          ;DC4
                          2636 +2          
050F 15                   2637 +3          DB       21
                          2638 +2          ;NAK
                          2639 +2          
0510 16                   2640 +3          DB       22
                          2641 +2          ;SYN
                          2642 +2          
0511 17                   2643 +3          DB       23
                          2644 +2          ;ETB
                          2645 +2          
0512 18                   2646 +3          DB       24
                          2647 +2          ;CAN
                          2648 +2          
0513 19                   2649 +3          DB       25
                          2650 +2          ;EM
                          2651 +2          
0514 1A                   2652 +3          DB       26
                          2653 +2          ;SUB
                          2654 +2          
0515 1B                   2655 +3          DB       27
                          2656 +2          ;escape
                          2657 +2          
0516 1C                   2658 +3          DB       28
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   53


LOC  OBJ                  LINE     SOURCE

                          2659 +2          ;FS
                          2660 +2          
0517 1D                   2661 +3          DB       29
                          2662 +2          ;GS
                          2663 +2          
0518 1E                   2664 +3          DB       30
                          2665 +2          ;AS
                          2666 +2          
0519 1F                   2667 +3          DB       31
                          2668 +2          ;US
                          2669 +2          
051A 20                   2670 +3          DB       ' '
                          2671 +2          ;space
                          2672 +2          
051B 21                   2673 +3          DB       '!'
                          2674 +2          ;!
                          2675 +2          
051C 22                   2676 +3          DB       '"'
                          2677 +2          ;"
                          2678 +2          
051D 23                   2679 +3          DB       '#'
                          2680 +2          ;#
                          2681 +2          
051E 24                   2682 +3          DB       '$'
                          2683 +2          ;$
                          2684 +2          
051F 25                   2685 +3          DB       37
                          2686 +2          ;percent
                          2687 +2          
0520 26                   2688 +3          DB       '&'
                          2689 +2          ;&
                          2690 +2          
0521 27                   2691 +3          DB       39
                          2692 +2          ;'
                          2693 +2          
0522 28                   2694 +3          DB       40
                          2695 +2          ;open paren
                          2696 +2          
0523 29                   2697 +3          DB       41
                          2698 +2          ;close paren
                          2699 +2          
0524 2A                   2700 +3          DB       '*'
                          2701 +2          ;*
                          2702 +2          
0525 01                   2703 +3          DB       POS
                          2704 +2                  ;+  (positive sign)
                          2705 +2          
0526 2C                   2706 +3          DB       44
                          2707 +2          ;,
                          2708 +2          
0527 FF                   2709 +3          DB       NEGA
                          2710 +2                  ;-  (negative sign)
                          2711 +2          
0528 00                   2712 +3          DB       0
                          2713 +2                  ;.  (decimal point)
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   54


LOC  OBJ                  LINE     SOURCE

                          2714 +2          
0529 2F                   2715 +3          DB       '/'
                          2716 +2          ;/
                          2717 +2          
052A 00                   2718 +3          DB       0
                          2719 +2              ;0  (digit)
                          2720 +2          
052B 01                   2721 +3          DB       1
                          2722 +2                  ;1  (digit)
                          2723 +2          
052C 02                   2724 +3          DB       2
                          2725 +2                  ;2  (digit)
                          2726 +2          
052D 03                   2727 +3          DB       3
                          2728 +2                  ;3  (digit)
                          2729 +2          
052E 04                   2730 +3          DB       4
                          2731 +2                  ;4  (digit)
                          2732 +2          
052F 05                   2733 +3          DB       5
                          2734 +2                  ;5  (digit)
                          2735 +2          
0530 06                   2736 +3          DB       6
                          2737 +2                  ;6  (digit)
                          2738 +2          
0531 07                   2739 +3          DB       7
                          2740 +2                  ;7  (digit)
                          2741 +2          
0532 08                   2742 +3          DB       8
                          2743 +2                  ;8  (digit)
                          2744 +2          
0533 09                   2745 +3          DB       9
                          2746 +2                  ;9  (digit)
                          2747 +2          
0534 3A                   2748 +3          DB       ':'
                          2749 +2          ;:
                          2750 +2          
0535 3B                   2751 +3          DB       ';'
                          2752 +2          ;;
                          2753 +2          
0536 3C                   2754 +3          DB       '<'
                          2755 +2          ;<
                          2756 +2          
0537 3D                   2757 +3          DB       '='
                          2758 +2          ;=
                          2759 +2          
0538 3E                   2760 +3          DB       '>'
                          2761 +2          ;>
                          2762 +2          
0539 3F                   2763 +3          DB       '?'
                          2764 +2          ;?
                          2765 +2          
053A 40                   2766 +3          DB       '@'
                          2767 +2          ;@
                          2768 +2          
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   55


LOC  OBJ                  LINE     SOURCE

053B 41                   2769 +3          DB       'A'
                          2770 +2          ;A
                          2771 +2          
053C 42                   2772 +3          DB       'B'
                          2773 +2          ;B
                          2774 +2          
053D 43                   2775 +3          DB       'C'
                          2776 +2          ;C
                          2777 +2          
053E 44                   2778 +3          DB       'D'
                          2779 +2          ;D
                          2780 +2          
053F 45                   2781 +3          DB       'E'
                          2782 +2    ;E 
                          2783 +2          
0540 01                   2784 +3          DB       TRUE
                          2785 +2          ;F
                          2786 +2          
0541 47                   2787 +3          DB       'G'
                          2788 +2          ;G
                          2789 +2          
0542 48                   2790 +3          DB       'H'
                          2791 +2          ;H
                          2792 +2          
0543 49                   2793 +3          DB       'I'
                          2794 +2          ;I
                          2795 +2          
0544 4A                   2796 +3          DB       'J'
                          2797 +2          ;J
                          2798 +2          
0545 4B                   2799 +3          DB       'K'
                          2800 +2          ;K
                          2801 +2          
0546 4C                   2802 +3          DB       'L'
                          2803 +2          ;L
                          2804 +2          
0547 4D                   2805 +3          DB       'M'
                          2806 +2          ;M
                          2807 +2          
0548 4E                   2808 +3          DB       'N'
                          2809 +2          ;N
                          2810 +2          
0549 00                   2811 +3          DB       FALSE
                          2812 +2          ;O
                          2813 +2          
054A 50                   2814 +3          DB       'P'
                          2815 +2          ;P
                          2816 +2          
054B 51                   2817 +3          DB       'Q'
                          2818 +2          ;Q
                          2819 +2          
054C 52                   2820 +3          DB       'R'
                          2821 +2          ;R
                          2822 +2          
054D 53                   2823 +3          DB       'S'
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   56


LOC  OBJ                  LINE     SOURCE

                          2824 +2          ;S
                          2825 +2          
054E 54                   2826 +3          DB       'T'
                          2827 +2          ;T
                          2828 +2          
054F 55                   2829 +3          DB       'U'
                          2830 +2          ;U
                          2831 +2          
0550 56                   2832 +3          DB       'V'
                          2833 +2              ;V
                          2834 +2          
0551 57                   2835 +3          DB       'W'
                          2836 +2          ;W
                          2837 +2          
0552 58                   2838 +3          DB       'X'
                          2839 +2          ;X
                          2840 +2          
0553 59                   2841 +3          DB       'Y'
                          2842 +2          ;Y
                          2843 +2          
0554 5A                   2844 +3          DB       'Z'
                          2845 +2          ;Z
                          2846 +2          
0555 5B                   2847 +3          DB       '['
                          2848 +2          ;[
                          2849 +2          
0556 5C                   2850 +3          DB       '\'
                          2851 +2          ;\
                          2852 +2          
0557 5D                   2853 +3          DB       ']'
                          2854 +2          ;]
                          2855 +2          
0558 5E                   2856 +3          DB       '^'
                          2857 +2          ;^
                          2858 +2          
0559 5F                   2859 +3          DB       '_'
                          2860 +2          ;_
                          2861 +2          
055A 60                   2862 +3          DB       '`'
                          2863 +2          ;`
                          2864 +2          
055B 61                   2865 +3          DB       'a'
                          2866 +2          ;a
                          2867 +2          
055C 62                   2868 +3          DB       'b'
                          2869 +2          ;b
                          2870 +2          
055D 63                   2871 +3          DB       'c'
                          2872 +2          ;c
                          2873 +2          
055E 64                   2874 +3          DB       'd'
                          2875 +2          ;d
                          2876 +2          
055F 65                   2877 +3          DB       'e'
                          2878 +2          ;e  
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   57


LOC  OBJ                  LINE     SOURCE

                          2879 +2          
0560 01                   2880 +3          DB       TRUE
                          2881 +2          ;f
                          2882 +2          
0561 67                   2883 +3          DB       'g'
                          2884 +2          ;g
                          2885 +2          
0562 68                   2886 +3          DB       'h'
                          2887 +2          ;h
                          2888 +2          
0563 69                   2889 +3          DB       'i'
                          2890 +2          ;i
                          2891 +2          
0564 6A                   2892 +3          DB       'j'
                          2893 +2          ;j
                          2894 +2          
0565 6B                   2895 +3          DB       'k'
                          2896 +2          ;k
                          2897 +2          
0566 6C                   2898 +3          DB       'l'
                          2899 +2          ;l
                          2900 +2          
0567 6D                   2901 +3          DB       'm'
                          2902 +2          ;m
                          2903 +2          
0568 6E                   2904 +3          DB       'n'
                          2905 +2          ;n
                          2906 +2          
0569 00                   2907 +3          DB       FALSE
                          2908 +2          ;o
                          2909 +2          
056A 70                   2910 +3          DB       'p'
                          2911 +2          ;p
                          2912 +2          
056B 71                   2913 +3          DB       'q'
                          2914 +2          ;q
                          2915 +2          
056C 72                   2916 +3          DB       'r'
                          2917 +2          ;r
                          2918 +2          
056D 73                   2919 +3          DB       's'
                          2920 +2          ;s
                          2921 +2          
056E 74                   2922 +3          DB       't'
                          2923 +2          ;t
                          2924 +2          
056F 75                   2925 +3          DB       'u'
                          2926 +2          ;u
                          2927 +2          
0570 76                   2928 +3          DB       'v'
                          2929 +2          ;v
                          2930 +2          
0571 77                   2931 +3          DB       'w'
                          2932 +2          ;w
                          2933 +2          
8086/87/88/186 MACRO ASSEMBLER    PARSER                                                   13:21:26  12/08/;3  PAGE   58


LOC  OBJ                  LINE     SOURCE

0572 78                   2934 +3          DB       'x'
                          2935 +2          ;x
                          2936 +2          
0573 79                   2937 +3          DB       'y'
                          2938 +2          ;y
                          2939 +2          
0574 7A                   2940 +3          DB       'z'
                          2941 +2          ;z
                          2942 +2          
0575 7B                   2943 +3          DB       '{'
                          2944 +2          ;{
                          2945 +2          
0576 7C                   2946 +3          DB       '|'
                          2947 +2          ;|
                          2948 +2          
0577 7D                   2949 +3          DB       '}'
                          2950 +2          ;}
                          2951 +2          
0578 7E                   2952 +3          DB       '~'
                          2953 +2          ;~
                          2954 +2          
0579 7F                   2955 +3          DB       127
                          2956 +2          ;rubout
                          2957 +1          
                          2958             
                          2959             
----                      2960     CODE    ENDS
                          2961         
                          2962     ;the data segment
                          2963     
----                      2964     DATA    SEGMENT PUBLIC  'DATA'
                          2965     
0000 ????                 2966     Errorflag      DW      ?                ; Holds error type
0002 ????                 2967     magnitude       DW      ?               ; Shared magnitude (can be angle, speed), uns
                                   igned 
                          2968                                                                                     ; 15-
                                   bit val
0004 ??                   2969     sign            DB      ?               ; Can be POS or NEG
0005 ??                   2970     FSM_state       DB      ?               ; Holds the current state of FSM
                          2971     
----                      2972     DATA    ENDS
                          2973     
                          2974             END 

ASSEMBLY COMPLETE, NO ERRORS FOUND
